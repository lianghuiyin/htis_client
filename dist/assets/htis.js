"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('htis/adapters/application', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].RESTAdapter.extend({
        // host:"http://192.168.0.99:86",
        // namespace: 'server/api',
        namespace: 'api',
        shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
            return false;
        },
        headers: (function () {
            var token = this.container.lookup("controller:session").genrateToken();
            if (window.sessionStorage) {
                sessionStorage.setItem("token", token);
            }
            return {
                "Token": token
            };
        }).property().volatile(),
        handleResponse: function handleResponse(status, headers, payload) {
            if (status === 0) {
                //status为0表示网络断开或服务器繁忙
                return new _emberData['default'].InvalidError({
                    ServerSideError: "网络断开或服务器繁忙"
                });
            } else {
                return this._super(status, headers, payload);
            }
        }
    });
});
define('htis/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'htis/config/environment'], function (exports, _ember, _emberResolver, _emberLoadInitializers, _htisConfigEnvironment) {

  var App;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  _ember['default'].onerror = function (reason) {
    if (console && console.error) {
      console.error(reason);
      console.error(reason.stack);
    }
    alert(reason.message);
  };

  App = _ember['default'].Application.extend({
    modulePrefix: _htisConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _htisConfigEnvironment['default'].podModulePrefix,
    Resolver: _emberResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _htisConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define("htis/components/alert-error", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Component.extend({
        model: null,
        classNames: ["alert", "alert-danger"],
        attributeBindings: ["role"],
        role: "alert",
        isCustomized: false,
        actions: {
            ok: function ok() {
                this.sendAction('action', this.get("model"));
            }
        }
    });
});
define("htis/components/alert-warning", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Component.extend({
		classNames: ["alert", "alert-warning"],
		attributeBindings: ["role"],
		role: "alert",
		actions: {
			ok: function ok() {
				this.sendAction('action', true);
			},
			cancel: function cancel() {
				this.sendAction('action', false);
			}
		}
	});
});
define("htis/components/canvas-sign", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Component.extend({
        classNames: ["canvas-sign"],
        canvasContext: null,
        canvasData: { top: 0, left: 0, length: 0 },
        isDrawing: false,
        color: "#31708f",
        submitAction: "submit",
        resetAction: "reset",
        cancelAction: "cancel",
        abortAction: "abort",
        isSaving: false,
        isCanvas: true,
        didInsertElement: function didInsertElement() {
            var parentContainer = this.$().parent().parent();
            var canvas = this.$("canvas")[0];
            var canvasWidth = parentContainer.width();
            var canvasHeight = parentContainer.height() - 4;
            canvas.width = canvasWidth;
            canvas.height = canvasHeight;
            var canvasContext = canvas.getContext('2d');
            canvasContext.lineWidth = 2;
            canvasContext.lineJons = 'round';
            canvasContext.lineCep = 'round';
            // canvasContext.fillStyle ="red"; 
            // canvasContext.fillRect(0,0,canvasWidth,canvasHeight);
            this.set("canvasContext", canvasContext);
            this.set("canvasWidth", canvasWidth);
            this.set("canvasHeight", canvasHeight);
            this.set("canvasData.length", 0);
            return this._super();
        },
        eventManager: _ember["default"].Object.create({
            mouseDown: function mouseDown(event, view, isTouch) {
                if (!view.isCanvas) {
                    return;
                }
                var offset = window.$(view.element).offset();
                var canvasData = view.get("canvasData");
                canvasData.left = offset.left;
                canvasData.top = offset.top;
                view.set("isDrawing", true);
                var canvasContext = view.get("canvasContext");
                canvasContext.strokeStyle = view.get("color");
                canvasContext.beginPath();
                var clientX = isTouch ? event.originalEvent.touches[0].clientX : event.clientX;
                var clientY = isTouch ? event.originalEvent.touches[0].clientY : event.clientY;
                offset = { left: clientX - offset.left, top: clientY - offset.top };
                canvasContext.moveTo(offset.left, offset.top);
            },
            mouseUp: function mouseUp(event, view) {
                if (!view.isCanvas) {
                    return;
                }
                view.set("isDrawing", false);
            },
            mouseMove: function mouseMove(event, view, isTouch) {
                event.preventDefault();
                var canvasContext = view.canvasContext;
                if (isTouch) {
                    var touch = event.originalEvent.touches[0];
                    canvasContext.lineTo(touch.clientX, touch.clientY);
                    canvasContext.stroke();
                    view.canvasData.length++;
                } else {
                    if (view.isDrawing) {
                        var canvasData = view.canvasData;
                        canvasContext.lineTo(event.clientX - canvasData.left, event.clientY - canvasData.top);
                        canvasContext.stroke();
                        canvasData.length++;
                    }
                }

                // if(view.isDrawing){
                // 	let canvasContext = view.canvasContext;
                // 	let canvasData = view.canvasData;
                //           canvasData.length++;
                //           let clientX = isTouch ? event.originalEvent.touches[0].clientX : event.clientX;
                //           let clientY = isTouch ? event.originalEvent.touches[0].clientY : event.clientY;
                //           let offset = {left:clientX - canvasData.left,top:clientY - canvasData.top};
                //        canvasContext.lineTo(offset.left,offset.top);
                //        canvasContext.stroke();
                // }
            },
            mouseLeave: function mouseLeave(event, view) {
                this.mouseUp(event, view, true);
            },
            touchStart: function touchStart(event, view) {
                this.mouseDown(event, view, true);
            },
            touchEnd: function touchEnd(event, view) {
                this.mouseUp(event, view, true);
            },
            touchMove: function touchMove(event, view) {
                this.mouseMove(event, view, true);
            }
        }),
        actions: {
            submit: function submit() {
                var canvas = this.$("canvas")[0];
                var data = canvas.toDataURL('image/jpeg', 0.1);
                var b64 = data.substring(23); //删除字符串前的提示信息 "data:image/png;base64," 如果是'image/jpeg'要改成23
                var dataLength = this.get("canvasData").length;
                this.sendAction('submitAction', b64, dataLength);
            },
            reset: function reset() {
                var canvasContext = this.get("canvasContext");
                this.set("canvasData.length", 0);
                canvasContext.clearRect(0, 0, this.get("canvasWidth"), this.get("canvasHeight"));
                this.sendAction('resetAction');
            },
            cancel: function cancel() {
                this.set("canvasData.length", 0);
                this.sendAction('cancelAction');
            },
            abort: function abort() {
                this.sendAction('abortAction');
            }
        }
    });
});
define('htis/components/checkbox-list-item', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        value: null,
        compareto: [],
        tagName: "label",
        isEditing: false,
        isReadonly: _ember['default'].computed.not('isEditing'),
        //disabled属于对部分标签有bug，所以不能用，比如label标签，但实际上浏览器对disabled属性的效果只是样式而并没有行为上的意义，所以完全可以用class中的disabled样式代替
        // attributeBindings:["disabled"],
        classNames: ['btn', 'btn-default'],
        classNameBindings: ['isReadonly:disabled', 'isChecked:active'],
        isChecked: _ember['default'].computed("value", "compareto.length", function () {
            var compareto = this.get("compareto");
            if (!compareto) {
                return false;
            }
            return compareto.contains(this.get("value"));
        }),
        click: function click() {
            this.sendAction('action', {
                value: this.get("value"),
                isChecked: !this.get("isChecked")
            });
        }
    });
});
define("htis/components/checkbox-list-value", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Component.extend({
		content: [],
		isObject: true,
		contentValueKey: "name",
		split: ",",
		value: _ember["default"].computed("content", "content.[]", function () {
			var content = this.get("content");
			if (content) {
				if (this.get("isObject")) {
					return content.mapBy(this.get("contentValueKey")).join(this.get("split"));
				} else {
					return content.join(this.get("split"));
				}
			} else {
				return "";
			}
		})
	});
});
define('htis/components/checkbox-list', ['exports', 'ember'], function (exports, _ember) {
				exports['default'] = _ember['default'].Component.extend({
								classNames: ['checkbox-list', 'well', 'well-sm'],
								content: [],
								selection: null
				});
});
define('htis/components/compare-item', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _ember['default'].Component.extend({
        content: null,
        compareto: null,
        classNames: ['compare-item'],
        isChangeTagable: false,
        changeTag: "",
        changeTags: [],
        // classNameBindings: ['isEqual:active'],
        isEqual: _ember['default'].computed("content", "content.[]", "compareto", function () {
            var compareto = this.get("compareto");
            var content = this.get("content");
            var isChangeTagable = this.get("isChangeTagable");
            var changeTag = this.get("changeTag");
            var changeTags = this.get("changeTags");
            var isEqual = false;
            if (content instanceof _emberData['default'].ManyArray && compareto instanceof _emberData['default'].ManyArray) {
                isEqual = compareto.mapBy("id").sort().join(",") === content.mapBy("id").sort().join(",");
            } else if (_ember['default'].isArray(content) && _ember['default'].isArray(compareto)) {
                isEqual = compareto.sort().join(",") === content.sort().join(",");
            } else if (content instanceof Date && compareto instanceof Date) {
                isEqual = compareto.getTime() === content.getTime();
            } else {
                isEqual = compareto === content;
            }
            if (isChangeTagable) {
                if (isEqual) {
                    changeTags.removeObject(changeTag);
                } else {
                    changeTags.addObject(changeTag);
                }
            }
            return isEqual;
        })
    });
});
define("htis/components/container-wrap", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Component.extend({
		classNames: ["container-wrap", "trans-all-05", "opacity09"],
		classNameBindings: ['isMulti:is-multi', 'isFolded:is-folded', 'isFull:container-full', 'isLeft:container-left', 'isCenter:container-center', 'isRight:container-right'],
		isFolded: false,
		isFull: false,
		isLeft: false,
		isCenter: false,
		isRight: false,
		isMulti: false,
		isBoxShadow: false
	});
});
define('htis/components/date-picker-value', ['exports', 'ember'], function (exports, _ember) {
	exports['default'] = _ember['default'].Component.extend({
		classNames: ["date-picker-value"],
		startDate: null,
		endDate: null,
		format: 'yyyy-MM-dd'
	});
});
define('htis/components/date-picker', ['exports', 'ember'], function (exports, _ember) {
	exports['default'] = _ember['default'].Component.extend({
		classNames: ["date-picker"],
		classNameBindings: ['isAutoCenter:is-auto-center'],
		startDate: null,
		endDate: null,
		isResetNeeded: false,
		isAutoCenter: false,
		isResetNeededChange: _ember['default'].observer("isResetNeeded", function () {
			var s = this.get("startDate");
			var e = this.get("endDate");
			var n = new Date();
			s = s ? s : n;
			e = e ? e : n;
			this.$().DatePickerSetDate([s.format('yyyy-MM-dd'), e.format('yyyy-MM-dd')], true);
		}),
		didInsertElement: function didInsertElement() {
			var s = this.get("startDate");
			var e = this.get("endDate");
			var n = new Date();
			s = s ? s : n;
			e = e ? e : n;
			var self = this;
			this.$().DatePicker({
				flat: true,
				date: [s.format('yyyy-MM-dd'), e.format('yyyy-MM-dd')],
				current: s.format('yyyy-MM-dd'),
				calendars: 3,
				mode: 'range',
				onChange: function onChange(formated, dates) {
					self.setAttr("startDate", dates[0]);
					self.setAttr("endDate", dates[1]);
				}
			});
		}
	});
});
define("htis/components/datetime-input", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].TextField.extend({
        classNames: ["datetime-input"],
        format: "yyyy-MM-ddThh:mm",
        target: null,
        // value:null,
        attributeBindings: ['placeholder'],
        placeholder: "",
        type: _ember["default"].computed(function () {
            // window.navigator.userAgent.toLowerCase().indexOf("safari") > 0 ? "number"
            // return this.container.lookup("service:equipment").get("isXs") ? "number" : "text";
            var platform = window.navigator.platform.toLowerCase();
            if (platform.indexOf("mac") > -1 || platform.indexOf("win") > -1) {
                //PC上上text
                return "text";
            } else {
                //手机及pad上用数值
                return "datetime-local";
            }
        }),
        value: _ember["default"].computed("target", function () {
            if (this.get("type") === "text") {
                return this.get("target").format(this.get("format").replace("T", " "));
            } else {
                return this.get("target").format(this.get("format"));
            }
        }),
        valueDidChange: _ember["default"].observer("value", function () {
            var value = this.get("value");
            var targetValue = window.HOJS.lib.parseDate(value.replace("T", " "));
            this.set("target", targetValue);
        })
    });
});
define("htis/components/default-index", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Component.extend({
		title: "",
		tooltip: "未选择车辆"
	});
});
define('htis/components/detail-panel', ['exports', 'ember'], function (exports, _ember) {
       exports['default'] = _ember['default'].Component.extend({
              classNames: ['detail-panel', 'panel'],
              pannelTitle: "标题",
              isLeftButtonNeeded: true,
              leftButtonTitle: "返回",
              leftButtonIcon: "glyphicon-arrow-left",
              leftButtonAction: "goBack",
              isRightButtonNeeded: false,
              rightButtonTitle: "下一步",
              rightButtonIcon: "glyphicon-arrow-right",
              rightButtonAction: "goNext",
              actions: {
                     leftAction: function leftAction() {
                            this.sendAction('leftButtonAction');
                     },
                     rightAction: function rightAction() {
                            this.sendAction('rightButtonAction');
                     }
              }
       });
});
define('htis/components/fold-button', ['exports', 'ember'], function (exports, _ember) {
   exports['default'] = _ember['default'].Component.extend({
      classNames: ["fold-button"],
      classNameBindings: ['isFolded:is-folded'],
      isFolded: false,
      foldedIcon: "glyphicon-triangle-right",
      unfoldedIcon: "glyphicon-triangle-bottom",
      tagName: "a",
      click: function click() {
         this.toggleProperty("isFolded");
      }
   });
});
define('htis/components/list-panel-item', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _ember['default'].Component.extend({
        content: null,
        compareto: null,
        tagName: "a",
        isNeedToCheckNew: true,
        classNames: ['list-group-item'],
        classNameBindings: ['isChecked:active'],
        isChecked: _ember['default'].computed("content", "compareto", "content.isNew", function () {
            var compareto = this.get("compareto");
            var content = this.get("content");
            var isNeedToCheckNew = this.get("isNeedToCheckNew");
            if (isNeedToCheckNew && content instanceof _emberData['default'].Model && content.get("isNew")) {
                //新建记录默认选中
                return true;
            }
            if (!compareto) {
                return false;
            }
            return compareto === content;
        }),
        click: function click() {
            if (!this.get("isChecked")) {
                this.sendAction('action', this.get("content"));
            }
        }
    });
});
define('htis/components/list-panel', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['list-panel', 'panel'],
        content: null,
        value: null,
        pannelTitle: "标题",
        isLeftButtonNeeded: true,
        leftButtonTitle: "返回",
        leftButtonIcon: "glyphicon-arrow-left",
        leftButtonAction: "goBack",
        isRightButtonNeeded: true,
        rightButtonTitle: "新建",
        rightButtonIcon: "glyphicon-plus",
        rightButtonAction: "goNew",
        isFilterButtonNeeded: false,
        isFilterButtonLighted: false,
        filterButtonTitle: "筛选",
        filterButtonIcon: "glyphicon-filter",
        filterButtonAction: "filter",
        filterText: "",
        isSearchBoxNeeded: true,
        searchPlaceholder: "输入名称搜索",
        searchKey: "",
        isSearching: false,
        isMoreButtonNeeded: false,
        isTopButtonNeeded: false,
        isToShowAll: false,
        fetchNextButtonAction: "fetchNext",
        isEnterSearchable: false,
        isEnterLighted: false,
        enterSearchAction: "enterSearch",
        errors: null,
        actions: {
            leftAction: function leftAction() {
                this.sendAction('leftButtonAction');
            },
            rightAction: function rightAction() {
                this.sendAction('rightButtonAction');
            },
            filterAction: function filterAction() {
                this.sendAction('filterButtonAction');
            },
            fetchNextAction: function fetchNextAction() {
                this.sendAction('fetchNextButtonAction');
            },
            toggleToShowAll: function toggleToShowAll() {
                this.toggleProperty("isToShowAll");
            },
            enterSearchAction: function enterSearchAction() {
                if (this.get("isEnterSearchable")) {
                    this.sendAction('enterSearchAction', this.get("searchKey"));
                }
            }
        }
    });
});
define('htis/components/navigable-pane', ['exports', 'ember'], function (exports, _ember) {
	exports['default'] = _ember['default'].Component.extend({
		routeName: "",
		isActive: false,
		isBack: false,
		isHide: false,
		routeClassName: _ember['default'].computed('routeName', function () {
			return this.get('routeName').replace(/\./g, "-");
		}),
		classNames: ["navigable-pane", "trans-all-02"],
		classNameBindings: ['routeClassName', 'isActive:active:right', 'isBack:left', 'isHide:hide'],
		didInsertElement: function didInsertElement() {
			var _this = this;

			_ember['default'].run.next(function () {
				//这里要加later是因为部分浏览器（比如chrome）会出现因为运行太快没有动画的情况
				_ember['default'].run.later(function () {
					//这里加isDestroyed判断是因为在有些特别情况下，比如系统比较卡，这里会出现this被注销的情况
					if (!_this.get("isDestroyed")) {
						_this.set("isActive", true);
					}
				}, 10);
			});
		}
	});
});
define("htis/components/none-powered", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Component.extend({
		title: "权限缺失",
		tooltip: "您没有权限使用该功能或者您没有登录",
		actions: {
			backAction: function backAction() {
				this.sendAction('action');
			}
		}
	});
});
define('htis/components/number-input', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].TextField.extend({
        dot: 0, //小数点位数
        symbol: "+", //正负数，+/-/+-
        isNullable: false,
        classNames: ['number-input'],
        attributeBindings: ['number', 'placeholder'],
        placeholder: "",
        // type:"number",
        // type:"tel",//这里不能用number，因为在chrome下elm.selectionStart会报错，但是tel会让safari上没有小数点输入
        type: _ember['default'].computed(function () {
            // window.navigator.userAgent.toLowerCase().indexOf("safari") > 0 ? "number"
            // return this.container.lookup("service:equipment").get("isXs") ? "number" : "text";
            var platform = window.navigator.platform.toLowerCase();
            if (platform.indexOf("mac") > -1 || platform.indexOf("win") > -1) {
                //PC上上text
                return "text";
            } else {
                //手机及pad上用数值
                return "number";
            }
        }),
        eventManager: _ember['default'].Object.create({
            getCursorLocation: function getCursorLocation(elm) {
                if (elm.createTextRange) {
                    // IE              
                    var range = document.selection.createRange();
                    range.setEndPoint('StartToStart', elm.createTextRange());
                    return range.text.length;
                } else if (typeof elm.selectionStart === 'number') {
                    return elm.selectionStart;
                }
            },
            keyPress: function keyPress(event, view) {
                var symbol = view.get("symbol"),
                    dot = view.get("dot"),
                    oldValue = view.element.value;
                var loc = this.getCursorLocation(view.element);
                if (event.keyCode === 13) {
                    //回车触发focusOut从而同步值变化
                    view.$().trigger("blur");
                    return;
                }
                if (event.keyCode === 45) {
                    if (symbol === "+-" || symbol === "-") {
                        if (loc === 0 && view.element.value.indexOf("-") === -1) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                } else if (event.keyCode === 46) {
                    if (dot === 0) {
                        return false;
                    }
                    if (loc === 0 || view.element.value.indexOf(".") !== -1) {
                        return false;
                    }
                    if (loc < oldValue.length - dot) {
                        return false;
                    }
                } else {
                    if (event.keyCode >= 45 && event.keyCode <= 57) {
                        if (dot > 0) {
                            var indexOfDot = oldValue.lastIndexOf(".");
                            if (indexOfDot > 0 && loc > indexOfDot && oldValue.length - indexOfDot > dot) {
                                return false;
                            }
                        }
                    } else {
                        return false;
                    }
                }
            },
            // focusOut(event, view) {
            // var oldValue = view.element.value,
            //     newValue = oldValue;
            // if (oldValue.lastIndexOf(".") === (oldValue.length - 1)) {
            //     newValue = newValue.substr(0,oldValue.length - 1);
            // }
            // if (/(0+$)/.test(newValue)) {
            //     if (newValue.lastIndexOf(".") >= 0) {
            //         newValue = newValue.replace(/(0*$)/g, "");
            //         newValue = newValue.replace(/(\.*$)/g, "");
            //     }
            // }
            // if (/(^0+)/.test(newValue)) {
            //     newValue = newValue.replace(/^0*/g, '0');
            //     if (/(^[0]{1}[1-9]{1,})/.test(newValue)) {
            //         newValue = newValue.replace(/^0*/g, '');
            //     }
            // }
            // if (isNaN(newValue)) {
            //     newValue = "0";
            // }
            // view.element.value = newValue;
            // view.set("value",parseFloat(newValue));
            // },
            change: function change(event, view) {

                var oldValue = view.element.value,
                    newValue = oldValue;
                if (oldValue.lastIndexOf(".") === oldValue.length - 1) {
                    newValue = newValue ? newValue.substr(0, oldValue.length - 1) : newValue;
                }
                if (/(0+$)/.test(newValue)) {
                    if (newValue.lastIndexOf(".") >= 0) {
                        newValue = newValue.replace(/(0*$)/g, "");
                        newValue = newValue.replace(/(\.*$)/g, "");
                    }
                }
                if (/(^0+)/.test(newValue)) {
                    newValue = newValue.replace(/^0*/g, '0');
                    if (/(^[0]{1}[1-9]{1,})/.test(newValue)) {
                        newValue = newValue.replace(/^0*/g, '');
                    }
                }
                newValue = parseFloat(newValue);
                if (isNaN(newValue)) {
                    newValue = 0;
                }
                if (view.get("isNullable") && newValue === 0) {
                    view.element.value = "";
                    view.set("value", null);
                } else {
                    view.element.value = newValue;
                    view.set("value", newValue);
                }

                // var newValue = view.element.value.replace(/[^0-9\.-]/g,"");
                // view.element.value = newValue;
                // view.set("value",parseFloat(newValue));
            }
        })
    });
});
define("htis/components/pick-up-pop", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Component.extend({
        classNames: ["pick-up-pop", "trans-all-02"],
        isPicking: false,
        isActive: false,
        isAlert: false,
        isNoneAnimation: false,
        init: function init() {
            var _this = this;

            this._super();
            if (_ember["default"].$.support.transition && !this.get("isNoneAnimation")) {
                _ember["default"].run.next(function () {
                    // Ember.run.later(()=>{
                    if (_this && !_this.get("isDestroyed")) {
                        _this.set("isActive", true);
                    }
                    // },100);
                });
            } else {
                    this.set("isActive", true);
                    _ember["default"].run.next(function () {
                        if (_this && !_this.get("isDestroyed")) {
                            _this.notifyPropertyChange("isActive");
                        }
                    });
                }
        },
        isActiveDidChange: _ember["default"].observer("isActive", function () {
            var _this2 = this;

            if (this.get("isActive")) {
                return;
            }
            if (_ember["default"].$.support.transition && !this.get("isNoneAnimation")) {
                _ember["default"].run.next(function () {
                    // Ember.run.later(()=>{
                    if (_this2 && !_this2.get("isDestroyed")) {
                        _this2.set("isPicking", false);
                    }
                    // },100);
                });
            } else {
                    _ember["default"].run.next(function () {
                        if (_this2 && !_this2.get("isDestroyed")) {
                            _this2.set("isPicking", false);
                            _this2.notifyPropertyChange("isPicking");
                        }
                    });
                }
        }),
        willDestroy: function willDestroy() {
            //因为离开时pick-up-pop控件无法通过isActive属性来同步isPicking属性（即无法触发上面的observer函数isActiveDidChange），
            //所以需要手动判断并设置为false
            if (this.get("isPicking")) {
                this.set("isPicking", false);
            }
        },
        actions: {
            clearPop: function clearPop() {
                this.set("isPicking", false);
            }
        }
    });
});
define("htis/components/pick-up", ["exports", "ember"], function (exports, _ember) {
  exports["default"] = _ember["default"].Component.extend({
    classNames: ["pick-up"],
    isPicking: false,
    value: "",
    click: function click() {
      this.toggleProperty("isPicking");
    }
  });
});
define('htis/components/radio-list-item', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        content: null,
        compareto: [],
        tagName: "label",
        //disabled属于对部分标签有bug，所以不能用，比如label标签，但实际上浏览器对disabled属性的效果只是样式而并没有行为上的意义，所以完全可以用class中的disabled样式代替
        // attributeBindings:["disabled"],
        classNames: ['radio-list-item', 'btn', 'btn-default'],
        classNameBindings: ['isChecked:active', 'isSmall:btn-sm'],
        isSmall: true,
        contentValueKey: null,
        isChecked: _ember['default'].computed("content", "compareto", function () {
            var compareto = this.get("compareto");
            if (compareto === undefined) {
                return false;
            }
            var contentValueKey = this.get("contentValueKey");
            if (contentValueKey) {
                return compareto === this.get("content")[contentValueKey];
            } else {
                return compareto === this.get("content");
            }
        }),
        click: function click() {
            var params = undefined;
            var contentValueKey = this.get("contentValueKey");
            if (contentValueKey) {
                params = this.get("content")[contentValueKey];
            } else {
                params = this.get("content");
            }
            this.sendAction('action', params);
        }
    });
});
define('htis/components/radio-list', ['exports', 'ember'], function (exports, _ember) {
       exports['default'] = _ember['default'].Component.extend({
              classNames: ['radio-list'],
              classNameBindings: ['isWellNeeded:well', 'isWellNeeded:well-sm'],
              isWellNeeded: _ember['default'].computed('isVertical', 'isEditing', function () {
                     if (this.get("isEditing")) {
                            return this.get("isVertical");
                     } else {
                            return false;
                     }
              }),
              content: [],
              contentValueKey: null,
              isEditing: false,
              isVertical: false,
              value: null,
              checkedContent: _ember['default'].computed('vaue', 'isEditing', function () {
                     var contentValueKey = this.get("contentValueKey");
                     var value = this.get("value");
                     if (contentValueKey) {
                            return this.get("content").findBy(contentValueKey, value);
                     } else {
                            return this.get("content").find(function (n) {
                                   return n === value;
                            });
                     }
              })
       });
});
define('htis/components/spin-button', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['spin-button'],
        classNameBindings: ['isIcon', 'isLoading', 'isDisabled:disabled'],
        isDisabled: false,
        isLoading: false,
        isIcon: false,
        loadingIcon: "glyphicon-transfer",
        loadedIcon: "glyphicon-circle-arrow-right",
        loadingText: "loading",
        tagName: "button",
        attributeBindings: ["title"],
        title: "",
        titleIcon: "",
        isAutoLoading: true,
        click: function click() {
            if (this.get("isAutoLoading")) {
                this.sendAction('action', { isFromSpinButton: true });
            } else {
                if (!this.get('isLoading')) {
                    this.set('isLoading', true);
                    this.sendAction('action', { isFromSpinButton: true });
                }
            }
        }
    });
});
define("htis/components/spin-space", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Component.extend({
		classNames: ["spin-space"],
		spinner: null,
		radius: 4,
		length: 4,
		width: 2,
		didInsertElement: function didInsertElement() {
			var radius = this.get("radius");
			var length = this.get("length");
			var width = this.get("width");
			var spinner = new window.Spinner({ radius: radius, length: length, width: width }).spin(this.$()[0]);
			this.set("spinner", spinner);
			return this._super();
		},
		willDestroyElement: function willDestroyElement() {
			var spinner = this.get("spinner");
			if (spinner) {
				spinner.stop();
				this.set("spinner", null);
			}
		}
	});
});
define("htis/components/standard-detail-panel", ["exports", "ember"], function (exports, _ember) {
							exports["default"] = _ember["default"].Component.extend({
														classNames: ["panel"],
														model: null,
														isEditing: false,
														isLeftButtonNeeded: false,
														isRightButtonNeeded: true,
														backAction: "goBack",
														editAction: "edit",
														cancelAction: "cancel",
														saveAction: "save",
														deleteAction: "delete",
														pannelTitle: "",
														actions: {
																					backAction: function backAction() {
																												this.sendAction('backAction');
																					},
																					editAction: function editAction() {
																												this.sendAction('editAction');
																					},
																					cancelAction: function cancelAction() {
																												this.sendAction('cancelAction');
																					},
																					saveAction: function saveAction() {
																												this.sendAction('saveAction');
																					},
																					deleteAction: function deleteAction() {
																												this.sendAction('deleteAction');
																					}
														}
							});
});
define("htis/components/trace-list-item", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Component.extend({
		content: null,
		compareto: null,
		text: "",
		color: "",
		icon: "",
		createrTag: "",
		modifierTag: "",
		isModifierNeeded: true,
		tagName: "li",
		classNames: ['trace-list-item'],
		classNameBindings: ['isChecked:active', 'color'],
		statuasdfsDidChange: _ember["default"].on('init', _ember["default"].observer("content.status", function () {
			var status = this.get("content.status");
			var text = undefined;
			var icon = undefined;
			var color = undefined;
			var isModifierNeeded = true;
			var createrTag = "";
			var modifierTag = "";
			switch (status) {
				case "recaptured":
					text = "已取回";
					icon = "glyphicon-adjust";
					color = "text-info";
					createrTag = "申请";
					modifierTag = "取回";
					break;
				case "modified":
					text = "已修改";
					icon = "glyphicon-edit";
					color = "text-muted";
					createrTag = "申请";
					modifierTag = "修改";
					break;
				case "pending":
					text = "待审核";
					icon = "glyphicon-time";
					color = "text-warning";
					isModifierNeeded = false;
					createrTag = "申请";
					break;
				case "approved":
					text = "已核准";
					icon = "glyphicon-ok";
					color = "text-success";
					createrTag = "申请";
					modifierTag = "核准";
					break;
				case "rejected":
					text = "已驳回";
					icon = "glyphicon-remove";
					color = "text-danger";
					createrTag = "申请";
					modifierTag = "驳回";
					break;
				case "aborted":
					text = "已中止";
					icon = "glyphicon-stop";
					color = "text-danger";
					isModifierNeeded = false;
					createrTag = "中止";
					break;
				case "forbidden":
					text = "已暂停";
					icon = "glyphicon-ban-circle";
					color = "text-danger";
					isModifierNeeded = false;
					createrTag = "暂停";
					break;
				case "enabled":
					text = "已恢复";
					icon = "glyphicon-ok-circle";
					color = "text-success";
					isModifierNeeded = false;
					createrTag = "恢复";
					break;
			}
			this.beginPropertyChanges();
			this.set("text", text);
			this.set("icon", icon);
			this.set("color", color);
			this.set("isModifierNeeded", isModifierNeeded);
			this.set("createrTag", createrTag);
			if (isModifierNeeded) {
				this.set("modifierTag", modifierTag);
			}
			this.endPropertyChanges();
		})),
		isChecked: false,
		click: function click() {
			this.toggleProperty("isChecked");
		}
	});
});
define('htis/controllers/account', ['exports', 'ember', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        routeName: "account.index",
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        modelTitle: "账户",
        pannelTitle: "账户设置",
        helpInfo: "帮助信息",
        actions: {}
    });
});
// import Ember from 'ember';

// export default Ember.Controller.extend({
//     routeName:"account.index",
//     applicationController:Ember.inject.controller('application'),
// 	sessionController:Ember.inject.controller('session'),
// 	isActive:false,
// 	isBack:false,
//     modelTitle:"账户",
//     pannelTitle:"账户设置",
//     helpInfo:"帮助信息",
//     actions:{
//     }
// });
define('htis/controllers/account/info', ['exports', 'ember', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        routeName: "account.info",
        sessionController: _ember['default'].inject.controller('session'),
        isEditing: false,
        modelTitle: "账户",
        pannelTitle: _ember['default'].computed('isEditing', 'isNew', function () {
            if (this.get('isEditing')) {
                return '修改' + this.get("modelTitle") + '信息';
            } else {
                return this.get("modelTitle") + '信息';
            }
        }),
        helpInfo: "帮助信息",
        actions: {
            edit: function edit() {
                this.send("goEdit");
            },
            save: function save() {
                var _this = this;

                var currentUser = this.get("sessionController.user");
                this.set("model.modifier", currentUser);
                this.get('model').save().then(function () {
                    _this.send("goIndex");
                }, function () {});
            },
            cancel: function cancel() {
                this.send("goIndex");
            }
        }
    });
});
// import Ember from 'ember';

// export default Ember.Controller.extend({
//     sessionController:Ember.inject.controller('session'),
// 	isActive:false,
// 	isBack:false,
//     isEditing:false,
//     modelTitle:"账户",
//     pannelTitle:Ember.computed('isEditing','isNew',function(){
//         if(this.get('isEditing')){
//             return `修改${this.get("modelTitle")}信息`;
//         }
//         else{
//             return `${this.get("modelTitle")}信息`;
//         }
//     }),
//     helpInfo:"帮助信息",
//     actions:{
//         edit() {
//             this.send("goEdit");
//         },
//         save(){
//             let currentUser = this.get("sessionController.user");
//             this.set("model.modifier",currentUser);
//             this.get('model').save().then(()=>{
//                 this.send("goIndex");
//             }, ()=>{
//             });
//         },
//         cancel(){
//             this.send("goIndex");
//         }
//     }
// });
define('htis/controllers/account/pwd', ['exports', 'ember', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        routeName: "account.pwd",
        modelTitle: "账户",
        pannelTitle: "修改密码",
        helpInfo: "帮助信息",
        actions: {
            save: function save() {
                var _this = this;

                this.get('model').save().then(function () {
                    _this.send("goBack");
                }, function () {});
            },
            unloadRecord: function unloadRecord() {
                var model = this.get("model");
                model.rollbackAttributes();
                this.store.unloadRecord(model);
            }
        }
    });
});
// import Ember from 'ember';

// export default Ember.Controller.extend({
// 	isActive:false,
// 	isBack:false,
//     modelTitle:"账户",
//     pannelTitle:"修改密码",
//     helpInfo:"帮助信息",
//     actions:{
//         save(){
//             this.get('model').save().then(()=>{
//                 this.send("goBack");
//             }, ()=>{
//             });
//         },
//         unloadRecord(){
//             let model = this.get("model");
//             model.rollbackAttributes();
//             this.store.unloadRecord(model);
//         }
//     }
// });
define('htis/controllers/application', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        equipment: _ember['default'].inject.service('equipment'),
        changesetController: _ember['default'].inject.controller('changeset'),
        init: function init() {
            var _this = this;

            _ember['default'].$(window).on("resize", function () {
                _this.get("equipment").notifyPropertyChange("isXs");
            });
        },
        appName: 'Horizon Tanker Information System.',
        appTitle: "上汽大众加油机信息系统",
        firmName: "上汽大众",
        appShortTitle: "加油机信息系统",
        author: "上海好耐电子科技有限公司 M&T HORIZON",
        authorSite: "http://www.mthorizon.com/",
        copyright: "版权所有 Copyright 2016",
        version: "当前版本：V1.2.8",
        currentUser: null,
        syncToken: null,
        serializedSyncToken: null, //反序列化syncToken值，用于把syncToken值提交给服务器
        syncTokenDidChange: _ember['default'].observer("syncToken", function () {
            var syncToken = this.get("syncToken");
            if (syncToken) {
                var delayedSyncToken = _ember['default'].copy(syncToken);
                var serializeSyncToken = this.container.lookup("transform:date").serialize.call(null, delayedSyncToken);
                //因为每次服务器接收请求更改数据到更改完成存在一个时间过程，比如慢的多表级联操作存储过程执行可能需要好几秒时间
                //这样会造成数据库中每条记录的ModifiedDate属性值存在延时误差，为了兼顾这种误差
                //在实际抓取changeset时，根据syncToken值提前20秒(一个修改请求应该不会超过20秒)
                //这样虽然会多抓取20秒内的数据造成一定的性能损失，但可以最大程度保证changeset不漏抓
                //把前后台时间误差的bug解决后就不需要这个逻辑了
                // delayedSyncToken.addSeconds(-20);
                this.set("serializedSyncToken", serializeSyncToken);
            }
        }),
        isAboutActive: false,
        isBellActive: false,
        remoteDebugStatus: "none",
        remoteDebugUrl: "http://192.168.0.158:8080",
        remoteDebugList: [{
            name: '关闭',
            value: 'none'
        }, {
            name: 'Weinre',
            value: 'weinre'
        }, {
            name: 'Debuggap',
            value: 'debuggap'
        }],
        isWeinreDebugging: _ember['default'].computed("remoteDebugStatus", function () {
            return this.get("remoteDebugStatus") === "weinre";
        }),
        isDebuggapDebugging: _ember['default'].computed("remoteDebugStatus", function () {
            return this.get("remoteDebugStatus") === "debuggap";
        }),
        remoteDebugUrlDidChange: _ember['default'].observer("remoteDebugStatus", function () {
            //增加weinre/debuggap远程调度功能
            var remoteDebugUrl = this.get("remoteDebugUrl");
            var isDebugStarted = window.$("weinrehighlighter").length > 0 || window.$("#debuggapRoot").length > 0;
            var isWeinreDebugging = this.get("isWeinreDebugging");
            var isDebuggapDebugging = this.get("isDebuggapDebugging");
            if ((isWeinreDebugging || isDebuggapDebugging) && !isDebugStarted) {
                var sc = document.createElement("script");
                sc.setAttribute("name", "remote-dabug");
                var url = "";
                if (isWeinreDebugging) {
                    url = remoteDebugUrl + '/target/target-script-min.js#anonymous';
                } else {
                    url = 'debuggap.js';
                }
                sc.setAttribute("src", url);
                document.getElementsByTagName("body")[0].appendChild(sc);
            } else {
                window.$("script[name='remote-dabug']").remove();
            }
        }),
        isSideActive: _ember['default'].computed("isAboutActive", "isBellActive", function () {
            return this.get("isBellActive") || this.get("isAboutActive");
        }),
        preferences: _ember['default'].computed(function () {
            return this.store.peekAll("preference");
        }),
        shortcutHour: _ember['default'].computed("preferences.firstObject.shortcut_hour", function () {
            return this.get("preferences.firstObject.shortcut_hour");
        }),
        finishHour: _ember['default'].computed("preferences.firstObject.finish_hour", function () {
            return this.get("preferences.firstObject.finish_hour");
        })
    });
});
define('htis/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('htis/controllers/changeset', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        sessionController: _ember['default'].inject.controller('session'),
        equipment: _ember['default'].inject.service('equipment'),
        isPaused: false,
        errorCount: 0,
        isNeedToShowError: false,
        lastErrorToken: null, //记录最后一次请求changeset错误的时间，当其变化时重新攫取changeset
        lastErrorTokenDidChange: _ember['default'].observer("lastErrorToken", function () {
            this.send("tryFetch");
        }),
        billsForPrint: [],
        afterChangesetFetched: function afterChangesetFetched(isSuccess) {
            var _this = this;

            // let sessionController = this.get("sessionController");
            // sessionController.send('syncUser');
            if (isSuccess) {
                this.set("isNeedToShowError", false);
                this.set("errorCount", 0);
                this.send("checkPrintedBillAndRing");
            } else {
                var errorCount = this.get("errorCount");
                this.set("errorCount", ++errorCount);
                if (errorCount > 1) {
                    //提示网络数据同步失败
                    this.set("isNeedToShowError", true);
                }
            }
            var store = this.store;
            store.unloadAll("changeset");
            if (!this.get("equipment.isXs")) {
                //这里加run.next为提高性能
                _ember['default'].run.next(function () {
                    //手机上性能问题，所以不计算过期状态
                    _this.send("computeInstanceIsFinished");
                });
            }
        },
        actions: {
            tryFetch: function tryFetch() {
                var _this2 = this;

                var isPaused = this.get("isPaused");
                if (isPaused) {
                    return;
                }
                _ember['default'].debug('changesetController.tryFetch');
                var sessionController = this.get("sessionController");
                if (!sessionController.get("isLogined")) {
                    return;
                }
                var prom = this.store.createRecord("changeset").save();
                prom.then(function (answer) {
                    _this2.afterChangesetFetched(true, answer.get("user"));
                }, function () {
                    _this2.afterChangesetFetched(false);
                });
                return prom;
            },
            computeInstanceIsFinished: function computeInstanceIsFinished() {
                //通知instance计算过期状态
                //只需要通知可加油、已启用且没有过期的申请单重新计算
                var instances = this.store.peekAll("instance").filter(function (item) {
                    return !item.get("is_archived") && item.get("is_released") && item.get("is_enable") && !item.get("isFinished");
                });
                instances.forEach(function (item) {
                    item.notifyPropertyChange("isFinished");
                });
            },
            checkPrintedBillAndRing: function checkPrintedBillAndRing() {
                //把新打印出来的单子找出来并发出声音提示
                var billsForPrint = this.get("billsForPrint");
                var store = this.store;
                var hasPrintedBills = [];
                var tempBill = undefined;
                billsForPrint.forEach(function (n) {
                    tempBill = store.peekRecord("bill", n);
                    if (tempBill && tempBill.get("is_printed")) {
                        hasPrintedBills.pushObject(n);
                    }
                });
                if (hasPrintedBills.length) {
                    this.send("playMusicTimes", window.$("audio")[0], hasPrintedBills.length);
                    billsForPrint.removeObjects(hasPrintedBills);
                }
            },
            playMusicTimes: function playMusicTimes(player, times) {
                var count = 0;
                player.play();
                player.addEventListener("ended", function () {
                    count++;
                    if (count < times) {
                        player.play();
                    }
                });
            }
        }
    });
});
define('htis/controllers/history', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        routeName: "history.index",
        equipment: _ember['default'].inject.service('equipment'),
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        messagesController: _ember['default'].inject.controller('messages'),
        pannelTitle: "加油单",
        isActive: false,
        isBack: false,
        selection: null,
        isHide: false,
        isPowered: _ember['default'].computed("sessionController.isLogined", function () {
            return this.get("sessionController.isLogined");
        }),
        // runLaterForHide:null,
        // isBackDidChange:Ember.observer("isBack",function(){
        //     //退出后要把div隐藏来减少内存消耗
        //     if(this.get("isBack")){
        //         if(Ember.$.support.transition){
        //             Ember.run.cancel(this.runLaterForHide);
        //             this.runLaterForHide = Ember.run.later(()=>{
        //                 if(this.get("isBack")){
        //                     this.set("isHide",true);
        //                 }
        //             },3000);
        //         }
        //         else{
        //             this.set("isHide",true);
        //         }
        //     }
        // }),
        equipmentIsXsDidChange: _ember['default'].observer("equipment.isXs", function () {
            //当浏览器大小变化造成从手机模式变成非手机模式时需要保证列表中至少有一个选中
            if (this.get("isActive") && this.get("equipment.isNotXs") && this.get("selection") === null) {
                this.send("goBills");
            }
        }),
        isBills: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'bills';
        }),
        isReports: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'reports';
        }),
        actions: {}
    });
});
define('htis/controllers/history/bills', ['exports', 'ember', 'ember-data', 'htis/mixins/standard-list/controller'], function (exports, _ember, _emberData, _htisMixinsStandardListController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], {
        modelName: "bill",
        routeName: "history.bills",
        modelTitle: "加油单",
        parentController: _ember['default'].inject.controller('history'),
        parentRouteName: "history",
        pannelTitle: "加油单明细",
        allArrangedResult: _ember['default'].computed.sort('filteredResult', 'createdDateSorting'),
        filterOption: null,
        lastId: 0,
        errors: _emberData['default'].Errors.create(),
        filterText: _ember['default'].computed("filterOption", function () {
            var filterOption = this.get("filterOption");
            if (filterOption) {
                var projectText = filterOption.get("project.name");
                var departmentText = filterOption.get("department.name");
                var results = [];
                if (projectText) {
                    results.push(projectText);
                }
                if (departmentText) {
                    results.push(departmentText);
                }
                results.push(filterOption.get("startDate").format('yyyy-MM-dd') + '➡' + filterOption.get("endDate").format('yyyy-MM-dd'));
                return results.join(",");
            } else {
                return "";
            }
        }),
        isFiltered: _ember['default'].computed("filterOption", function () {
            return this.get("filterOption") !== null;
        }),
        filteredResult: _ember['default'].computed("model.length", "searchKey", function () {
            var searchKey = this.get("searchKey").toLowerCase();
            searchKey = searchKey.replace(/\\/g, "");
            var arrangedContent = this.get("model.arrangedContent");
            if (!arrangedContent) {
                return [];
            }
            if (searchKey) {
                return arrangedContent.mapBy("record").filterBy("id", searchKey);
            } else {
                return arrangedContent.mapBy("record");
            }
        }),
        actions: {
            filter: function filter() {
                this.send("goFilter");
            },
            fetchNext: function fetchNext() {
                var _this = this;

                this.get("errors").remove('server_side_error');
                this.set("isToShowAll", true);
                var filterOption = this.get("filterOption");
                var project = filterOption.get("project");
                var department = filterOption.get("department");
                var startDate = filterOption.get("startDate");
                var endDate = filterOption.get("endDate");
                this.set("isSearching", true);
                var pageCount = this.get("pageCount");
                var lastId = this.get("lastId");
                this.store.query('bill', {
                    count: pageCount,
                    project: project ? project.get("id") : null,
                    department: department ? department.get("id") : null,
                    startDate: startDate.format('yyyy-MM-dd hh:mm:ss'),
                    endDate: endDate.format('yyyy-MM-dd hh:mm:ss'),
                    lastId: lastId
                }).then(function (answer) {
                    var bills = answer.toArray();
                    if (bills.length > 0) {
                        var minId = bills.mapBy("id").sort(function (a, b) {
                            return parseInt(a) - parseInt(b);
                        }).get("firstObject");
                        _this.set("lastId", minId);
                    }
                    if (bills.length < pageCount) {
                        _this.set("isMoreButtonNeeded", false);
                    } else {
                        _this.set("isMoreButtonNeeded", true);
                    }
                    _this.set("isSearching", false);
                }, function (reason) {
                    if (reason.errors) {
                        var error = reason.errors.objectAt(0);
                        var errorMsg = error.detail;
                        var recordErrors = _this.get("errors");
                        recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    }
                    _this.set("isSearching", false);
                });
            },
            clearBills: function clearBills() {
                this.store.unloadAll("bill");
                this.store.unloadAll("signature");
            },
            enterSearch: function enterSearch(searchKey) {
                var _this2 = this;

                if (searchKey.length === 0) {
                    return;
                }
                if (this.store.peekRecord("bill", searchKey)) {
                    //本地存在则不重新请求
                    return;
                }

                this.set("lastId", 0);
                this.set("isMoreButtonNeeded", false);
                this.send("clearBills");
                this.get("errors").clear();
                this.set("filterOption", null);
                this.set("isSearching", true);
                this.store.find("bill", searchKey).then(function () {
                    _this2.set("isSearching", false);
                }, function (reason) {
                    if (reason.errors) {
                        var error = reason.errors.objectAt(0);
                        var errorMsg = error.detail;
                        var recordErrors = _this2.get("errors");
                        recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    }
                    _this2.set("isSearching", false);
                });
            }
        }
    });
});
define('htis/controllers/history/bills/bill', ['exports', 'ember', 'htis/mixins/standard-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], {
        routeName: "history.bills.bill",
        modelTitle: "加油单",
        isPickingProject: false,
        isPickingDepartment: false,
        nameSorting: ['name:asc'],
        arrangedProjects: _ember['default'].computed.sort('all_projects', 'nameSorting'),
        all_projects: _ember['default'].computed(function () {
            return this.store.peekAll("project");
        }),
        arrangedDepartments: _ember['default'].computed.sort('all_departments', 'nameSorting'),
        all_departments: _ember['default'].computed(function () {
            return this.store.peekAll("department");
        }),
        arrangedOils: _ember['default'].computed.sort('all_oils', 'nameSorting'),
        all_oils: _ember['default'].computed(function () {
            return this.get("model.instance.oils");
        }),
        actions: {
            setOil: function setOil(oil) {
                var model = this.get("model");
                model.set("oil", oil);
                model.notifyPropertyChange("isRelationshipsChanged");
            },
            setProject: function setProject(project) {
                var model = this.get("model");
                model.set("project", project);
                model.notifyPropertyChange("isRelationshipsChanged");
                this.set("isPickUpPopActive", false);
            },
            setDepartment: function setDepartment(department) {
                var model = this.get("model");
                model.set("department", department);
                model.notifyPropertyChange("isRelationshipsChanged");
                this.set("isPickUpPopActive", false);
            },
            save: function save() {
                //修改申请单无法准确计算油耗，所以不计算
                // this.get("model").computeRate();
                this._super();
            }
        }
    });
});
define('htis/controllers/history/bills/filter', ['exports', 'ember', 'ember-data', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _emberData, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        routeName: "history.bills.filter",
        equipment: _ember['default'].inject.service('equipment'),
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        parentController: _ember['default'].inject.controller('history.bills'),
        pannelTitle: "搜索条件设置",
        isSearching: false,
        isUnSavable: false,
        project: null,
        department: null,
        startDate: null,
        endDate: null,
        errors: _emberData['default'].Errors.create(),
        isTimeResetNeeded: false,
        isConfirmingExport: false,
        isFetchingCountForExport: false,
        isExporting: false,
        isExportAbort: false,
        totalLength: 0, //要导出的加油单总个数
        downloadedLength: 0, //已导出加油单个数
        downloadedPercent: 0, //已导出百分比
        lastIdForExport: 0, //导出时标记翻页用的最大ID值
        pageCountForExport: 1200,
        fileNameForExport: "",
        fileUrlForExport: "",
        nameSorting: ['name:asc'],
        arrangedProjects: _ember['default'].computed.sort('all_projects', 'nameSorting'),
        all_projects: _ember['default'].computed(function () {
            return this.store.peekAll("project");
        }),
        arrangedDepartments: _ember['default'].computed.sort('all_departments', 'nameSorting'),
        all_departments: _ember['default'].computed(function () {
            return this.store.peekAll("department");
        }),
        actions: {
            clearError: function clearError() {
                this.get("errors").remove('server_side_error');
            },
            setProject: function setProject(project) {
                this.set("project", project);
                this.set("isPickUpPopActive", false);
            },
            setDepartment: function setDepartment(department) {
                this.set("department", department);
                this.set("isPickUpPopActive", false);
            },
            syncOption: function syncOption(filterOption) {
                var _this = this;

                if (filterOption) {
                    _ember['default'].run.next(function () {
                        _this.set("project", filterOption.get("project"));
                        _this.set("department", filterOption.get("department"));
                        var startDate = filterOption.get("startDate");
                        if (startDate) {
                            _this.set("startDate", startDate);
                        }
                        var endDate = filterOption.get("endDate");
                        if (endDate) {
                            _this.set("endDate", endDate);
                        }
                    });
                } else {
                    this.set("project", null);
                    this.set("department", null);
                    var now = new Date();
                    var startDate = window.HOJS.lib.parseDate(now.format('yyyy-MM-dd 00:00:00'));
                    this.set("startDate", startDate);
                    var endDate = window.HOJS.lib.parseDate(now.format('yyyy-MM-dd 23:59:59'));
                    this.set("endDate", endDate);
                }
            },
            search: function search() {
                var _this2 = this;

                var parentController = this.get("parentController");
                var pageCount = parentController.get("pageCount");
                var project = this.get("project");
                var department = this.get("department");
                var startDate = this.get("startDate");
                var endDate = this.get("endDate");
                parentController.send("clearBills");
                parentController.set("searchKey", "");
                parentController.set("lastId", 0);
                var filterOption = _ember['default'].Object.create({
                    project: project,
                    department: department,
                    startDate: startDate,
                    endDate: endDate
                });
                parentController.set("filterOption", filterOption);
                this.send("clearError");
                this.set("isSearching", true);
                this.store.query('bill', {
                    count: pageCount,
                    project: project ? project.get("id") : null,
                    department: department ? department.get("id") : null,
                    startDate: startDate.format('yyyy-MM-dd hh:mm:ss'),
                    endDate: endDate.format('yyyy-MM-dd hh:mm:ss'),
                    lastId: 0
                }).then(function (answer) {
                    var bills = answer.toArray();
                    if (bills.length > 0) {
                        var maxId = bills.mapBy("id").sort(function (a, b) {
                            return parseInt(a) - parseInt(b);
                        }).get("lastObject");
                        parentController.set("lastId", maxId);
                    }
                    if (bills.length < pageCount) {
                        parentController.set("isMoreButtonNeeded", false);
                    } else {
                        parentController.set("isMoreButtonNeeded", true);
                    }
                    _this2.set("isSearching", false);
                    _this2.send("goBack");
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "该资源不存在或网络繁忙，请稍候再试";
                    }
                    var recordErrors = _this2.get("errors");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this2.set("isSearching", false);
                });
            },
            reset: function reset() {
                var parentController = this.get("parentController");
                parentController.send("clearBills");
                parentController.set("filterOption", null);
                this.send("syncOption", null);
                this.toggleProperty("isTimeResetNeeded", true); //通知时间控件重置界面值
            },
            goExport: function goExport() {
                var _this3 = this;

                var project = this.get("project");
                var department = this.get("department");
                var startDate = this.get("startDate");
                var endDate = this.get("endDate");
                this.send("clearError");
                this.set("isExportAbort", false);
                this.set("isFetchingCountForExport", true);
                this.store.query('export', {
                    project: project ? project.get("id") : null,
                    department: department ? department.get("id") : null,
                    startDate: startDate.format('yyyy-MM-dd hh:mm:ss'),
                    endDate: endDate.format('yyyy-MM-dd hh:mm:ss')
                }).then(function (answer) {
                    var reExport = answer.toArray().get("firstObject");
                    var total = reExport.get("total");
                    _this3.set("totalLength", total);
                    _this3.set("isFetchingCountForExport", false);
                    _this3.set("isConfirmingExport", true);
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "导出数据时出错，未扑捉到的异常";
                    }
                    var recordErrors = _this3.get("errors");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this3.set("isFetchingCountForExport", false);
                });
            },
            cancelExport: function cancelExport() {
                this.beginPropertyChanges();
                this.set("isFetchingCountForExport", false);
                this.set("isConfirmingExport", false);
                this.set("isExporting", false);
                this.set("totalLength", 0);
                this.set("downloadedLength", 0);
                this.set("downloadedPercent", 0);
                this.set("lastIdForExport", 0);
                this.set("isExportAbort", true);
                this.endPropertyChanges();
                this.send("clearError");
            },
            'export': function _export(option) {
                var _this4 = this;

                if (this.get("isExportAbort")) {
                    this.beginPropertyChanges();
                    this.set("isExporting", false);
                    this.set("isConfirmingExport", false);
                    this.endPropertyChanges();
                    return;
                }
                var pageCount = this.get("pageCountForExport");
                var project = this.get("project");
                var department = this.get("department");
                var startDate = this.get("startDate");
                var endDate = this.get("endDate");
                if (option && option.isFromSpinButton) {
                    //点击按钮第一次导出（导出第一页）
                    var fileName = 'export-bills-' + (project ? project.get("name") : "none") + '-' + (department ? department.get("name") : "none") + '-[' + startDate.format('yyyy-MM-dd') + '=' + endDate.format('yyyy-MM-dd') + ']-';
                    fileName += this.get("sessionController.userId");
                    fileName += Math.random(new Date()).toString().split(".")[1];
                    this.beginPropertyChanges();
                    this.set("fileNameForExport", fileName);
                    this.set("lastIdForExport", 0);
                    this.set("fileUrlForExport", 'server/download/' + fileName + '.csv');
                    this.set("downloadedLength", 0);
                    this.set("downloadedPercent", 0);
                    this.endPropertyChanges();
                }
                var lastIdForExport = this.get("lastIdForExport");
                var fileNameForExport = this.get("fileNameForExport");
                this.send("clearError");
                this.set("isExporting", true);
                this.store.query('export', {
                    count: pageCount,
                    project: project ? project.get("id") : null,
                    department: department ? department.get("id") : null,
                    startDate: startDate.format('yyyy-MM-dd hh:mm:ss'),
                    endDate: endDate.format('yyyy-MM-dd hh:mm:ss'),
                    lastId: lastIdForExport,
                    name: fileNameForExport
                }).then(function (answer) {
                    var reExport = answer.toArray().get("firstObject");
                    var length = reExport.get("length");
                    var lastId = reExport.get("last_id");
                    var totalLength = _this4.get("totalLength");
                    var newDownloadedLength = _this4.get("downloadedLength") + length;
                    _this4.beginPropertyChanges();
                    _this4.set("lastIdForExport", lastId);
                    _this4.set("downloadedLength", newDownloadedLength);
                    _this4.set("downloadedPercent", newDownloadedLength * 100 / totalLength);
                    _this4.endPropertyChanges();
                    if (length < pageCount) {
                        _this4.beginPropertyChanges();
                        _this4.set("isExporting", false);
                        _this4.set("isConfirmingExport", false);
                        _this4.endPropertyChanges();
                        var _fileNameForExport = _this4.get("fileNameForExport") + ".csv";
                        var namespace = _this4.container.lookup("adapter:application").get("namespace");
                        window.$('<a href = "/' + namespace + '/downloads?name=' + _fileNameForExport + '" class = \'hidden\'><span>testlink</span></a>').appendTo("body").find("span").trigger("click").end().remove();

                        // let fileUrlForExport = this.get("fileUrlForExport");
                        // window.$(`<a href = ${fileUrlForExport} class = 'hidden'><span>testlink</span></a>`).appendTo("body").find("span").trigger("click").end().remove();
                    } else {
                            _ember['default'].run.later(function () {
                                _this4.send("export");
                            }, 2000);
                        }
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "导出数据时出错，未扑捉到的异常";
                    }
                    var recordErrors = _this4.get("errors");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this4.set("isExporting", false);
                });
            }
        }
    });
});
define('htis/controllers/history/reports', ['exports', 'ember', 'ember-data', 'htis/mixins/standard-list/controller'], function (exports, _ember, _emberData, _htisMixinsStandardListController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], {
        applicationController: _ember['default'].inject.controller('application'),
        modelName: "report",
        routeName: "history.reports",
        modelTitle: "加油单报表",
        parentController: _ember['default'].inject.controller('history'),
        parentRouteName: "history",
        pannelTitle: "加油单报表",
        allArrangedResult: null,
        arrangedResult: null,
        filteredResult: null,
        filterOption: null,
        errors: _emberData['default'].Errors.create(),
        isExporting: false,
        filterText: _ember['default'].computed("filterOption", function () {
            var filterOption = this.get("filterOption");
            if (filterOption) {
                var projectText = filterOption.get("project.name");
                var departmentText = filterOption.get("department.name");
                var results = [];
                if (projectText) {
                    results.push('项目为[' + projectText + ']');
                }
                if (departmentText) {
                    results.push('部门为[' + departmentText + ']');
                }
                results.push('时间范围为[' + filterOption.get("startDate").format('yyyy-MM-dd') + '➡' + filterOption.get("endDate").format('yyyy-MM-dd') + ']');
                return results.join(",");
            } else {
                return "";
            }
        }),
        isFiltered: _ember['default'].computed("filterOption", function () {
            return this.get("filterOption") !== null;
        }),
        allProjects: _ember['default'].computed(function () {
            return this.store.peekAll("project");
        }),
        allDepartments: _ember['default'].computed(function () {
            return this.store.peekAll("department");
        }),
        allOils: _ember['default'].computed(function () {
            return this.store.peekAll("oil");
        }),
        projects: _ember['default'].computed("model.length", "allProjects.length", function () {
            var model = this.get("model");
            var allProjects = this.get("allProjects");
            var projects = allProjects.filter(function (project) {
                return model.filterBy("project.id", project.get("id")).length;
            });
            return projects;
        }),
        departments: _ember['default'].computed("model.length", "allDepartments.length", function () {
            var model = this.get("model");
            var allDepartments = this.get("allDepartments");
            var departments = allDepartments.filter(function (department) {
                return model.filterBy("department.id", department.get("id")).length;
            });
            return departments;
        }),
        oils: _ember['default'].computed("model.length", "allOils.length", function () {
            var model = this.get("model");
            var allOils = this.get("allOils");
            var oils = allOils.filter(function (oil) {
                return model.filterBy("oil.id", oil.get("id")).length;
            });
            return oils;
        }),
        actions: {
            filter: function filter() {
                this.send("goFilter");
            },
            clearReports: function clearReports() {
                this.store.unloadAll("report");
            },
            'export': function _export() {
                var table2excel = window.$(".table2excel").clone();
                table2excel.find("td").css("text-align", "center");
                var fileName = this.get("applicationController.appTitle") + "-" + this.get("pannelTitle") + "-" + this.get("filterText");
                table2excel.table2excel({
                    fileName: fileName,
                    fileExt: ".xls"
                });
                table2excel = null;
            }
        }
    });
});
define('htis/controllers/history/reports/filter', ['exports', 'ember', 'ember-data', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _emberData, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        routeName: "history.reports.filter",
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        parentController: _ember['default'].inject.controller('history.reports'),
        pannelTitle: "搜索条件设置",
        isSearching: false,
        isUnSavable: false,
        project: null,
        department: null,
        startDate: null,
        endDate: null,
        errors: _emberData['default'].Errors.create(),
        isTimeResetNeeded: false,
        nameSorting: ['name:asc'],
        arrangedProjects: _ember['default'].computed.sort('all_projects', 'nameSorting'),
        all_projects: _ember['default'].computed(function () {
            return this.store.peekAll("project");
        }),
        arrangedDepartments: _ember['default'].computed.sort('all_departments', 'nameSorting'),
        all_departments: _ember['default'].computed(function () {
            return this.store.peekAll("department");
        }),
        actions: {
            setProject: function setProject(project) {
                this.set("project", project);
                this.set("isPickUpPopActive", false);
            },
            setDepartment: function setDepartment(department) {
                this.set("department", department);
                this.set("isPickUpPopActive", false);
            },
            syncOption: function syncOption(filterOption) {
                var _this = this;

                if (filterOption) {
                    _ember['default'].run.next(function () {
                        _this.set("project", filterOption.get("project"));
                        _this.set("department", filterOption.get("department"));
                        var startDate = filterOption.get("startDate");
                        if (startDate) {
                            _this.set("startDate", startDate);
                        }
                        var endDate = filterOption.get("endDate");
                        if (endDate) {
                            _this.set("endDate", endDate);
                        }
                    });
                } else {
                    this.set("project", null);
                    this.set("department", null);
                    var now = new Date();
                    var startDate = window.HOJS.lib.parseDate(now.format('yyyy-MM-dd 00:00:00'));
                    this.set("startDate", startDate);
                    var endDate = window.HOJS.lib.parseDate(now.format('yyyy-MM-dd 23:59:59'));
                    this.set("endDate", endDate);
                }
            },
            search: function search() {
                var _this2 = this;

                var parentController = this.get("parentController");
                var project = this.get("project");
                var department = this.get("department");
                var startDate = this.get("startDate");
                var endDate = this.get("endDate");
                parentController.send("clearReports");
                var filterOption = _ember['default'].Object.create({
                    project: project,
                    department: department,
                    startDate: startDate,
                    endDate: endDate
                });
                parentController.set("filterOption", filterOption);
                this.get("errors").remove('server_side_error');
                this.set("isSearching", true);
                this.store.query('report', {
                    project: project ? project.get("id") : null,
                    department: department ? department.get("id") : null,
                    startDate: startDate.format('yyyy-MM-dd hh:mm:ss'),
                    endDate: endDate.format('yyyy-MM-dd hh:mm:ss')
                }).then(function () {
                    _this2.set("isSearching", false);
                    _this2.send("goBack");
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "该资源不存在或网络繁忙，请稍候再试";
                    }
                    var recordErrors = _this2.get("errors");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this2.set("isSearching", false);
                });
            },
            reset: function reset() {
                var parentController = this.get("parentController");
                parentController.send("clearReports");
                parentController.set("filterOption", null);
                this.send("syncOption", null);
                this.toggleProperty("isTimeResetNeeded", true); //通知时间控件重置界面值
            }
        }
    });
});
define('htis/controllers/login', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        routeName: "login.index",
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        passwordDidChange: (function () {
            if (this.get("model.log_password.length")) {
                this.get("model.errors").remove('server_side_error');
            }
        }).observes("model.log_password"),
        actions: {
            go: function go() {
                var _this = this;

                window.$("audio")[0].play(); //因手机上不可以自动播放音乐，所以这里要手动触发一次，以后才会自动播放
                this.get("model").save().then(function (result) {
                    _ember['default'].debug('login success with the user: ' + JSON.stringify(result));
                    if (result.get("is_passed")) {
                        _ember['default'].$("#login").hide(); //因为显示加载中的时候登录界面没有立刻消失，所以这里强行移除界面
                        _this.get("sessionController").send("login", result, true);
                    }
                }, function (reason) {
                    _ember['default'].debug('login fail and throw: ' + reason);
                    _this.set("log_password", "");
                });
            }
        }
    });
});
define('htis/controllers/manage', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        routeName: "manage.index",
        equipment: _ember['default'].inject.service('equipment'),
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        messagesController: _ember['default'].inject.controller('messages'),
        pannelTitle: "加油管理",
        isActive: false,
        isBack: false,
        selection: null,
        isHide: false,
        isPowered: _ember['default'].computed("sessionController.isManagePowered", function () {
            return this.get("sessionController.isManagePowered");
        }),
        // runLaterForHide:null,
        // isBackDidChange:Ember.observer("isBack",function(){
        //     //退出后要把div隐藏来减少内存消耗
        //     if(this.get("isBack")){
        //         if(Ember.$.support.transition){
        //             Ember.run.cancel(this.runLaterForHide);
        //             this.runLaterForHide = Ember.run.later(()=>{
        //                 if(this.get("isBack")){
        //                     this.set("isHide",true);
        //                 }
        //             },3000);
        //         }
        //         else{
        //             this.set("isHide",true);
        //         }
        //     }
        // }),
        equipmentIsXsDidChange: _ember['default'].observer("equipment.isXs", function () {
            //当浏览器大小变化造成从手机模式变成非手机模式时需要保证列表中至少有一个选中
            if (this.get("isActive") && this.get("equipment.isNotXs") && this.get("selection") === null) {
                this.send("goPendings");
            }
        }),
        isSearchs: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'searchs';
        }),
        isPendings: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'pendings';
        }),
        isUnuseds: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'unuseds';
        }),
        isReleases: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'releases';
        }),
        isDisables: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'disables';
        }),
        isArchives: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'archives';
        }),
        createRecord: function createRecord() {
            var currentUser = this.get("sessionController.user");
            var car = this.store.createRecord("car", {
                number: 'New-Number',
                vin: '',
                description: '',
                creater: currentUser,
                created_date: new Date(),
                modifier: currentUser,
                modified_date: new Date()
            });
            return car;
        },
        actions: {}
    });
});
define('htis/controllers/manage/archives', ['exports', 'ember', 'htis/mixins/standard-list/controller', 'htis/mixins/manage-cars/controller', 'htis/mixins/archive-cars/controller'], function (exports, _ember, _htisMixinsStandardListController, _htisMixinsManageCarsController, _htisMixinsArchiveCarsController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], _htisMixinsManageCarsController['default'], _htisMixinsArchiveCarsController['default'], {
        modelName: "archive",
        routeName: "manage.archives",
        parentController: _ember['default'].inject.controller('manage'),
        parentRouteName: "manage",
        pannelTitle: _ember['default'].computed(function () {
            return "已闲置";
        }),
        allArrangedResult: _ember['default'].computed.sort('pickedResult', 'modifiedDateSortingDesc'),
        pickedResult: _ember['default'].computed("filteredResult.@each.is_archived", "isFiltered", function () {
            var isFiltered = this.get("isFiltered");
            var results = this.get("filteredResult").filterBy("is_archived", true);
            if (isFiltered) {
                return results.filterBy("isOwn", true);
            } else {
                return results;
            }
        })
    });
});
define('htis/controllers/manage/archives/archive', ['exports', 'ember', 'htis/mixins/standard-detail/controller', 'htis/mixins/instance-list/controller', 'htis/mixins/instance-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController, _htisMixinsInstanceListController, _htisMixinsInstanceDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], _htisMixinsInstanceListController['default'], _htisMixinsInstanceDetailController['default'], {
        routeName: "manage.archives.archive",
        modelTitle: "车辆",
        parentController: _ember['default'].inject.controller('manage.archives'),
        parentRouteName: "manage.archives",
        isBaseFolded: true,
        isInstancesFolded: false,
        actions: {}
    });
});
define('htis/controllers/manage/archives/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        equipment: _ember['default'].inject.service('equipment')
    });
});
define('htis/controllers/manage/cars', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('htis/controllers/manage/cars/car', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('htis/controllers/manage/disables', ['exports', 'ember', 'htis/mixins/standard-list/controller', 'htis/mixins/manage-cars/controller'], function (exports, _ember, _htisMixinsStandardListController, _htisMixinsManageCarsController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], _htisMixinsManageCarsController['default'], {
        modelName: "disable",
        routeName: "manage.disables",
        parentController: _ember['default'].inject.controller('manage'),
        parentRouteName: "manage",
        pannelTitle: _ember['default'].computed(function () {
            return "已暂停";
        }),
        allArrangedResult: _ember['default'].computed.sort('pickedResult', 'modifiedDateSortingDesc'),
        pickedResult: _ember['default'].computed("filteredResult.@each.isDisable", "isFiltered", function () {
            var isFiltered = this.get("isFiltered");
            var results = this.get("filteredResult").filterBy("isDisable", true);
            if (isFiltered) {
                return results.filterBy("isOwn", true);
            } else {
                return results;
            }
        })
    });
});
define('htis/controllers/manage/disables/disable', ['exports', 'ember', 'htis/mixins/standard-detail/controller', 'htis/mixins/instance-list/controller', 'htis/mixins/instance-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController, _htisMixinsInstanceListController, _htisMixinsInstanceDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], _htisMixinsInstanceListController['default'], _htisMixinsInstanceDetailController['default'], {
        routeName: "manage.disables.disable",
        modelTitle: "车辆",
        parentController: _ember['default'].inject.controller('manage.disables'),
        parentRouteName: "manage.disables",
        isBaseFolded: true,
        isInstancesFolded: false,
        isDisableDidChange: _ember['default'].observer("model.isDisable", function () {
            var _this = this;

            //当记录被不再为待处理状态时，返回上一个界面，这里的状态变化包括当前用户操作结果及从服务器中push过来的状态变化
            //这里一定要加run.next，因为不加的话，新建instance会先触发isDisable属性的判断，从而无法正确把新的instance加载到car中
            _ember['default'].run.next(function () {
                var isDisable = _this.get("model.isDisable");
                if (!isDisable) {
                    var currentRouteName = _this.get("applicationController.currentRouteName");
                    if (currentRouteName === _this.routeName + '.index' || currentRouteName === _this.routeName + '.edit.index') {
                        _this.send("goBack");
                    }
                }
            });
        }),
        actions: {}
    });
});
define('htis/controllers/manage/disables/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        equipment: _ember['default'].inject.service('equipment')
    });
});
define('htis/controllers/manage/pendings', ['exports', 'ember', 'htis/mixins/standard-list/controller', 'htis/mixins/manage-cars/controller'], function (exports, _ember, _htisMixinsStandardListController, _htisMixinsManageCarsController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], _htisMixinsManageCarsController['default'], {
        modelName: "pending",
        routeName: "manage.pendings",
        parentController: _ember['default'].inject.controller('manage'),
        parentRouteName: "manage",
        pannelTitle: _ember['default'].computed(function () {
            return "待审核";
        }),
        allArrangedResult: _ember['default'].computed.sort('pickedResult', 'modifiedDateSortingDesc'),
        pickedResult: _ember['default'].computed("filteredResult.@each.isPending", "isFiltered", function () {
            var isFiltered = this.get("isFiltered");
            var results = this.get("filteredResult").filterBy("isPending", true);
            if (isFiltered) {
                return results.filterBy("isOwn", true);
            } else {
                return results;
            }
        })
    });
});
define('htis/controllers/manage/pendings/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        equipment: _ember['default'].inject.service('equipment')
    });
});
define('htis/controllers/manage/pendings/pending', ['exports', 'ember', 'htis/mixins/standard-detail/controller', 'htis/mixins/instance-list/controller', 'htis/mixins/instance-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController, _htisMixinsInstanceListController, _htisMixinsInstanceDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], _htisMixinsInstanceListController['default'], _htisMixinsInstanceDetailController['default'], {
        routeName: "manage.pendings.pending",
        modelTitle: "车辆",
        parentController: _ember['default'].inject.controller('manage.pendings'),
        parentRouteName: "manage.pendings",
        isBaseFolded: true,
        isInstancesFolded: false,
        isPendingDidChange: _ember['default'].observer("model.isPending", function () {
            var _this = this;

            //当记录被不再为待处理状态时，返回上一个界面，这里的状态变化包括当前用户操作结果及从服务器中push过来的状态变化
            //这里一定要加run.next，因为不加的话，新建instance会先触发isPending属性的判断，从而无法正确把新的instance加载到car中
            _ember['default'].run.next(function () {
                var isPending = _this.get("model.isPending");
                if (!isPending) {
                    var currentRouteName = _this.get("applicationController.currentRouteName");
                    if (currentRouteName === _this.routeName + '.index' || currentRouteName === _this.routeName + '.edit.index') {
                        _this.send("goBack");
                    }
                }
            });
        }),
        actions: {}
    });
});
define('htis/controllers/manage/releases', ['exports', 'ember', 'htis/mixins/standard-list/controller', 'htis/mixins/manage-cars/controller'], function (exports, _ember, _htisMixinsStandardListController, _htisMixinsManageCarsController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], _htisMixinsManageCarsController['default'], {
        modelName: "release",
        routeName: "manage.releases",
        parentController: _ember['default'].inject.controller('manage'),
        parentRouteName: "manage",
        pannelTitle: _ember['default'].computed(function () {
            return "可加油";
        }),
        allArrangedResult: _ember['default'].computed.sort('pickedResult', 'modifiedDateSortingDesc'),
        pickedResult: _ember['default'].computed("filteredResult.@each.isReleased", "isFiltered", function () {
            var isFiltered = this.get("isFiltered");
            var results = this.get("filteredResult").filterBy("isReleased", true);
            if (isFiltered) {
                return results.filterBy("isOwn", true);
            } else {
                return results;
            }
        })
    });
});
define('htis/controllers/manage/releases/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        equipment: _ember['default'].inject.service('equipment')
    });
});
define('htis/controllers/manage/releases/release', ['exports', 'ember', 'htis/mixins/standard-detail/controller', 'htis/mixins/instance-list/controller', 'htis/mixins/instance-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController, _htisMixinsInstanceListController, _htisMixinsInstanceDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], _htisMixinsInstanceListController['default'], _htisMixinsInstanceDetailController['default'], {
        routeName: "manage.releases.release",
        modelTitle: "车辆",
        parentController: _ember['default'].inject.controller('manage.releases'),
        parentRouteName: "manage.releases",
        isBaseFolded: true,
        isInstancesFolded: false,
        isReleasedDidChange: _ember['default'].observer("model.isReleased", function () {
            var _this = this;

            //当记录被不再为待处理状态时，返回上一个界面，这里的状态变化包括当前用户操作结果及从服务器中push过来的状态变化
            //这里一定要加run.next，因为不加的话，新建instance会先触发isReleased属性的判断，从而无法正确把新的instance加载到car中
            _ember['default'].run.next(function () {
                var isReleased = _this.get("model.isReleased");
                if (!isReleased) {
                    var currentRouteName = _this.get("applicationController.currentRouteName");
                    if (currentRouteName === _this.routeName + '.index' || currentRouteName === _this.routeName + '.edit.index') {
                        _this.send("goBack");
                    }
                }
            });
        }),
        actions: {}
    });
});
define('htis/controllers/manage/searchs', ['exports', 'ember', 'htis/mixins/standard-list/controller', 'htis/mixins/manage-cars/controller', 'htis/mixins/archive-cars/controller'], function (exports, _ember, _htisMixinsStandardListController, _htisMixinsManageCarsController, _htisMixinsArchiveCarsController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], _htisMixinsManageCarsController['default'], _htisMixinsArchiveCarsController['default'], {
        modelName: "search",
        routeName: "manage.searchs",
        parentController: _ember['default'].inject.controller('manage'),
        parentRouteName: "manage",
        isEmptyKeyFetchable: false,
        pannelTitle: _ember['default'].computed(function () {
            return "搜索";
        }),
        allArrangedResult: _ember['default'].computed.sort('pickedResult', 'modifiedDateSortingDesc'),
        pickedResult: _ember['default'].computed("filteredResult", "searchKey", "isFiltered", function () {
            var isFiltered = this.get("isFiltered");
            var searchKey = this.get("searchKey");
            if (!searchKey) {
                return [];
            }
            var results = this.get("filteredResult");
            if (isFiltered) {
                return results.filterBy("isOwn", true);
            } else {
                return results;
            }
        })
    });
});
define('htis/controllers/manage/searchs/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        equipment: _ember['default'].inject.service('equipment')
    });
});
define('htis/controllers/manage/searchs/search', ['exports', 'ember', 'htis/mixins/standard-detail/controller', 'htis/mixins/instance-list/controller', 'htis/mixins/instance-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController, _htisMixinsInstanceListController, _htisMixinsInstanceDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], _htisMixinsInstanceListController['default'], _htisMixinsInstanceDetailController['default'], {
        routeName: "manage.searchs.search",
        modelTitle: "车辆",
        parentController: _ember['default'].inject.controller('manage.searchs'),
        parentRouteName: "manage.searchs",
        isBaseFolded: true,
        isInstancesFolded: false,
        actions: {}
    });
});
define('htis/controllers/manage/unuseds', ['exports', 'ember', 'htis/mixins/standard-list/controller', 'htis/mixins/manage-cars/controller'], function (exports, _ember, _htisMixinsStandardListController, _htisMixinsManageCarsController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], _htisMixinsManageCarsController['default'], {
        modelName: "unused",
        routeName: "manage.unuseds",
        parentController: _ember['default'].inject.controller('manage'),
        parentRouteName: "manage",
        pannelTitle: _ember['default'].computed(function () {
            return "待处理";
        }),
        allArrangedResult: _ember['default'].computed.sort('pickedResult', 'modifiedDateSortingDesc'),
        pickedResult: _ember['default'].computed("filteredResult.@each.isUnused", "isFiltered", function () {
            var isFiltered = this.get("isFiltered");
            var results = this.get("filteredResult").filterBy("isUnused", true);
            if (isFiltered) {
                return results.filterBy("isOwn", true);
            } else {
                return results;
            }
        })
    });
});
define('htis/controllers/manage/unuseds/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        equipment: _ember['default'].inject.service('equipment')
    });
});
define('htis/controllers/manage/unuseds/unused', ['exports', 'ember', 'htis/mixins/standard-detail/controller', 'htis/mixins/instance-list/controller', 'htis/mixins/instance-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController, _htisMixinsInstanceListController, _htisMixinsInstanceDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], _htisMixinsInstanceListController['default'], _htisMixinsInstanceDetailController['default'], {
        routeName: "manage.unuseds.unused",
        modelTitle: "车辆",
        parentController: _ember['default'].inject.controller('manage.unuseds'),
        parentRouteName: "manage.unuseds",
        isBaseFolded: true,
        isInstancesFolded: false,
        isUnusedDidChange: _ember['default'].observer("model.isUnused", function () {
            var _this = this;

            //当记录被不再为待处理状态时，返回上一个界面，这里的状态变化包括当前用户操作结果及从服务器中push过来的状态变化
            //这里一定要加run.next，因为不加的话，新建instance会先触发isUnused属性的判断，从而无法正确把新的instance加载到car中
            _ember['default'].run.next(function () {
                var isUnused = _this.get("model.isUnused");
                if (!isUnused) {
                    var currentRouteName = _this.get("applicationController.currentRouteName");
                    if (currentRouteName === _this.routeName + '.index' || currentRouteName === _this.routeName + '.edit.index') {
                        _this.send("goBack");
                    }
                }
            });
        }),
        actions: {}
    });
});
define('htis/controllers/messages', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        model: _ember['default'].computed(function () {
            return this.store.peekAll("message");
        }),
        createdDateSorting: ['created_date:asc'],
        createdDateSortingDesc: ['created_date:desc'],
        isToShowAll: false,
        topCount: 10,
        pageCount: 10,
        allArrangedResult: _ember['default'].computed.sort('model', 'createdDateSortingDesc'),
        arrangedResult: _ember['default'].computed("allArrangedResult.length", "isToShowAll", function () {
            var _this = this;

            var allArrangedResult = this.get("allArrangedResult"),
                isToShowAll = this.get("isToShowAll");
            if (isToShowAll) {
                return allArrangedResult;
            } else {
                var _ret = (function () {
                    var topCount = _this.get("topCount");
                    return {
                        v: allArrangedResult.filter(function (item, index) {
                            return index < topCount;
                        })
                    };
                })();

                if (typeof _ret === 'object') return _ret.v;
            }
        }),
        isTopButtonNeeded: _ember['default'].computed("isToShowAll", "allArrangedResult.length", function () {
            //只要列表个数超过topCount则需要切换按钮
            return this.get("allArrangedResult.length") > this.get("topCount");
        })
    });
});
define('htis/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('htis/controllers/online', ['exports', 'ember'], function (exports, _ember) {
   exports['default'] = _ember['default'].Controller.extend({
      applicationController: _ember['default'].inject.controller('application'),
      sessionController: _ember['default'].inject.controller('session'),
      routeName: "online",
      pannelTitle: "打印同步",
      createdDateSorting: ['created_date:asc', 'id'],
      modifiedDateSortingDesc: ['modified_date:desc'],
      arrangedResult: _ember['default'].computed.sort('model', 'modifiedDateSortingDesc')
   });
});
define('htis/controllers/scanning', ['exports', 'ember', 'ember-data', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _emberData, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        modelName: "scanning",
        routeName: "scanning",
        modelTitle: "扫码",
        pannelTitle: "扫码加油",
        vinCode: "",
        isChecking: false,
        isConfirming: false,
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        fillingController: _ember['default'].inject.controller('scanning.filling'),
        isPowered: _ember['default'].computed("sessionController.isBillScannerPowered", function () {
            return this.get("sessionController.isBillScannerPowered");
        }),
        car: _ember['default'].computed("vinCode", function () {
            var vinCode = this.get("vinCode").trim();
            this.set("isChecking", true);
            if (vinCode) {
                return this.store.peekAll("car").findBy("vin", vinCode);
            } else {
                return null;
            }
        }),
        instances: _ember['default'].computed("car", function () {
            var _this = this;

            var car = this.get("car");
            if (car) {
                var _ret = (function () {
                    var instances = car.get("instances");
                    var syncToken = _this.get("applicationController.syncToken");
                    return {
                        v: instances.filter(function (instance) {
                            if (instance.get("is_released") && !instance.get("is_archived") && instance.get("is_enable") && !instance.get("isFinished")) {
                                // if(instance.get("end_date").getTime() - syncToken.getTime() < 0 || instance.get("start_date").getTime() - syncToken.getTime() > 0){
                                if (syncToken.getTime() > instance.get("end_date").getTime()) {
                                    //过期不能加油
                                    return false;
                                } else if (syncToken.getTime() < instance.get("start_date").getTime()) {
                                    //没到时间不能加油
                                    return false;
                                } else {
                                    return true;
                                }
                            } else {
                                return false;
                            }
                        })
                    };
                })();

                if (typeof _ret === 'object') return _ret.v;
            } else {
                return [];
            }
        }),
        instance: null,
        instancesDidChange: _ember['default'].observer("instances", "vinCode", function () {
            var instances = this.get("instances");
            if (instances.get("length") === 1) {
                this.set("instance", instances.objectAt(0));
            } else {
                this.set("instance", null);
                if (instances.get("length") > 1) {
                    this.set("isConfirming", true);
                }
            }
            this.set("isChecking", false);
        }),
        instanceDidChange: _ember['default'].observer("instance", function () {
            var _this2 = this;

            var instance = this.get("instance");
            if (instance) {
                this.get("fillingController").set("oils", instance.get("oils"));
                //加run.next的目的是提高性能，防止在低性能手机上显示不出oils
                _ember['default'].run.next(function () {
                    //this.get("vinCode")加这个原因是手机上卡的话，会报goFilling不存在错误
                    if (_this2.get("vinCode")) {
                        _this2.send("goFilling");
                    }
                });
            }
        }),
        errors: _ember['default'].computed("vinCode", "car", "instances.length", "instance", function () {
            var errors = _emberData['default'].Errors.create();
            if (this.get("vinCode.length") === 0) {
                return errors;
            }
            if (this.get("car")) {
                if (this.get("instances.length") === 0 || !this.get("instance")) {
                    errors.add("check_errors", "该车辆没有权限加油");
                }
            } else {
                errors.add("check_errors", "车辆不存在");
            }
            return errors;
        }),
        actions: {
            clearError: function clearError() {
                this.set("vinCode", "");
                this.get("errors").clear();
            },
            tryGoNext: function tryGoNext() {
                this.notifyPropertyChange("vinCode");
            },
            cancelConfirming: function cancelConfirming() {
                this.set("vinCode", "");
                this.set("isConfirming", false);
            },
            selInstance: function selInstance(instance) {
                this.set("instance", instance);
            }
        }
    });
});
define('htis/controllers/scanning/filling', ['exports', 'ember', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        modelName: "bill",
        routeName: "scanning.filling",
        modelTitle: "加油单",
        sessionController: _ember['default'].inject.controller('session'),
        changesetController: _ember['default'].inject.controller('changeset'),
        pannelTitle: _ember['default'].computed("model.car", "isFirstStepEditing", "isSecondStepEditing", "isSigning", "isSubmiting", function () {
            var vin = this.get("model.car.vin");
            if (!vin) {
                return "获取车辆VIN异常";
            }
            vin = vin.substr(-6);
            if (this.get("isFirstStepEditing") || this.get("isSecondStepEditing")) {
                return "新建加油单-" + vin;
            } else if (this.get("isSigning")) {
                return "驾驶员签字-" + vin;
            } else if (this.get("isSubmiting")) {
                return "加油员确认-" + vin;
            } else {
                return "异常标题";
            }
        }),
        isFirstStepEditing: true,
        isSecondStepEditing: true,
        isSubmiting: false,
        // isPrinting:false,
        // isPrintError:false,
        isConfirmingCancel: false,
        isSignNeeded: _ember['default'].computed("model.signature", "sessionController.isSignNeeded", function () {
            if (this.get("sessionController.isSignNeeded")) {
                return !this.get("model.signature.content");
            } else {
                return false;
            }
        }),
        oils: [],
        // oils:Ember.computed("model.instance","model.instance.oils.length",function(){
        //     return this.get("model.instance.oils");
        // }),
        isSigning: false,
        isSavingSign: false,
        signature: null,
        isPickUpPopActive: false,
        isConfirmed: false,
        confirmCancelTransition: null,
        confirmingCancelMsg: "检测到新建加油单，确定要放弃吗？",
        previousDriverName: "",
        // driverNameDidChange:Ember.observer("model.driver_name",function(){
        //     //如果已签字的情况下修改姓名，则需要重新签字
        //     if(this.get("signature") && this.get("previousDriverName").trim() !== this.get("model.driver_name").trim()){
        //         this.send("resetSignature");
        //     }
        // }),
        actions: {
            resetOptions: function resetOptions() {
                this.set("isFirstStepEditing", true);
                this.set("isSecondStepEditing", false);
                this.set("isSubmiting", false);
                this.set("isSavingSign", false);
                // this.set("isPrinting",false);
                // this.set("isPrintError",false);
                this.set("isConfirmingCancel", false);
                this.set("previousDriverName", "");
            },
            showCancelConfirm: function showCancelConfirm(transition) {
                this.set("confirmCancelTransition", transition);
                this.set("isConfirmingCancel", true);
            },
            cancel: function cancel() {
                var confirmCancelTransition = this.get("confirmCancelTransition");
                if (confirmCancelTransition) {
                    confirmCancelTransition.retry();
                } else {
                    this.send("goBack");
                }
            },
            doCancel: function doCancel(isDo) {
                this.set("isPickUpPopActive", false); //该属性会自动同步isConfirmingCancel为False
                // this.set("isConfirmingCancel",false);
                this.set("isConfirmed", isDo);
                if (isDo) {
                    this.send("cancel");
                } else {
                    this.set("confirmCancelTransition", null);
                }
            },
            setOil: function setOil(oil) {
                this.set("model.oil", oil);
            },
            goNext: function goNext() {
                var model = this.get("model");
                model.notifyPropertyChange("mileage");
                // model.notifyPropertyChange("driver_name");
                // if(!model.get("errors").has("mileage") && !model.get("errors").has("driver_name")){
                if (!model.get("errors").has("mileage")) {
                    this.set("isFirstStepEditing", false);
                    this.set("isSecondStepEditing", true);
                }
            },
            confirmToSubmit: function confirmToSubmit() {
                var model = this.get("model");
                model.notifyPropertyChange("volume");
                if (model.get("errors.length") === 0) {
                    model.computeRate();
                    this.set("isSecondStepEditing", false);
                    this.set("isSubmiting", true);
                }
            },
            cancelToPrevious: function cancelToPrevious() {
                this.set("isFirstStepEditing", true);
                this.set("isSecondStepEditing", false);
                //每次返回到上一步前要记录driver_name值，以备比较是否有变化
                // this.set("previousDriverName",this.get("model.driver_name"));
            },
            goSigning: function goSigning() {
                var _this = this;

                if (this.get("isSigning")) {
                    return;
                }
                this.set("isWaitingFocusForSign", true);
                //这里要增加run.next及run.later的原因是手机上如果键盘没有下去会造成不能全屏打开签字板，所以只能延时等待
                _ember['default'].run.next(function () {
                    _this.send("createSignature");
                    _ember['default'].run.later(function () {
                        _this.set("isWaitingFocusForSign", false);
                        _this.set("isSigning", true);
                    }, 2000);
                });
            },
            createSignature: function createSignature() {
                var model = this.get("model");
                var currentUser = this.get("sessionController.user");
                var signature = this.store.createRecord("signature", {
                    name: model.get("driver_name"),
                    creater: currentUser,
                    created_date: new Date()
                });
                this.set("signature", signature);
            },
            resetCanvas: function resetCanvas() {
                this.get("model.errors").remove("signature");
                this.get("signature.errors").clear();
            },
            cancelSigning: function cancelSigning() {
                this.get("signature").rollbackAttributes();
                this.set("signature", null);
                this.get("model.errors").remove("signature");
                this.set("isSigning", false);
            },
            submit: function submit(base64, dataLength) {
                var _this2 = this;

                var model = this.get("model");
                if (dataLength < 10) {
                    model.get("errors").add("signature", "不能为空");
                    return;
                }
                model.get("errors").remove("signature");
                var signature = this.get("signature");
                signature.set("sign", base64);
                this.set("isSavingSign", true);
                signature.save().then(function () {
                    _this2.set("isSavingSign", false);
                    model.set("signature", signature);
                    model.notifyPropertyChange("signature");
                    if (!model.get("errors").has("signature")) {
                        _this2.set("isSigning", false);
                    }
                }, function () {
                    _this2.set("isSavingSign", false);
                });
            },
            cancelSubmit: function cancelSubmit() {
                var model = this.get("model");
                this.send("clearError", model);
                this.send("resetSignature");
                this.set("isSubmiting", false);
                this.set("isSecondStepEditing", true);
            },
            abort: function abort() {
                //中断提交图片请求，当图片提交请求很长很卡时，可以通过这个操作快速中断并提供重新提交机会
                //因为无法找到promise的abort函数及实现真正意义上的中断请求，所以这里只能把signature对象删除并重新生成
                this.get("signature").rollbackAttributes();
                this.set("signature", null);
                this.get("model.errors").remove("signature");
                this.send("createSignature");
                this.set("isSavingSign", false);
            },
            resetSignature: function resetSignature() {
                var model = this.get("model");
                var signature = this.get("signature");
                if (signature) {
                    if (!signature.get("isDeleted")) {
                        signature.deleteRecord();
                        signature.save();
                    }
                    model.set("signature", null);
                    model.notifyPropertyChange("signature");
                    this.set("signature", null);
                }
            },
            save: function save() {
                var _this3 = this;

                var currentUser = this.get("sessionController.user");
                var isBillLosePowered = this.get("sessionController.isBillLosePowered");
                if (isBillLosePowered) {
                    this.set("model.is_lost", true);
                }
                this.set("model.modifier", currentUser);
                this.get("model").save().then(function (answer) {
                    var changesetController = _this3.get("changesetController");
                    changesetController.get("billsForPrint").push(answer.get("id"));
                    _this3.set("isSubmiting", false);
                    _this3.send("goBack");
                }, function () {});
            },
            clearError: function clearError(model) {
                model.get("errors").remove("server_side_error");
            },
            clearErrorForSignature: function clearErrorForSignature() {
                this.get("model.errors").remove("signature");
            }
        }
    });
});
define('htis/controllers/session', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        applicationController: _ember['default'].inject.controller('application'),
        startupController: _ember['default'].inject.controller('startup'),
        changesetController: _ember['default'].inject.controller('changeset'),
        isLogined: false,
        user: null,
        userId: 0,
        userIdDidChange: _ember['default'].observer("userId", function () {
            //切换用户或者第一次登录需要计算所有申请单的通知消息
            this.send("notifyInstancesMessage");
        }),
        previousTransition: null,
        sharedkey: "horizon2003_htis",
        genrateToken: function genrateToken() {
            //生成120秒时长有效token
            var exp = Math.round(new Date().addSeconds(1200).getTime() / 1000);
            var sharedkey = this.get("sharedkey");
            var ck = window.CryptoJS.enc.Latin1.parse(sharedkey).toString();
            var powers = this.get("user.role.powers");
            var powerIds = "";
            if (powers) {
                powerIds = powers.mapBy("id").join(",");
            }
            var sync = this.get("applicationController.serializedSyncToken");
            var userName = this.get("user.name");
            var userId = this.get("userId");
            var info = _ember['default'].Object.create({
                Exp: exp,
                UserId: userId,
                UserName: userName ? userName : "",
                Powers: powerIds,
                Sync: sync ? sync : "2015-01-01 12:12:12"
            });
            return window.KJUR.jws.JWS.sign(null, '{"alg":"HS256","typ":"JWT"}', JSON.stringify(info), ck);
        },
        decodeToken: function decodeToken(token) {
            var body = token.split(".")[1];
            if (body) {
                var b64 = window.b64utos(body);
                return window.KJUR.jws.JWS.readSafeJSONString(b64);
            } else {
                return null;
            }
        },
        checkSession: function checkSession(transition) {
            var isLogined = this.get("isLogined");
            if (!isLogined) {
                this.set("previousTransition", transition);
                transition.send("goLogin");
            }
        },
        isSystemPowered: _ember['default'].computed("user", "user.role", "user.role.powers", "user.isRelationshipsChanged", "user.role.isRelationshipsChanged", function () {
            if (this.get("user.isRelationshipsChanged") || this.get("user.role.isRelationshipsChanged")) {
                //如果在系统设置中修改了当前用户或者当前用户所属角色的relationship，而没有保存
                //则可以造成权限立即变化，从而造成立即离开系统设置界面
                return true;
            }
            var powers = this.get("user.role.powers");
            var powersIds = powers ? powers.mapBy("id") : [];
            return powersIds.contains("1");
        }),
        isCarManagePowered: _ember['default'].computed("user", "user.role", "user.role.powers", function () {
            var powers = this.get("user.role.powers");
            var powersIds = powers ? powers.mapBy("id") : [];
            return powersIds.contains("2");
        }),
        isInstanceCheckPowered: _ember['default'].computed("user", "user.role", "user.role.powers", function () {
            var powers = this.get("user.role.powers");
            var powersIds = powers ? powers.mapBy("id") : [];
            return powersIds.contains("3");
        }),
        isBillScannerPowered: _ember['default'].computed("user", "user.role", "user.role.powers", function () {
            var powers = this.get("user.role.powers");
            var powersIds = powers ? powers.mapBy("id") : [];
            return powersIds.contains("4");
        }),
        isBillLosePowered: _ember['default'].computed("user", "user.role", "user.role.powers", function () {
            var powers = this.get("user.role.powers");
            var powersIds = powers ? powers.mapBy("id") : [];
            return powersIds.contains("5");
        }),
        isManagePowered: _ember['default'].computed("isCarManagePowered", "isInstanceCheckPowered", function () {
            return this.get("isCarManagePowered") || this.get("isInstanceCheckPowered");
        }),
        isSignNeeded: _ember['default'].computed("user", "user.is_sign_needed", function () {
            return this.get("user.is_sign_needed");
        }),
        isEnableChanged: _ember['default'].observer("user.is_enable", "user.hasDirtyAttributes", function () {
            var _this = this;

            if (this.get("user.hasDirtyAttributes")) {
                return;
            }
            var isEnable = this.get("user.is_enable");
            if (!isEnable) {
                _ember['default'].run.next(function () {
                    _this.send("logout", true);
                });
            }
        }),
        isDeletedChanged: _ember['default'].observer("user.isDeleted", function () {
            var _this2 = this;

            _ember['default'].run.next(function () {
                //这里增加run.next是因为如果删除自己的话，没等提交到后台，就登出系统了
                if (_this2.get("user.hasDirtyAttributes")) {
                    return;
                }
                var isDeleted = _this2.get("user.isDeleted");
                if (isDeleted) {
                    _ember['default'].run.next(function () {
                        _this2.send("logout", true);
                    });
                }
            });
        }),
        actions: {
            login: function login(logInfo, isFromLogin) {
                _ember['default'].debug('login with logId ' + logInfo.get("log_id") + ' and isFromLogin = ' + isFromLogin);
                this.set("userId", logInfo.get("log_id"));
                this.set("isLogined", true);
                if (isFromLogin) {
                    this.send("syncUser");
                    this.send("syncLocal", "login", logInfo);
                }
                var previousTransition = this.get("previousTransition");
                var startupController = this.get("startupController");
                if (startupController.get("isStartupLoaded")) {
                    _ember['default'].debug('isStartupLoaded and login');
                    //切换用户需要计算重新所有与isOwn相关的属性
                    this.send("notifyIsOwn");
                    this.get("changesetController").send('tryFetch');
                    if (previousTransition) {
                        this.set("previousTransition", null);
                        previousTransition.retry();
                    } else if (isFromLogin) {
                        this.send("goIndex");
                    }
                } else {
                    this.transitionToRoute("startup");
                }
            },
            logout: function logout(isNeedToLogin) {
                this.set("user", null);
                this.set("userId", 0);
                this.set("isLogined", false);
                this.send("syncLocal", "logout");
                if (isNeedToLogin) {
                    this.send("goLogin");
                }
            },
            syncUser: function syncUser() {
                if (this.get('user')) {
                    return;
                }
                var userId = this.get("userId");
                if (userId) {
                    this.set('user', this.store.peekRecord('user', userId));
                }
            },
            syncLocal: function syncLocal(kind, logInfo) {
                if (!window.sessionStorage) {
                    return;
                }
                if (!logInfo) {
                    logInfo = {};
                }
                switch (kind) {
                    case "login":
                        sessionStorage.setItem("user_id", logInfo.get("log_id"));
                        break;
                    case "logout":
                        sessionStorage.clear();
                        break;
                    case "init":
                        _ember['default'].debug('syncLocal with the kind \'init\'');
                        //同步sessionStorage中的登录信息
                        var userId = sessionStorage.getItem("user_id");
                        var token = sessionStorage.getItem("token");
                        if (userId && token) {
                            var tokenJson = this.decodeToken(token);
                            if (tokenJson.UserId.toString() === userId) {
                                var sync = this.get("applicationController.serializedSyncToken");
                                //登录信息保存48小时
                                if (!sync || window.HOJS.lib.dateDiff("H", tokenJson.Sync, new Date()) < 48) {
                                    logInfo = _ember['default'].Object.create({
                                        log_id: userId
                                    });
                                    this.send("login", logInfo);
                                }
                            }
                        }
                        //如果需要在多个窗口中同步session数据则需要定时检查数据变化
                        // setInterval(function(){
                        //     //判断sessionStorage中的数据与sessionController中数据是否一样，如果不一样则同步
                        // }, 3000);
                        break;
                }
            },
            notifyInstancesMessage: function notifyInstancesMessage() {
                var _this3 = this;

                this.store.unloadAll("message");
                //这里加Ember.run是为了提高性能
                _ember['default'].run.next(function () {
                    _ember['default'].run.later(function () {
                        var isManagePowered = _this3.get("isManagePowered");
                        if (!isManagePowered) {
                            //非车辆管理权限用户没有消息通知
                            return;
                        }
                        //所有没有归档的申请单都要计算通知消息
                        _this3.store.peekAll("instance").filterBy("is_archived", false).forEach(function (instance) {
                            instance.notifyPropertyChange("messageNotifyTag");
                        });
                    }, 3000);
                });
            },
            notifyIsOwn: function notifyIsOwn() {
                var _this4 = this;

                //这里加Ember.run是为了提高性能
                _ember['default'].run.next(function () {
                    var isManagePowered = _this4.get("isManagePowered");
                    if (!isManagePowered) {
                        //非车辆管理权限用户没有必要计算IsOwn属性值
                        return;
                    }
                    _this4.store.peekAll("trace").forEach(function (trace) {
                        trace.notifyPropertyChange("isOwnNotifyTag");
                    });
                    _this4.store.peekAll("instance").forEach(function (instance) {
                        instance.notifyPropertyChange("isOwnNotifyTag");
                    });
                    _this4.store.peekAll("car").forEach(function (car) {
                        car.notifyPropertyChange("isOwnNotifyTag");
                    });
                });
            }
        }
    });
});
define('htis/controllers/setting', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        routeName: "setting.index",
        equipment: _ember['default'].inject.service('equipment'),
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        messagesController: _ember['default'].inject.controller('messages'),
        pannelTitle: "系统设置",
        isActive: false,
        isBack: false,
        selection: null,
        isHide: false,
        isPowered: _ember['default'].computed("sessionController.isSystemPowered", function () {
            return this.get("sessionController.isSystemPowered");
        }),
        // runLaterForHide:null,
        // isBackDidChange:Ember.observer("isBack",function(){
        //     //退出后要把div隐藏来减少内存消耗
        //     if(this.get("isBack")){
        //         if(Ember.$.support.transition){
        //             Ember.run.cancel(this.runLaterForHide);
        //             this.runLaterForHide = Ember.run.later(()=>{
        //                 if(this.get("isBack")){
        //                     this.set("isHide",true);
        //                 }
        //             },3000);
        //         }
        //         else{
        //             this.set("isHide",true);
        //         }
        //     }
        // }),
        equipmentIsXsDidChange: _ember['default'].observer("equipment.isXs", function () {
            //当浏览器大小变化造成从手机模式变成非手机模式时需要保证列表中至少有一个选中
            if (this.get("isActive") && this.get("equipment.isNotXs") && this.get("selection") === null) {
                this.send("goRoles");
            }
        }),
        isRoles: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'roles';
        }),
        isUsers: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'users';
        }),
        isProjects: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'projects';
        }),
        isDepartments: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'departments';
        }),
        isOils: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'oils';
        }),
        isPreference: _ember['default'].computed('selection', function () {
            return this.get('selection') === 'preference';
        }),
        actions: {}
    });
});
define('htis/controllers/setting/departments', ['exports', 'ember', 'htis/mixins/standard-list/controller'], function (exports, _ember, _htisMixinsStandardListController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], {
        modelName: "department",
        routeName: "setting.departments",
        modelTitle: "部门"
    });
});
define('htis/controllers/setting/departments/department', ['exports', 'ember', 'htis/mixins/standard-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], {
        routeName: "setting.departments.department",
        modelTitle: "部门"
    });
});
define('htis/controllers/setting/oils', ['exports', 'ember', 'htis/mixins/standard-list/controller'], function (exports, _ember, _htisMixinsStandardListController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], {
        modelName: "oil",
        routeName: "setting.oils",
        modelTitle: "油品"
    });
});
define('htis/controllers/setting/oils/oil', ['exports', 'ember', 'htis/mixins/standard-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], {
        routeName: "setting.oils.oil",
        modelTitle: "油品"
    });
});
define('htis/controllers/setting/preference', ['exports', 'ember', 'htis/mixins/fit-pane/controller'], function (exports, _ember, _htisMixinsFitPaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsFitPaneController['default'], {
        modelName: "preference",
        routeName: "setting.preference",
        pannelTitle: "偏好设置",
        confirmingCancelMsg: "偏好设置已被修改，确定要放弃修改吗？",
        isEditing: false,
        confirmCancelTransition: null,
        isPicking: false,
        isPickUpPopActive: false,
        isConfirmingCancel: false,
        isConfirmed: false,
        isPickingError: false,
        sessionController: _ember['default'].inject.controller('session'),
        hourTag: "点整",
        hourList: [{
            name: '0',
            value: 0
        }, {
            name: '1',
            value: 1
        }, {
            name: '2',
            value: 2
        }, {
            name: '3',
            value: 3
        }, {
            name: '4',
            value: 4
        }, {
            name: '5',
            value: 5
        }, {
            name: '6',
            value: 6
        }, {
            name: '7',
            value: 7
        }, {
            name: '8',
            value: 8
        }, {
            name: '9',
            value: 9
        }, {
            name: '10',
            value: 10
        }, {
            name: '11',
            value: 11
        }, {
            name: '12',
            value: 12
        }, {
            name: '13',
            value: 13
        }, {
            name: '14',
            value: 14
        }, {
            name: '15',
            value: 15
        }, {
            name: '16',
            value: 16
        }, {
            name: '17',
            value: 17
        }, {
            name: '18',
            value: 18
        }, {
            name: '19',
            value: 19
        }, {
            name: '20',
            value: 20
        }, {
            name: '21',
            value: 21
        }, {
            name: '22',
            value: 22
        }, {
            name: '23',
            value: 23
        }],
        isServerSideErrorDidChange: _ember['default'].observer("model.errors.server_side_error.length", function () {
            if (this.get("model.errors.server_side_error.length")) {
                this.set("isPickingError", true);
            }
        }),
        actions: {
            setShortcutHour: function setShortcutHour(value) {
                this.set("model.shortcut_hour", value);
            },
            save: function save() {
                var _this = this;

                var currentUser = this.get("sessionController.user");
                this.set("model.modifier", currentUser);
                this.get('model').save().then(function () {
                    _this.send("goIndex");
                }, function () {});
            },
            showCancelConfirm: function showCancelConfirm(transition) {
                this.set("confirmCancelTransition", transition);
                this.set("isConfirmingCancel", true);
            },
            cancel: function cancel() {
                var confirmCancelTransition = this.get("confirmCancelTransition");
                if (confirmCancelTransition) {
                    confirmCancelTransition.retry();
                } else {
                    this.send("goIndex");
                }
            },
            doCancel: function doCancel(isDo) {
                this.set("isPickUpPopActive", false); //该属性会自动同步isConfirmingCancel为False
                // this.set("isConfirmingCancel",false);
                this.set("isConfirmed", isDo);
                if (isDo) {
                    this.send("cancel");
                } else {
                    this.set("confirmCancelTransition", null);
                }
            },
            clearPop: function clearPop() {
                this.set("isPickUpPopActive", false);
            },
            clearError: function clearError(model) {
                this.set("isPickUpPopActive", false);
                model.get("errors").remove("server_side_error");
            }
        }
    });
});
define('htis/controllers/setting/projects', ['exports', 'ember', 'htis/mixins/standard-list/controller'], function (exports, _ember, _htisMixinsStandardListController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], {
        modelName: "project",
        routeName: "setting.projects",
        modelTitle: "项目",
        createRecord: function createRecord() {
            var currentUser = this.get("sessionController.user");
            var car = this.store.createRecord(this.modelName, {
                name: '新' + this.modelTitle,
                is_enable: true,
                creater: currentUser,
                created_date: new Date(),
                modifier: currentUser,
                modified_date: new Date()
            });
            return car;
        }
    });
});
define('htis/controllers/setting/projects/project', ['exports', 'ember', 'htis/mixins/standard-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], {
        routeName: "setting.projects.project",
        modelTitle: "项目",
        enableList: [{
            name: '启用',
            value: true
        }, {
            name: '禁用',
            value: false
        }],
        actions: {
            setIsEnable: function setIsEnable(value) {
                this.set("model.is_enable", value);
            }
        }
    });
});
define('htis/controllers/setting/roles', ['exports', 'ember', 'htis/mixins/standard-list/controller'], function (exports, _ember, _htisMixinsStandardListController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], {
        modelName: "role",
        routeName: "setting.roles",
        modelTitle: "角色"
    });
});
define('htis/controllers/setting/roles/role', ['exports', 'ember', 'htis/mixins/standard-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], {
        routeName: "setting.roles.role",
        modelTitle: "角色",
        all_powers: _ember['default'].computed(function () {
            return this.store.peekAll("power");
        }),
        actions: {
            checkPower: function checkPower(_ref) {
                var value = _ref.value;
                var isChecked = _ref.isChecked;

                if (!this.get("isEditing")) {
                    return;
                }
                if (isChecked) {
                    this.get("model.powers").pushObject(value);
                } else {
                    this.get("model.powers").removeObject(value);
                }
                this.get("model").notifyPropertyChange("isRelationshipsChanged");
            },
            'delete': function _delete() {
                var sessionController = this.get("sessionController");
                if (sessionController.get("user.role") === this.get("model")) {
                    this.set("customizedMsg", "当前用户属于该角色，不能删除");
                    this.set("isPickingCustomizedMsg", true);
                } else {
                    this._super();
                }
            }
        }
    });
});
define('htis/controllers/setting/users', ['exports', 'ember', 'htis/mixins/standard-list/controller'], function (exports, _ember, _htisMixinsStandardListController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardListController['default'], {
        modelName: "user",
        routeName: "setting.users",
        modelTitle: "用户",
        searchPlaceholder: "输入名称、手机号、邮箱地址或角色搜索",
        createRecord: function createRecord() {
            var currentUser = this.get("sessionController.user");
            var car = this.store.createRecord(this.modelName, {
                name: '新' + this.modelTitle,
                phone: '',
                email: '',
                signature: '',
                creater: currentUser,
                created_date: new Date(),
                modifier: currentUser,
                modified_date: new Date()
            });
            return car;
        }
    });
});
define('htis/controllers/setting/users/user', ['exports', 'ember', 'htis/mixins/standard-detail/controller'], function (exports, _ember, _htisMixinsStandardDetailController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsStandardDetailController['default'], {
        routeName: "setting.users.user",
        modelTitle: "用户",
        roles: _ember['default'].computed(function () {
            return this.store.peekAll("role");
        }),
        enableList: [{
            name: '启用',
            value: true
        }, {
            name: '禁用',
            value: false
        }],
        isSignNeededList: [{
            name: '需要',
            value: true
        }, {
            name: '不需要',
            value: false
        }],
        actions: {
            setRole: function setRole(role) {
                this.set("model.role", role);
                this.get("model").notifyPropertyChange("isRelationshipsChanged");
                this.set("isPickUpPopActive", false);
            },
            setIsSignNeeded: function setIsSignNeeded(value) {
                this.set("model.is_sign_needed", value);
            },
            setIsEnable: function setIsEnable(value) {
                this.set("model.is_enable", value);
            },
            'delete': function _delete() {
                var sessionController = this.get("sessionController");
                if (sessionController.get("user") === this.get("model")) {
                    this.set("customizedMsg", "您不能删除自己的账户");
                    this.set("isPickingCustomizedMsg", true);
                } else if (this.get("model.id").toString() === "1") {
                    this.set("customizedMsg", "不能删除初始账户");
                    this.set("isPickingCustomizedMsg", true);
                } else {
                    this._super();
                }
            }
        }
    });
});
define("htis/controllers/setting/users/user/resetpwd", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({
        routeName: "setting.users.user.resetpwd",
        pannelTitle: "重置密码",
        isServerSideErrorDidChange: _ember["default"].observer("model.errors.server_side_error.length", function () {
            if (this.get("model.errors.server_side_error.length")) {
                this.set("isPickingError", true);
            }
        }),
        actions: {
            save: function save() {
                var _this = this;

                this.get('model').save().then(function () {
                    _this.send("goIndex");
                }, function () {});
            },
            cancel: function cancel() {
                this.send("goIndex");
            },
            clearPop: function clearPop() {
                this.set("isPickUpPopActive", false);
            },
            clearError: function clearError(model) {
                this.set("isPickUpPopActive", false);
                model.get("errors").remove("server_side_error");
            }
        }
    });
});
define('htis/controllers/shortcut', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _ember['default'].Controller.extend({
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        routeName: "shortcut",
        pannelTitle: "快捷打印",
        isPicking: false,
        isPickUpPopActive: false,
        errorsForReports: _emberData['default'].Errors.create(),
        errorsForBills: _emberData['default'].Errors.create(),
        isSearchingReports: false,
        isSearchingBills: false,
        isExporting: false,
        totalCount: 0,
        startDate: null,
        endDate: null,
        isTimeResetNeeded: false,
        settingOptions: {
            startDate: null,
            endDate: null
        },
        settingDateFormat: _ember['default'].computed("applicationController.shortcutHour", function () {
            return 'yyyy-MM-dd ' + this.get("applicationController.shortcutHour") + ':00:00';
        }),
        settingWarningText: _ember['default'].computed("settingOptions.startDate", "settingOptions.endDate", function () {
            var splitDates = this.getDateFromSetting();
            var startDate = splitDates.startDate;
            var endDate = splitDates.endDate;
            if (startDate && endDate) {
                if (window.HOJS.lib.dateDiff("H", startDate, endDate) > 24) {
                    return "时间范围超过24小时可能造成服务器繁忙甚至卡顿，请尽量把范围设置在24小时内。";
                } else {
                    return "";
                }
            } else {
                return "";
            }
        }),
        filterText: _ember['default'].computed("startDate", "endDate", function () {
            return '时间范围为[' + this.get("startDate").format('yyyy-MM-dd hh:mm:ss') + '➡' + this.get("endDate").format('yyyy-MM-dd hh:mm:ss') + ']';
        }),
        allProjects: _ember['default'].computed(function () {
            return this.store.peekAll("project");
        }),
        allDepartments: _ember['default'].computed(function () {
            return this.store.peekAll("department");
        }),
        allOils: _ember['default'].computed(function () {
            return this.store.peekAll("oil");
        }),
        projects: _ember['default'].computed("reports.length", "allProjects.length", function () {
            var reports = this.get("reports");
            var allProjects = this.get("allProjects");
            var projects = allProjects.filter(function (project) {
                return reports.filterBy("project.id", project.get("id")).length;
            });
            return projects;
        }),
        departments: _ember['default'].computed("reports.length", "allDepartments.length", function () {
            var reports = this.get("reports");
            var allDepartments = this.get("allDepartments");
            var departments = allDepartments.filter(function (department) {
                return reports.filterBy("department.id", department.get("id")).length;
            });
            return departments;
        }),
        oils: _ember['default'].computed("reports.length", "allOils.length", function () {
            var reports = this.get("reports");
            var allOils = this.get("allOils");
            var oils = allOils.filter(function (oil) {
                return reports.filterBy("oil.id", oil.get("id")).length;
            });
            return oils;
        }),
        reports: _ember['default'].computed(function () {
            return this.store.peekAll("report");
        }),
        bills: _ember['default'].computed(function () {
            return this.store.peekAll("bill");
        }),
        getDateBySplitHour: function getDateBySplitHour() {
            var reDate = {};
            var splitHour = this.get("applicationController.shortcutHour");
            var now = new Date();
            var splitDate = window.HOJS.lib.parseDate(now.format('yyyy-MM-dd ' + splitHour + ':00:00'));
            var splitNowDate = window.HOJS.lib.parseDate(splitDate.format('yyyy-MM-dd hh:mm:ss'));
            var split24HourAgo = window.HOJS.lib.parseDate(splitDate.addHours(-24).format('yyyy-MM-dd hh:mm:ss'));
            var split48HourAgo = window.HOJS.lib.parseDate(splitDate.addHours(-24).format('yyyy-MM-dd hh:mm:ss'));
            if (now.getTime() > splitDate.getTime()) {
                reDate.startDate = split24HourAgo;
                reDate.endDate = splitNowDate;
            } else {
                reDate.startDate = split48HourAgo;
                reDate.endDate = split24HourAgo;
            }
            return reDate;
        },
        getDateFromSetting: function getDateFromSetting() {
            var reDate = {};
            var splitHour = this.get("applicationController.shortcutHour");
            reDate.startDate = window.HOJS.lib.parseDate(this.get("settingOptions.startDate").format('yyyy-MM-dd ' + splitHour + ':00:00'));
            reDate.endDate = window.HOJS.lib.parseDate(this.get("settingOptions.endDate").format('yyyy-MM-dd ' + splitHour + ':00:00'));
            return reDate;
        },
        actions: {
            clearReportsAndBills: function clearReportsAndBills() {
                this.store.unloadAll("report");
                this.store.unloadAll("bill");
                this.store.unloadAll("signature");
            },
            clearReports: function clearReports() {
                this.store.unloadAll("report");
            },
            clearBills: function clearBills() {
                this.store.unloadAll("bill");
                this.store.unloadAll("signature");
            },
            loadReports: function loadReports(isFirst) {
                var _this = this;

                this.send("clearReports");
                var startDate = this.get("startDate");
                var endDate = this.get("endDate");
                this.get("errorsForReports").remove('server_side_error');
                this.set("isSearchingReports", true);
                this.store.query('report', {
                    project: null,
                    department: null,
                    startDate: startDate.format('yyyy-MM-dd hh:mm:ss'),
                    endDate: endDate.format('yyyy-MM-dd hh:mm:ss')
                }).then(function () {
                    _this.set("isSearchingReports", false);
                    if (isFirst) {
                        _this.send("loadBills");
                    }
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "该资源不存在或网络繁忙，请稍候再试";
                    }
                    var recordErrors = _this.get("errorsForReports");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this.set("isSearchingReports", false);
                    if (isFirst) {
                        _this.send("loadBills");
                    }
                });
            },
            loadBills: function loadBills() {
                var _this2 = this;

                this.send("clearBills");
                this.set("totalCount", 0);
                var startDate = this.get("startDate");
                var endDate = this.get("endDate");
                this.get("errorsForBills").remove('server_side_error');
                this.set("isSearchingBills", true);
                this.store.query('bill', {
                    startDate: startDate.format('yyyy-MM-dd hh:mm:ss'),
                    endDate: endDate.format('yyyy-MM-dd hh:mm:ss')
                }).then(function (answer) {
                    _this2.set("totalCount", answer.toArray().length);
                    _this2.set("isSearchingBills", false);
                }, function (reason) {
                    _this2.set("totalCount", 0);
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "该资源不存在或网络繁忙，请稍候再试";
                    }
                    var recordErrors = _this2.get("errorsForBills");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this2.set("isSearchingBills", false);
                });
            },
            setDateBySplitHour: function setDateBySplitHour() {
                var dateBySplitHour = this.getDateBySplitHour();
                this.set("startDate", dateBySplitHour.startDate);
                this.set("endDate", dateBySplitHour.endDate);
            },
            loadData: function loadData() {
                this.send("setDateBySplitHour");
                this.set("isSearchingReports", true);
                this.set("isSearchingBills", true);
                this.send("loadReports", true);
            },
            clearPop: function clearPop() {
                this.set("isPickUpPopActive", false);
            },
            syncSettingOptions: function syncSettingOptions(startDate, endDate) {
                this.set("settingOptions.startDate", startDate);
                this.set("settingOptions.endDate", endDate);
                this.toggleProperty("isTimeResetNeeded", true); //通知时间控件重置界面值
            },
            openSetting: function openSetting() {
                this.set("isPicking", true);
                this.send("syncSettingOptions", this.get("startDate"), this.get("endDate"));
            },
            setDateFromSetting: function setDateFromSetting() {
                this.send("clearPop");
                var splitDates = this.getDateFromSetting();
                this.set("startDate", splitDates.startDate);
                this.set("endDate", splitDates.endDate);
                this.set("isSearchingReports", true);
                this.set("isSearchingBills", true);
                this.send("loadReports", true);
            },
            reset: function reset() {
                var dateBySplitHour = this.getDateBySplitHour();
                this.send("syncSettingOptions", dateBySplitHour.startDate, dateBySplitHour.endDate);
            },
            'export': function _export() {
                var table2excel = window.$(".table2excel").clone();
                table2excel.find("td").css("text-align", "center");
                var fileName = this.get("applicationController.appTitle") + "-" + this.get("pannelTitle") + "-" + this.get("filterText");
                table2excel.table2excel({
                    fileName: fileName,
                    fileExt: ".xls"
                });
                table2excel = null;
            }
        }
    });
});
define('htis/controllers/start', ['exports', 'ember', 'ember-data', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _emberData, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        routeName: "start.index",
        equipment: _ember['default'].inject.service('equipment'),
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        messagesController: _ember['default'].inject.controller('messages'),
        pannelTitle: "最新加油单",
        isActive: true,
        selection: null,
        isScanner: _ember['default'].computed("sessionController.isBillScannerPowered", function () {
            return this.get("sessionController.isBillScannerPowered");
        }),
        isFolded: _ember['default'].computed("sessionController.isSystemPowered", "sessionController.isManagePowered", function () {
            return !(this.get("sessionController.isSystemPowered") || this.get("sessionController.isManagePowered"));
        }),
        createdDateSorting: ['created_date:asc', 'id'],
        modifiedDateSortingDesc: ['modified_date:desc'],
        arrangedResult: _ember['default'].computed.sort('model', 'modifiedDateSortingDesc'),
        cars: _ember['default'].computed(function () {
            return this.store.peekAll("car");
        }),
        carsCount: _ember['default'].computed("cars.length", function () {
            return this.get("cars.length");
        }),
        isOptimizable: _ember['default'].computed.not("isScanner"),
        isOptimized: false,
        isOptimizing: false,
        optimizerHelpInfo: "点击可结束过期申请单，并闲置临时车辆，这将优化系统资源并有助于提高系统响应速度。",
        optimizedMessage: "",
        errors: _emberData['default'].Errors.create(),
        actions: {
            fold: function fold() {
                this.toggleProperty('isFolded');
            },
            oneTouchOptimize: function oneTouchOptimize() {
                var _this = this;

                if (!this.get("isOptimizable") || this.get("isOptimized")) {
                    return;
                }
                this.get("errors").remove("server_side_error");
                this.set("isOptimizing", true);
                var currentUser = this.get("sessionController.user");
                var prom = this.store.createRecord("optimizer", {
                    creater: currentUser,
                    created_date: new Date()
                }).save();
                prom.then(function (answer) {
                    var store = _this.store;
                    store.unloadAll("optimizer");
                    var all_cars_count = answer.get("all_cars_count");
                    var archived_cars_count = answer.get("archived_cars_count");
                    var archived_instances_count = answer.get("archived_instances_count");
                    _this.set("optimizedMessage", '已成功执行优化，目前一共有' + all_cars_count + '辆车，本次优化结束了' + archived_instances_count + '个申请单，闲置了' + archived_cars_count + '辆车。');
                    if (archived_cars_count === 0 && archived_instances_count === 0) {
                        _this.set("isOptimized", true);
                    }
                    _this.send("unloadArchiveds");
                    _ember['default'].run.next(function () {
                        _this.set("isOptimizing", false);
                    });
                }, function (reason) {
                    var store = _this.store;
                    store.unloadAll("optimizer");
                    if (reason.errors) {
                        var error = reason.errors.objectAt(0);
                        var errorMsg = error.detail;
                        var recordErrors = _this.get("errors");
                        recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    }
                    _this.set("isOptimizing", false);
                });
            }
        }
    });
});
define('htis/controllers/start/bill', ['exports', 'ember', 'htis/mixins/navigable-pane/controller'], function (exports, _ember, _htisMixinsNavigablePaneController) {
    exports['default'] = _ember['default'].Controller.extend(_htisMixinsNavigablePaneController['default'], {
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        modelName: "scanning",
        routeName: "start.scanning",
        modelTitle: "加油单",
        pannelTitle: "加油单详情",
        actions: {}
    });
});
define('htis/controllers/startup', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        applicationController: _ember['default'].inject.controller('application'),
        changesetController: _ember['default'].inject.controller('changeset'),
        billController: _ember['default'].inject.controller('start.bill'),
        sessionController: _ember['default'].inject.controller('session'),
        isStartupLoaded: false, //记录是否加载过启动数据，切换用户时不需要重新加载，除非刷新浏览器
        previousTransition: null,
        maxBillLength: 20,
        fixScrollBug: function fixScrollBug() {
            //当需要在手机上禁用整个网页的滚动条时，开放下面的代码
            //但要增加一些判断，只在e.target=body元素的时候才禁用touchstart事件的默认行为（即滚动）
            // $("body").on("touchstart",function(e){
            //    
            //     console.log("mousemove--");
            //     e.preventDefault();
            //     console.log("mousemove");
            // });
        },
        intervalFun: function intervalFun(tag, timeout) {
            var _this = this;

            switch (tag) {
                case 'clear':
                    this.send("clearLocalDataFromStore");
                    break;
                case 'changeset':
                    this.get("changesetController").send("tryFetch");
                    break;
            }
            _ember['default'].run.later(function () {
                _this.intervalFun(tag, timeout);
            }, timeout);
        },
        actions: {
            retry: function retry() {
                this.get("target.router").refresh();
            },
            clearLocalDataFromStore: function clearLocalDataFromStore() {
                var _this2 = this;

                _ember['default'].debug("clearLocalDataFromStore-------------");
                var store = this.get("store");
                // var isUnloadChipNeeded = false,
                //     isUnloadTraceNeeded = false,
                //     isUnloadInstanceNeeded = false,
                //     isUnloadCarNeeded = false;

                //在changeset没有被暂停的情况下才有必要执行定时清除bill及signature操作
                var changesetController = this.get("changesetController");
                if (!changesetController.get("isPaused")) {
                    (function () {
                        //保留最新maxBillLength个加油单，其他从本地清除
                        var bills = store.peekAll("bill");
                        var maxId = bills.sortBy("created_date").get("lastObject.id");
                        var minId = 0;
                        var maxBillLength = _this2.get("maxBillLength");
                        var watchingBillId = _this2.get("billController.model.id"); //排除正在查看的加油单
                        if (maxId && maxId > maxBillLength && bills.get("length") > maxBillLength) {
                            minId = maxId - maxBillLength + 1;
                            bills.forEach(function (bill) {
                                if (watchingBillId === bill.get("id")) {
                                    return;
                                }
                                if (bill.get("isNew")) {
                                    //手机上如果比较卡不学是可能出现isNew为true的情况，所以这里要加判断，以防止正在加油中的单子被删除造成各种莫名问题
                                    return;
                                }
                                if (bill.get("id") < minId) {
                                    store.unloadRecord(bill);
                                }
                            });
                        }
                        //清除加油单签字，原则是存在加油单就不清除，反之清除
                        var signatures = store.peekAll("signature");
                        // let tempBill = null;
                        var index = -1;
                        signatures.forEach(function (signature) {
                            // tempBill = bills.findProperty("signature.id",signature.get("id"));
                            // if(!tempBill && signature.get("isLoaded")){
                            //     store.unloadRecord(signature);
                            // }
                            index = bills.map(function (n) {
                                return n.toJSON().signature;
                            }).indexOf(signature.get("id"));
                            if (index < 0) {
                                store.unloadRecord(signature);
                            }
                        });
                    })();
                }
            },
            doSchedules: function doSchedules() {
                var _this3 = this;

                //定期攫取数据库中的数据变化
                _ember['default'].run.later(function () {
                    _this3.intervalFun('changeset', 16000); //16000
                }, 16000); //14000

                //定期把本地store中无用的数据清除掉以释放内存
                _ember['default'].run.later(function () {
                    _this3.intervalFun('clear', 60000); //30000
                }, 60000); //30000
            }
        }
    });
});
define("htis/controllers/valids", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Controller.extend({
        routeName: "valids",
        departments: _ember["default"].computed(function () {
            return this.store.peekAll("department");
        })

    });
});
define('htis/helpers/base64-img', ['exports', 'ember'], function (exports, _ember) {
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	exports.base64Img = base64Img;

	function base64Img(_ref) {
		var _ref2 = _slicedToArray(_ref, 1);

		var base64 = _ref2[0];

		return _ember['default'].String.htmlSafe('<img class = \'base64-img\' src = "data:image/png;base64,' + base64 + '"/>');
	}

	exports['default'] = _ember['default'].Helper.helper(base64Img);
});
define("htis/helpers/boolean", ["exports", "ember"], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

    exports.boolean = boolean;

    function boolean(_ref) {
        var _ref2 = _slicedToArray(_ref, 1);

        var tag = _ref2[0];

        var text = tag ? "是" : "否";
        return '%@'.fmt(text);
    }

    exports["default"] = _ember["default"].Helper.helper(boolean);
});
define("htis/helpers/instance-mail", ["exports", "ember"], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

    exports.instanceMail = instanceMail;

    function instanceMail(_ref) {
        var _ref2 = _slicedToArray(_ref, 1);

        var instance = _ref2[0];

        if (instance.get("is_archived")) {
            return "";
        }
        var lastTrace = instance.get("lastTrace");
        if (!lastTrace) {
            _ember["default"].Logger.error("编号为" + instance.get("id") + "的申请单出现lastTrace为空的情况：\n           可能是申请单没有归档但是其trace被归档了，造成本地没有trace的原因，\n           也可能是出现了申请单的IsPending状态为true，但是其所有trace的is_finished都为true的不正常现象。");
            return "";
        }
        var lastTraceStatus = lastTrace.get("status");
        var lastCreater = lastTrace.get("creater"); //最后一个trace的创建人即申请人
        var lastModifier = lastTrace.get("modifier"); //最后一个trace的修改人即审核人
        var mail = lastCreater.get("email"); //要通知申请人
        var mailTip = "";
        var subject = "";
        var body = "";
        var modifiedDate = instance.get("modified_date");
        switch (lastTraceStatus) {
            case "approved":
                //只通知48小时内的核准单子
                if (instance.get("isNeedToBellApprove")) {
                    subject = "核准通知";
                    body = "审核人[" + lastModifier.get("name") + "]于[" + modifiedDate.format("yyyy-MM-dd hh:mm:ss") + "]核准了车辆[" + instance.get("car.number") + "]的申请单:\n";
                }
                break;
            case "rejected":
                subject = "驳回通知";
                body = "审核人[" + lastModifier.get("name") + "]于[" + modifiedDate.format("yyyy-MM-dd hh:mm:ss") + "]驳回了车辆[" + instance.get("car.number") + "]的申请单:\n";
                break;
            case "aborted":
                subject = "中止通知";
                body = "审核人[" + lastModifier.get("name") + "]于[" + modifiedDate.format("yyyy-MM-dd hh:mm:ss") + "]中止了车辆[" + instance.get("car.number") + "]的申请单:\n";
                break;
        }
        if (mail) {
            mailTip = mail + ("<span class=\"badge pull-right\">" + lastCreater.get("name") + "</span>");
        } else {
            mailTip = "<span class=\"text-danger\">申请人没有填写邮件地址</span>";
        }
        if (instance.get("isFinishing")) {
            if (subject) {
                subject += "、过期通知";
            } else {
                subject = "过期通知";
            }
            if (body) {
                if (instance.get("isFinished")) {
                    body += "☆该申请单已于[" + instance.get("end_date").format("yyyy-MM-dd") + "]过期☆\n";
                } else {
                    body += "☆该申请单将于[" + instance.get("end_date").format("yyyy-MM-dd") + "]过期☆\n";
                }
            } else {
                if (instance.get("isFinished")) {
                    body = "车辆[" + instance.get("car.number") + "]有一个申请单已于[" + instance.get("end_date").format("yyyy-MM-dd") + "]过期:\n";
                } else {
                    body = "车辆[" + instance.get("car.number") + "]有一个申请单将于[" + instance.get("end_date").format("yyyy-MM-dd") + "]过期:\n";
                }
            }
        }
        if (subject) {
            body += "◆VIN:" + instance.get('car.vin') + " \n◆所属项目:" + instance.get('project.name') + " \n◆使用部门:" + instance.get('department.name') + " \n◆使用人:" + instance.get('user_name') + "\n";
            body += "§网址:" + window.location.href;
            body = encodeURIComponent(body);
            return _ember["default"].String.htmlSafe("<a href='mailto:" + mail + "?subject=" + subject + "[" + instance.get("car.number") + "]--加油机信息系统&body=" + body + "' class = 'instance-mail list-group' title='点击发送通知邮件给申请人'>@邮件通知:" + mailTip + "</a>");
        } else {
            return "";
        }
    }

    exports["default"] = _ember["default"].Helper.helper(instanceMail);
});
define("htis/helpers/power-icon", ["exports", "ember"], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

  exports.powerIcon = powerIcon;

  function powerIcon(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var power = _ref2[0];
    var role = _ref2[1];

    var isPowerAllowed = role.get("powers").mapBy("id").contains(power.get("id"));
    var icon = isPowerAllowed ? "glyphicon-eye-open text-success" : "glyphicon-eye-close text-danger";
    return _ember["default"].String.htmlSafe("<span class = 'glyphicon " + icon + "'></span>");
  }

  exports["default"] = _ember["default"].Helper.helper(powerIcon);
});
define("htis/helpers/print-bill", ["exports", "ember"], function (exports, _ember) {
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

	exports.printBill = printBill;

	function printBill(_ref) {
		var _ref2 = _slicedToArray(_ref, 4);

		var bill = _ref2[0];
		var firmName = _ref2[1];
		var appShortTitle = _ref2[2];
		var isPrinter = _ref2[3];

		var format = "yyyy-MM-dd hh:mm:ss";
		var created_date_value = "";
		var time_value = "";
		created_date_value = bill.get("created_date").format(format);
		time_value = bill.get("time").format(format);

		if (isPrinter) {
			var content = "\n\t\t　　　　　　加油单\n\t\t单　　号:" + bill.get("id") + "\n\t\t车辆编号:" + bill.get("car.number") + "\n\t\tVIN　　 :" + bill.get("car.vin") + "\n\t\t所属项目:" + bill.get("project.name") + "\n\t\t使用部门:" + bill.get("department.name") + "\n\t\t油　　品:" + bill.get("oil.name") + "\n\t\t加油量　:" + bill.get("volume") + "\n\t\t里程数　:" + bill.get("mileage") + "\n\t\t油　　耗:" + bill.get("rate") + "\n\t\t加油工　:" + bill.get("oiler.name") + "\n\t\t加油时间:" + time_value;
			content = content + ("\n\t\t-------------------------------\n\t\t　　　　　" + firmName + "\n\t\t　　　 " + appShortTitle + "\n\t\t-------------------------------\n\t\t");
			return _ember["default"].String.htmlSafe(content);
		} else {
			var content = "\n\t\t<div style=\"text-align:center\">加油单</div>\n\t\t单　　号:" + bill.get("id") + "<br/>\n\t\t车辆编号:" + bill.get("car.number") + "<br/>\n\t\tVIN　　 :" + bill.get("car.vin") + "<br/>\n\t\t所属项目:" + bill.get("project.name") + "<br/>\n\t\t使用部门:" + bill.get("department.name") + "<br/>\n\t\t油　　品:" + bill.get("oil.name") + "<br/>\n\t\t加油量　:" + bill.get("volume") + "<br/>\n\t\t里程数　:" + bill.get("mileage") + "<br/>\n\t\t油　　耗:" + bill.get("rate") + "<br/>\n\t\t加油工　:" + bill.get("oiler.name") + "<br/>\n\t\t加油时间:" + time_value + "<br/>";
			content = content + ("\n\t\t<div style=\"border:dotted 2px #999;height:1px;margin:6px;\"></div>\n\t\t<div style=\"text-align:center\">\n\t\t\t" + firmName + "<br/>\n\t\t\t" + appShortTitle + "\n\t\t</div>\n\t\t<div style=\"border:dotted 2px #999;height:1px;margin:6px;\"></div>\n\t\t");
			return _ember["default"].String.htmlSafe(content);
		}
	}

	exports["default"] = _ember["default"].Helper.helper(printBill);
});
define("htis/helpers/report-compute", ["exports", "ember"], function (exports, _ember) {
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

	exports.reportCompute = reportCompute;

	function reportCompute(_ref, _ref3) {
		var _ref2 = _slicedToArray(_ref, 1);

		var model = _ref2[0];
		var project = _ref3.project;
		var oil = _ref3.oil;
		var department = _ref3.department;

		var reports = model.filter(function (n) {
			return (!project || n.get("project.id") === project.get("id")) && (!oil || n.get("oil.id") === oil.get("id")) && (!department || n.get("department.id") === department.get("id"));
		});
		if (reports.length === 0) {
			return "--";
		}
		var sum = 0;
		reports.forEach(function (n) {
			sum += parseInt(n.get("volume"));
		});
		return sum;
	}

	exports["default"] = _ember["default"].Helper.helper(reportCompute);
});
define("htis/helpers/status-icon", ["exports", "ember"], function (exports, _ember) {
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

	exports.statusIcon = statusIcon;

	function statusIcon(_ref) {
		var _ref2 = _slicedToArray(_ref, 1);

		var status = _ref2[0];

		var icon = undefined;
		var color = undefined;
		var title = undefined;
		switch (status) {
			case "recaptured":
				icon = "glyphicon-adjust";
				color = "text-info";
				title = "已取回";
				break;
			case "modified":
				icon = "glyphicon-edit";
				color = "text-muted";
				title = "已修改";
				break;
			case "pending":
				icon = "glyphicon-time";
				color = "text-warning";
				title = "待审核";
				break;
			case "approved":
				icon = "glyphicon-ok";
				color = "text-success";
				title = "已核准";
				break;
			case "rejected":
				icon = "glyphicon-remove";
				color = "text-danger";
				title = "已驳回";
				break;
			case "aborted":
				icon = "glyphicon-stop";
				color = "text-danger";
				title = "已中止";
				break;
			case "forbidden":
				icon = "glyphicon-ban-circle";
				color = "text-danger";
				title = "已暂停";
				break;
			case "enabled":
				icon = "glyphicon-ok-circle";
				color = "text-success";
				title = "已恢复";
				break;
		}
		return _ember["default"].String.htmlSafe("<span class='status-icon glyphicon " + icon + " " + color + "' title='" + title + "'></span>");
	}

	exports["default"] = _ember["default"].Helper.helper(statusIcon);
});
define("htis/helpers/substr", ["exports", "ember"], function (exports, _ember) {
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

	exports.substr = substr;

	function substr(_ref, _ref3) {
		var _ref2 = _slicedToArray(_ref, 1);

		var value = _ref2[0];
		var start = _ref3.start;
		var end = _ref3.end;

		if (value) {
			return value.substr(start, end);
		} else {
			return "";
		}
	}

	exports["default"] = _ember["default"].Helper.helper(substr);
});
define("htis/helpers/timefmt", ["exports", "ember"], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

    exports.timefmt = timefmt;

    function timefmt(_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var value = _ref2[0];
        var format = _ref2[1];

        format = format ? format : "yyyy-MM-dd hh:mm:ss";
        if (value instanceof Date) {
            return value.format(format);
        } else {
            var date = window.HOJS.lib.parseDate(value);
            return date ? date.format(format) : "";
        }
    }

    exports["default"] = _ember["default"].Helper.helper(timefmt);
});
define('htis/initializers/export-application-global', ['exports', 'ember', 'htis/config/environment'], function (exports, _ember, _htisConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_htisConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _htisConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_htisConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('htis/initializers/reopen-components', ['exports', 'ember'], function (exports, _ember) {
	exports.initialize = initialize;

	var alreadyRun = false;

	function initialize() /* container, application */{
		// application.inject('route', 'foo', 'service:foo');

		if (alreadyRun) {
			return;
		} else {
			alreadyRun = true;
		}
		_ember['default'].Component.reopen({
			init: function init() {
				this._super();
				var self = this;
				// bind attributes beginning with 'data-'
				Object.keys(this).forEach(function (key) {
					if (key.substr(0, 5) === 'data-') {
						self.get('attributeBindings').pushObject(key);
					}
				});
			}
		});
		_ember['default'].TextSupport.reopen({
			placeHolderFunction: _ember['default'].on("didInsertElement", function () {
				if (!window.$.fn.placeholder.support) {
					this.$().placeholder();
				}
			}),
			placeholderDidChange: _ember['default'].observer("placeholder", function () {
				//如果浏览器不支持placeholder功能，则重新绑定一次placeholder插件
				if (!window.$.fn.placeholder.support) {
					_ember['default'].run.next(this, function () {
						if (!this.get("value")) {
							this.set("value", "");
							this.$().val(this.get("placeholder"));
						}
						this.$().placeholder();
					});
				}
			})
		});
	}

	exports['default'] = {
		name: 'reopen-components',
		initialize: initialize
	};
});
define('htis/initializers/reopen-model', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
	exports.initialize = initialize;

	var alreadyRun = false;

	function initialize() /* container, application */{
		// application.inject('route', 'foo', 'service:foo');

		if (alreadyRun) {
			return;
		} else {
			alreadyRun = true;
		}
		_emberData['default'].Model.reopen({
			rollbackAttributes: function rollbackAttributes() {
				this._super();
				if (this.get("isRelationshipsChanged")) {
					this.rollbackRelations();
				}
			},
			rollbackRelations: function rollbackRelations() {
				var _this = this;

				var changedRelationships = this.get("changedRelationships");
				changedRelationships.forEach(function (relationship) {
					_this.rollbackRelation(relationship);
				});
			},
			rollbackRelation: function rollbackRelation(relationship) {
				var kind = relationship.relationshipMeta.kind;
				if (kind === "hasMany") {
					this.set(relationship.key, relationship.manyArray.canonicalState.mapBy("record"));
				} else if (kind === "belongsTo") {
					this.set(relationship.key, relationship.canonicalMembers.list.mapBy("record")[0]);
				}
				this.send("propertyWasReset");
			},
			relationshipsDidChange: _ember['default'].observer("isRelationshipsChanged", function () {
				//由于ember对于belongsTo关联属性在changedAttributes及rollback上有bug
				//这里通过判断relationships是变化来正确设置其hasDirtyAttributes值
				if (this.get("isDeleted")) {
					return;
				}
				if (this.get("isRelationshipsChanged")) {
					this.send('becomeDirty');
				} else {
					this.send("propertyWasReset");
				}
			}),
			hasDirtyAttributesDidChange: _ember['default'].observer("hasDirtyAttributes", function () {
				var _this2 = this;

				_ember['default'].run.next(function () {
					//以下两种情况会需要hasDirtyAttributes变化时重新计算isRelationshipsChanged
					//1、当save请求后台完成后hasDirtyAttributes会变成false，这时需要重新计算isRelationshipsChanged值
					//2、当用户修改Attributes造成hasDirtyAttributes属性从true变成false时要重新计算isRelationshipsChanged值
					_this2.notifyPropertyChange("isRelationshipsChanged");
				});
			}),
			isRelationshipsChanged: _ember['default'].computed(function () {
				var _this3 = this;

				if (this.get("isDeleted")) {
					return false;
				}
				this.set("changedRelationships", []);
				var relationships = this.get("_internalModel._relationships");
				var relationship = undefined,
				    isNoneChanged = true;
				this.eachRelationship(function (name, descriptor) {
					relationship = relationships.get(descriptor.key);
					if (_this3.isRelationshipChanged(relationship)) {
						isNoneChanged = false;
					}
				});
				return !isNoneChanged;
			}),
			changedRelationships: [],
			isRelationshipChanged: function isRelationshipChanged(relationship) {
				var kind = relationship.relationshipMeta.kind;
				var isChanged = false;
				if (kind === "hasMany") {
					var curIds = relationship.manyArray.currentState.mapBy("id").sort();
					var canonicalIds = relationship.manyArray.canonicalState.mapBy("id").sort();
					isChanged = curIds.join(",") !== canonicalIds.join(",");
				} else if (kind === "belongsTo") {
					var curIds = relationship.members.list.mapBy("id");
					var canonicalIds = relationship.canonicalMembers.list.mapBy("id");
					isChanged = curIds.join(",") !== canonicalIds.join(",");
				}
				var changedRelationships = this.get("changedRelationships");
				if (isChanged) {
					changedRelationships.pushObject(relationship);
				} else {
					changedRelationships.removeObject(relationship);
				}
				return isChanged;
			},
			isDeepDirty: false,
			isDeepValid: true,
			isUnSavable: _ember['default'].computed("errors.length", "errors.server_side_error", "isValid", "hasDirtyAttributes", "isDeepValid", "isDeepDirty", "isSaving", function () {
				var errors = this.get("errors");
				var hasServerSideError = errors.has("server_side_error");
				var isSaving = this.get("isSaving"),
				    hasDirtyAttributes = this.get("hasDirtyAttributes"),
				    isValid = this.get("isValid"),
				    isDeepDirty = this.get("isDeepDirty"),
				    isDeepValid = this.get("isDeepValid");
				if (isSaving) {
					return true;
				} else {
					if (hasServerSideError && errors.get("length") === 1) {
						//当只有服务器错误的时候允许保存
						return false;
					} else {
						if (hasDirtyAttributes || isDeepDirty) {
							if (isValid && isDeepValid) {
								return false;
							} else {
								return true;
							}
						} else {
							return true;
						}
					}
				}
			}),
			save: function save(isSkipVali) {
				if (isSkipVali) {
					return this._super();
				}
				//在执行保存前先触发验证函数，只有验证通过才继续保存
				this.get("errors").remove('server_side_error');
				this.validate();
				if (!this.get("isUnSavable")) {
					return this._super();
				} else {
					return _ember['default'].RSVP.reject();
				}
			},
			validate: function validate() {
				var model = this;
				// 这里不可以用notifyAllPropertyChange，
				// 因为当后台有返回错误的时候，执行model.notifyPropertyChange函数会造成model内属性值全部重置为默认值
				// 这应该是ember的bug，可以通过手动调用sendEvent来触发model的observes函数
				// 从而挠过调用notifyAllPropertyChange函数造成的问题
				_ember['default'].get(model.constructor, "fields").forEach(function (kind, field) {
					// console.log("kind:%@,field:%@".fmt(kind,field));
					_ember['default'].sendEvent(model, field + ":change", [model, field]);
					if (kind === "hasMany") {
						//如果有hasMany字段，则把其每个子记录都执行一次验证
						//注意每个子记录中如果有hasMany则会继续找到其下层的hasMany并执行对应的validate，不会漏掉
						model.get(field).forEach(function (item) {
							item.validate();
						});
					}
				});
			},
			notifyAllPropertyChange: function notifyAllPropertyChange() {
				var _this4 = this;

				_ember['default'].get(this.constructor, "fields").forEach(function (kind, field) {
					_this4.notifyPropertyChange(field);
				});
			}
		});
	}

	exports['default'] = {
		name: 'reopen-model',
		initialize: initialize
	};
});
define('htis/instance-initializers/app-version', ['exports', 'htis/config/environment', 'ember'], function (exports, _htisConfigEnvironment, _ember) {

  var classify = _ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: 'App Version',
    initialize: function initialize(application) {
      if (!registered) {
        var appName = classify(application.toString());
        _ember['default'].libraries.register(appName, _htisConfigEnvironment['default'].APP.version);
        registered = true;
      }
    }
  };
});
define('htis/mixins/archive-cars/controller', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _ember['default'].Mixin.create({
        isEmptyKeyFetchable: true,
        isEnterSearchable: true,
        isSearchkeyEntered: false, //是否searchKey用于服务器端搜索
        errors: _emberData['default'].Errors.create(),
        lastId: 0,
        applicationController: _ember['default'].inject.controller('application'),
        searchKeyDidChange: _ember['default'].observer("searchKey", function () {
            if (this.get("isSearchkeyEntered")) {
                //如果searchKey用于服务器端搜索，变更searchKey的时候要重置所有参数
                this.send("resetListOptions", true);
            }
        }),
        actions: {
            resetListOptions: function resetListOptions(isUnloadAtFirstTime) {
                var _this = this;

                if (isUnloadAtFirstTime) {
                    this.send("unloadArchivedCars");
                } else {
                    //这里如果不加next，会出现选中一个闲置后的车辆明细后，再切换到左侧其他导航栏时中间栏变成空的问题（其实不是route跳转失败）
                    //比如不加next的话，从已闲置栏，选中一个车辆进入车辆明细后，再切换到可加油栏会出现中间栏变空
                    _ember['default'].run.next(function () {
                        //如果是从搜索栏切换到已闲置栏，则不能执行unloadArchivedCars，因为会造成本来加载成功的闲置车辆被unload了
                        if (!(_this.routeName === "manage.searchs" && _this.get("applicationController.currentRouteName") === "manage.archives.index")) {
                            _this.send("unloadArchivedCars");
                        }
                    });
                }
                this.set("isToShowAll", false);
                this.set("lastId", 0);
                this.set("isMoreButtonNeeded", false);
                this.get("errors").clear();
                this.set("isSearchkeyEntered", false);
            },
            unloadArchivedCars: function unloadArchivedCars() {
                var store = this.store;
                this.get("model").filterBy("is_archived", true).forEach(function (car) {
                    store.unloadRecord(car);
                });
            },
            fetchArchivedCars: function fetchArchivedCars(searchKey) {
                var _this2 = this;

                if (!searchKey) {
                    searchKey = "";
                }
                var pageCount = this.get("pageCount");
                var lastId = this.get("lastId");
                this.get("errors").remove('server_side_error');
                this.set("isSearching", true);
                this.store.query('car', {
                    key: searchKey,
                    count: pageCount,
                    lastId: lastId
                }).then(function (answer) {
                    var cars = answer.toArray();
                    if (cars.length > 0) {
                        var minId = cars.mapBy("id").sort(function (a, b) {
                            return parseInt(a) - parseInt(b);
                        }).get("firstObject");
                        _this2.set("lastId", minId);
                    }
                    if (cars.length < pageCount) {
                        _this2.set("isMoreButtonNeeded", false);
                    } else {
                        _this2.set("isMoreButtonNeeded", true);
                    }
                    _this2.set("isSearching", false);
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "该资源不存在或网络繁忙，请稍候再试";
                    }
                    var recordErrors = _this2.get("errors");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this2.set("isSearching", false);
                });
            },
            fetchNext: function fetchNext() {
                this.set("isToShowAll", true);
                //如果searchKey用于服务器端搜索，则searchKey参与搜索，反之搜索时忽略searchKey
                if (this.get("isSearchkeyEntered")) {
                    this.send("fetchArchivedCars", this.get("searchKey"));
                } else {
                    this.send("fetchArchivedCars");
                }
            },
            enterSearch: function enterSearch(searchKey) {
                //每次回车搜索，则searchKey参与搜索，除非searchKey为空，isSearchkeyEntered才被标识为否，即不参与搜索
                this.send("resetListOptions", true);
                if (searchKey.length > 0) {
                    this.set("isSearchkeyEntered", true);
                }
                if (this.get("isEmptyKeyFetchable")) {
                    this.send("fetchArchivedCars", searchKey);
                } else if (searchKey.length > 0) {
                    this.send("fetchArchivedCars", searchKey);
                }
            }
        }
    });
});
define("htis/mixins/archive-cars/route", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            if (controller.get("isEmptyKeyFetchable")) {
                controller.send("fetchArchivedCars");
            }
            return this._super();
        },
        deactivate: function deactivate() {
            var controller = this.controllerFor(this.controllerName);
            controller.send("resetListOptions");
            return this._super();
        }
    });
});
define('htis/mixins/fit-pane/controller', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Mixin.create({
        equipment: _ember['default'].inject.service('equipment'),
        isActive: false,
        isBack: false,
        isHide: false,
        // runLaterForHide:null,
        parentRouteName: "setting",
        parentController: _ember['default'].inject.controller('setting'),
        // isBackDidChange:Ember.observer("isBack",function(){
        //     //退出后要把div隐藏来减少内存消耗
        //     if(this.get("isBack")){
        //         if(Ember.$.support.transition){
        //             Ember.run.cancel(this.runLaterForHide);
        //             this.runLaterForHide = Ember.run.later(()=>{
        //                 if(this.get("isBack")){
        //                     this.set("isHide",true);
        //                 }
        //             },3000);
        //         }
        //         else{
        //             this.set("isHide",true);
        //         }
        //     }
        // }),
        equipmentIsXsDidChange: _ember['default'].observer("equipment.isXs", function () {
            //当浏览器大小在手机模式与非手机模式中变换时需要做调整来自动适应布局
            if (this.get("equipment.isXs")) {
                var currentRouteName = this.target.currentRouteName;
                var isChildRoute = currentRouteName.indexOf(this.parentRouteName) >= 0 && currentRouteName !== this.parentRouteName + '.index';
                if (isChildRoute && !this.get("parentController.isBack")) {
                    this.set("parentController.isBack", true);
                }
            } else {
                if (this.get("parentController.isBack")) {
                    this.set("parentController.isHide", false);
                    this.set("parentController.isBack", false);
                }
            }
        })
    });
});
define('htis/mixins/fit-pane/route', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Mixin.create({
        controllerName: '', //setting.roles
        parentControllerName: "", //setting
        isDeep: false, //是否为深度界面，深度界面即最深层里面的界面，其在手机及PC上动画表现一致，不需要特意去兼容PC上的多屏展开模式与手机上的多层折叠模式
        activate: function activate() {
            var isDeep = this.get("isDeep");
            if (!isDeep) {
                //在多屏模式下，因为在切换列表选项的时候详情界面不会触发didInsertElement，所以需要额外增加isActive设值步骤
                //而且多屏模式下不需要看到动画
                var controller = this.controllerFor(this.controllerName);
                if (!controller.get("equipment.isXs")) {
                    controller.set("isActive", true);
                }
            }
            var parentControllerName = this.get("parentControllerName");
            if (parentControllerName) {
                var p_controller = this.controllerFor(parentControllerName);
                if (isDeep) {
                    p_controller.set("isBack", true);
                } else {
                    if (p_controller.get("equipment.isXs")) {
                        p_controller.set("isBack", true);
                    }
                }
            }
            return this;
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            controller.set("isActive", false);
            var parentControllerName = this.get("parentControllerName");
            if (parentControllerName) {
                var p_controller = this.controllerFor(parentControllerName);
                var isDeep = this.get("isDeep");
                if (isDeep) {
                    p_controller.set("isBack", false);
                } else {
                    if (p_controller.get("equipment.isXs")) {
                        p_controller.set("isBack", false);
                    }
                }
            }
            return this;
        }
    });
});
define("htis/mixins/instance-detail/archive-car-route", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({
        // controllerName: 'manage.releases.release',
        // statusName:'isReleased',
        actions: {
            didTransition: function didTransition() {
                var controller = this.controller;
                if (this.statusName === "isSearch" || controller.get("model." + this.statusName)) {
                    controller.send("enterArchivingCar");
                    return true;
                } else {
                    this.send("goBack");
                }
            },
            willTransition: function willTransition(transition) {
                var controller = this.controller;
                controller.set("confirmCancelTransition", null);
                controller.set("isConfirmingCancel", false);
                if (controller.get("isConfirmed")) {
                    controller.set("isConfirmed", false);
                    controller.send("cancelArchivingCar");
                    return true;
                } else if (controller.get("archivingCar.isNew")) {
                    this.controller.send("showCancelConfirm", transition);
                    transition.abort();
                } else {
                    controller.send("cancelArchivingCar");
                    return true;
                }
            },
            goBack: function goBack() {
                this.transitionTo(this.controllerName);
            }
        }
    });
});
define("htis/mixins/instance-detail/controller", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({
        isPickUpPopActive: false,
        confirmingCancelMsg: _ember["default"].computed("isNew", "isCreatingInstance", "isCreatingTrace", "isRecapturing", "isChecking", "isForbidding", "isEnabling", "isAborting", "isArchiving", function () {
            if (this.get("isCreatingInstance")) {
                return "检测到新建申请单，是否要放弃？";
            } else if (this.get("isCreatingTrace")) {
                return "检测到正在修改申请单，是否要放弃？";
            } else if (this.get("isRecapturing")) {
                return "检测到正在取回申请单，是否要放弃？";
            } else if (this.get("isChecking")) {
                return "检测到正在审核申请单，是否要放弃？";
            } else if (this.get("isForbidding")) {
                return "检测到正在暂停申请单，是否要放弃？";
            } else if (this.get("isEnabling")) {
                return "检测到正在恢复申请单，是否要放弃？";
            } else if (this.get("isAborting")) {
                return "检测到正在中止申请单，是否要放弃？";
            } else if (this.get("isArchiving")) {
                return "检测到正在结束申请单，是否要放弃？";
            } else if (this.get("isCarArchiving")) {
                return "检测到正在闲置车辆，是否要放弃？";
            } else if (this.get("isCarRestoring")) {
                return "检测到正在还原车辆，是否要放弃？";
            } else {
                return this._super();
            }
        }),
        isCreatingInstance: false,
        creatingInstance: null,
        isCreatingTrace: false,
        creatingTrace: null,
        // selectionEidtableDidChange:Ember.observer("selection.is_pending","selection.is_archived",function(){
        //     //当creatingTrace所属instance即selection从可修改状态变成不可修改状态时（其他用户修改了申请单并push到当前客户端）
        //     //如果正好在修改申请单（即isCreatingTrace为true，creatingTrace不为null），
        //     //需要变更其状态，让正在修改的申请单撤销修改操作及界面
        //     let instance = this.get("selection");
        //     if(!this.get("isCreatingTrace")){
        //         return;
        //     }
        //     if(instance.get("is_pending") || instance.get("is_archived")){
        //         //从可修改状态变成不可修改，则撤销修改
        //         this.send("cancelCreatingTrace");
        //     }
        // }),
        changeTags: [],
        isRecheckNeeded: _ember["default"].computed("changeTags.length", "creatingTrace.start_date", "creatingTrace.end_date", function () {
            var instance = this.get("selection");
            if (!instance.get("is_released")) {
                //没有发布则一定要提交审核
                return true;
            }
            //可加油的，根据是否修改了敏感信息来判断是否需要重新提交审核
            var changeTags = this.get("changeTags");
            var isSubmitable = changeTags.any(function (n) {
                return ["所属项目", "使用部门", "使用人", "油品"].contains(n);
            });
            if (isSubmitable) {
                return true;
            } else {
                var creatingTrace = this.get("creatingTrace");
                if (changeTags.contains("起始时间")) {
                    if (creatingTrace.get("start_date").getTime() < instance.get("start_date").getTime()) {
                        //开始时间改小了，即时间范围变大了，需要重新提交审核
                        isSubmitable = true;
                    }
                }
                if (isSubmitable) {
                    return true;
                } else {
                    if (changeTags.contains("终止时间")) {
                        if (creatingTrace.get("end_date").getTime() > instance.get("end_date").getTime()) {
                            //终止时间改大了，即时间范围变大了，需要重新提交审核
                            isSubmitable = true;
                        }
                    }
                }
                return isSubmitable;
            }
        }),
        isRecheckNeededDidChange: _ember["default"].observer("isRecheckNeeded", "isCreatingTrace", function () {
            var creatingTrace = this.get("creatingTrace");
            if (!creatingTrace) {
                return;
            }
            if (this.get("isRecheckNeeded")) {
                creatingTrace.set("status", "pending");
            } else {
                creatingTrace.set("status", "modified");
            }
        }),
        isCreatingTraceUnSavable: _ember["default"].computed.not("changeTags.length"),
        isRecapturing: false,
        recapturingTrace: null,
        isArchiving: false,
        archivingInstance: null,
        isArchivable: _ember["default"].computed("selection.is_released", "selection.is_enable", function () {
            //只有未发布或已暂停的申请单可以归档
            //对于可加油的申请单只要结束时间小于当前服务器时间即可归档
            var instance = this.get("selection");
            var isArchivable = !instance.get("is_released") || !instance.get("is_enable");
            if (isArchivable) {
                return true;
            } else {
                var syncToken = this.get("applicationController.syncToken");
                if (instance.get("end_date").getTime() - syncToken.getTime() < 0) {
                    isArchivable = true;
                }
                return isArchivable;
            }
        }),
        isCarArchiving: false,
        archivingCar: null,
        isCarRestoring: false,
        restoringCar: null,
        isForbidding: false,
        forbiddingModel: null,
        // selectionForbidableDidChange:Ember.observer("selection.isForbidable",function(){
        //     //当forbiddingModel所属instance即selection从可暂停变成不可暂停时（其他用户修改了申请单并push到当前客户端）
        //     //如果正好在暂停申请单（即isForbidding为true，forbiddingModel不为null），
        //     //需要变更其状态，让正在暂停的申请单撤销暂停操作及界面
        //     let instance = this.get("selection");
        //     if(!this.get("isForbidding")){
        //         return;
        //     }
        //     if(!instance.get("isForbidable")){
        //         //从可暂停变成不可暂停，则撤销暂停
        //         this.send("cancelForbidding");
        //     }
        // }),
        isEnabling: false,
        enablingModel: null,
        // selectionEnableDidChange:Ember.observer("selection.is_enable",function(){
        //     //当forbiddingModel所属instance即selection从可暂停变成不可暂停时（其他用户修改了申请单并push到当前客户端）
        //     //如果正好在暂停申请单（即isForbidding为true，forbiddingModel不为null），
        //     //需要变更其状态，让正在暂停的申请单撤销暂停操作及界面
        //     let instance = this.get("selection");
        //     if(!this.get("isEnabling")){
        //         return;
        //     }
        //     if(instance.get("is_enable")){
        //         //从可恢复变成不可恢复，则撤销恢复
        //         this.send("cancelEnabling");
        //     }
        // }),
        isChecking: false,
        checkingModel: null,
        isApproved: true,
        checkText: "",
        isUnCheckable: _ember["default"].computed("isApproved", "checkText", function () {
            if (this.get("isApproved")) {
                return false;
            } else {
                return this.get("checkText").trim().length === 0;
            }
        }),
        isApprovedDidChange: _ember["default"].observer("isApproved", function () {
            this.set("checkText", "");
        }),
        checkRadioList: [{
            name: '核准',
            value: true
        }, {
            name: '驳回',
            value: false
        }],
        isPickingProjectForInstance: false,
        isPickingDepartmentForInstance: false,
        isPickingProjectForTrace: false,
        isPickingDepartmentForTrace: false,
        isChecker: _ember["default"].computed("sessionController.isInstanceCheckPowered", function () {
            return this.get("sessionController.isInstanceCheckPowered");
        }),
        createInstance: function createInstance() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.store.createRecord("instancenew", {
                car: currentCar,
                project: null,
                department: null,
                user_name: "",
                oils: [],
                goal: "",
                start_date: null,
                end_date: null,
                creater: currentUser,
                created_date: new Date()
            });
            return instance;
        },
        createTrace: function createTrace() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.get("selection");
            var lastTrace = instance.get("lastTrace");
            if (!lastTrace) {
                _ember["default"].Logger.error("编号为" + instance.get("id") + "的申请单出现lastTrace为空的情况：\n               可能是申请单没有归档但是其trace被归档了，造成本地没有trace的原因，\n               也可能是出现了申请单的IsPending状态为true，但是其所有trace的is_finished都为true的不正常现象。");
                return null;
            }
            var trace = this.store.createRecord("tracenew", {
                car: currentCar,
                instance: instance,
                previous_trace: lastTrace,
                status: "modified",
                project: lastTrace.get("project"),
                department: lastTrace.get("department"),
                user_name: lastTrace.get("user_name"),
                oils: lastTrace.get("oils"),
                goal: lastTrace.get("goal"),
                start_date: lastTrace.get("start_date"),
                end_date: lastTrace.get("end_date"),
                start_info: '',
                creater: currentUser,
                created_date: new Date()
            });
            return trace;
        },
        createRecapture: function createRecapture() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.get("selection");
            var recapture = this.store.createRecord("tracerecapture", {
                trace: instance.get("lastTrace"),
                instance: instance,
                car: currentCar,
                end_info: "",
                creater: currentUser,
                created_date: new Date()
            });
            return recapture;
        },
        createArchive: function createArchive() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.get("selection");
            var archive = this.store.createRecord("instancearchive", {
                instance: instance,
                traces: instance.get("traces"),
                car: currentCar,
                creater: currentUser,
                created_date: new Date()
            });
            return archive;
        },
        createCarArchive: function createCarArchive() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var archive = this.store.createRecord("cararchive", {
                car: currentCar,
                creater: currentUser,
                created_date: new Date()
            });
            return archive;
        },
        createCarRestore: function createCarRestore() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var restore = this.store.createRecord("carrestore", {
                car: currentCar,
                creater: currentUser,
                created_date: new Date()
            });
            return restore;
        },
        createCheck: function createCheck() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.get("selection");
            var lastTrace = instance.get("lastTrace");
            var status = this.get("isApproved") ? "approved" : "rejected";
            var check = this.store.createRecord("instancecheck", {
                trace: lastTrace,
                car: currentCar,
                instance: instance,
                status: status,
                end_info: this.get("checkText").trim(),
                creater: currentUser,
                created_date: new Date()
            });
            return check;
        },
        createForbid: function createForbid() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.get("selection");
            var lastTrace = instance.get("lastTrace");
            var status = "forbidden";
            var forbid = this.store.createRecord("instanceforbid", {
                trace: lastTrace,
                car: currentCar,
                instance: instance,
                status: status,
                start_info: "",
                creater: currentUser,
                created_date: new Date()
            });
            return forbid;
        },
        createEnable: function createEnable() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.get("selection");
            var lastTrace = instance.get("lastTrace");
            var status = "enabled";
            var enable = this.store.createRecord("instanceenable", {
                trace: lastTrace,
                car: currentCar,
                instance: instance,
                status: status,
                start_info: "",
                creater: currentUser,
                created_date: new Date()
            });
            return enable;
        },
        createAbort: function createAbort() {
            var currentUser = this.get("sessionController.user");
            var currentCar = this.get("model");
            var instance = this.get("selection");
            var lastTrace = instance.get("lastTrace");
            var status = "aborted";
            var abort = this.store.createRecord("instanceabort", {
                trace: lastTrace,
                car: currentCar,
                instance: instance,
                status: status,
                start_info: "",
                creater: currentUser,
                created_date: new Date()
            });
            return abort;
        },
        nameSorting: ['name:asc'],
        arrangedProjects: _ember["default"].computed.sort('all_projects', 'nameSorting'),
        all_projects: _ember["default"].computed(function () {
            return this.store.peekAll("project");
        }),
        arrangedDepartments: _ember["default"].computed.sort('all_departments', 'nameSorting'),
        all_departments: _ember["default"].computed(function () {
            return this.store.peekAll("department");
        }),
        arrangedOils: _ember["default"].computed.sort('all_oils', 'nameSorting'),
        all_oils: _ember["default"].computed(function () {
            return this.store.peekAll("oil");
        }),
        actions: {
            enterArchivingCar: function enterArchivingCar() {
                var archive = this.createCarArchive();
                this.set("archivingCar", archive);
                this.set("isCarArchiving", true);
                this.set("isBaseFolded", false);
            },
            saveArchivingCar: function saveArchivingCar() {
                var _this = this;

                var archivingCar = this.get("archivingCar");
                if (archivingCar) {
                    archivingCar.save().then(function () {
                        _this.send("goBack");
                    }, function () {});
                } else {
                    this.set("archivingCar", null);
                    this.set("isCarArchiving", false);
                }
            },
            cancelArchivingCar: function cancelArchivingCar() {
                var archivingCar = this.get("archivingCar");
                this.set("archivingCar", null);
                this.set("isCarArchiving", false);
                this.store.unloadRecord(archivingCar);
            },
            enterRestoreCar: function enterRestoreCar() {
                var restore = this.createCarRestore();
                this.set("restoringCar", restore);
                this.set("isCarRestoring", true);
                this.set("isBaseFolded", false);
            },
            saveRestoringCar: function saveRestoringCar() {
                var _this2 = this;

                var restoringCar = this.get("restoringCar");
                if (restoringCar) {
                    restoringCar.save().then(function () {
                        _this2.send("goBack");
                    }, function () {});
                } else {
                    this.set("restoringCar", null);
                    this.set("isCarRestoring", false);
                }
            },
            cancelRestoringCar: function cancelRestoringCar() {
                var restoringCar = this.get("restoringCar");
                this.set("restoringCar", null);
                this.set("isCarRestoring", false);
                this.store.unloadRecord(restoringCar);
            },
            enterNewInstance: function enterNewInstance() {
                var instance = this.createInstance();
                this.set("creatingInstance", instance);
                this.set("isCreatingInstance", true);
            },
            saveNewInstance: function saveNewInstance() {
                var _this3 = this;

                var creatingInstance = this.get("creatingInstance");
                if (creatingInstance) {
                    creatingInstance.save().then(function () {
                        _this3.send("goBack");
                    }, function () {});
                } else {
                    this.set("creatingInstance", null);
                    this.set("isCreatingInstance", false);
                }
            },
            cancelNewInstance: function cancelNewInstance() {
                var creatingInstance = this.get("creatingInstance");
                this.set("creatingInstance", null);
                this.set("isCreatingInstance", false);
                this.store.unloadRecord(creatingInstance);
            },
            createNewTrace: function createNewTrace() {
                var trace = this.createTrace();
                this.set("creatingTrace", trace);
                this.set("isCreatingTrace", true);
            },
            saveNewTrace: function saveNewTrace() {
                var _this4 = this;

                var creatingTrace = this.get("creatingTrace");
                if (creatingTrace) {
                    creatingTrace.save().then(function () {
                        _this4.store.unloadRecord(creatingTrace);
                        _this4.set("creatingTrace", null);
                        _this4.set("isCreatingTrace", false);
                    }, function () {});
                } else {
                    this.set("creatingTrace", null);
                    this.set("isCreatingTrace", false);
                }
            },
            cancelCreatingTrace: function cancelCreatingTrace() {
                var creatingTrace = this.get("creatingTrace");
                this.set("creatingTrace", null);
                this.set("isCreatingTrace", false);
                this.store.unloadRecord(creatingTrace);
            },
            recaptureTrace: function recaptureTrace() {
                var recapture = this.createRecapture();
                this.set("recapturingTrace", recapture);
                this.set("isRecapturing", true);
            },
            saveRecapturingTrace: function saveRecapturingTrace() {
                var _this5 = this;

                var recapturingTrace = this.get("recapturingTrace");
                if (recapturingTrace) {
                    recapturingTrace.save().then(function () {
                        _this5.store.unloadRecord(recapturingTrace);
                        _this5.set("recapturingTrace", null);
                        _this5.set("isRecapturing", false);
                    }, function () {});
                } else {
                    this.set("recapturingTrace", null);
                    this.set("isRecapturing", false);
                }
            },
            cancelRecapturingTrace: function cancelRecapturingTrace() {
                var recapturingTrace = this.get("recapturingTrace");
                this.set("recapturingTrace", null);
                this.set("isRecapturing", false);
                this.store.unloadRecord(recapturingTrace);
            },
            archiveInstance: function archiveInstance() {
                this.notifyPropertyChange("isArchivable");
                var archive = this.createArchive();
                this.set("archivingInstance", archive);
                this.set("isArchiving", true);
            },
            saveArchivingInstance: function saveArchivingInstance() {
                var _this6 = this;

                var archivingInstance = this.get("archivingInstance");
                if (archivingInstance) {
                    archivingInstance.save().then(function () {
                        _this6.store.unloadRecord(archivingInstance);
                        _this6.set("archivingInstance", null);
                        _this6.set("isArchiving", false);
                    }, function () {});
                } else {
                    this.set("archivingInstance", null);
                    this.set("isArchiving", false);
                }
            },
            cancelArchivingInstance: function cancelArchivingInstance() {
                var archivingInstance = this.get("archivingInstance");
                this.set("archivingInstance", null);
                this.set("isArchiving", false);
                this.store.unloadRecord(archivingInstance);
            },
            forbidInstance: function forbidInstance() {
                var forbid = this.createForbid();
                this.set("forbiddingModel", forbid);
                this.set("isForbidding", true);
            },
            saveForbiddingModel: function saveForbiddingModel() {
                var _this7 = this;

                var forbiddingModel = this.get("forbiddingModel");
                if (forbiddingModel) {
                    forbiddingModel.save().then(function () {
                        _this7.store.unloadRecord(forbiddingModel);
                        _this7.set("forbiddingModel", null);
                        _this7.set("isForbidding", false);
                    }, function () {});
                } else {
                    this.set("forbiddingModel", null);
                    this.set("isForbidding", false);
                }
            },
            cancelForbidding: function cancelForbidding() {
                var forbiddingModel = this.get("forbiddingModel");
                this.set("forbiddingModel", null);
                this.set("isForbidding", false);
                this.store.unloadRecord(forbiddingModel);
            },
            enableInstance: function enableInstance() {
                var enable = this.createEnable();
                this.set("enablingModel", enable);
                this.set("isEnabling", true);
            },
            saveEnablingModel: function saveEnablingModel() {
                var _this8 = this;

                var enablingModel = this.get("enablingModel");
                if (enablingModel) {
                    enablingModel.save().then(function () {
                        _this8.store.unloadRecord(enablingModel);
                        _this8.set("enablingModel", null);
                        _this8.set("isEnabling", false);
                    }, function () {});
                } else {
                    this.set("enablingModel", null);
                    this.set("isEnabling", false);
                }
            },
            cancelEnabling: function cancelEnabling() {
                var enablingModel = this.get("enablingModel");
                this.set("enablingModel", null);
                this.set("isEnabling", false);
                this.store.unloadRecord(enablingModel);
            },
            abortInstance: function abortInstance() {
                var abort = this.createAbort();
                this.set("abortingModel", abort);
                this.set("isAborting", true);
            },
            saveAbortingModel: function saveAbortingModel() {
                var _this9 = this;

                var abortingModel = this.get("abortingModel");
                if (abortingModel) {
                    abortingModel.save().then(function () {
                        _this9.store.unloadRecord(abortingModel);
                        _this9.set("abortingModel", null);
                        _this9.set("isAborting", false);
                    }, function () {});
                } else {
                    this.set("abortingModel", null);
                    this.set("isAborting", false);
                }
            },
            cancelAborting: function cancelAborting() {
                var abortingModel = this.get("abortingModel");
                this.set("abortingModel", null);
                this.set("isAborting", false);
                this.store.unloadRecord(abortingModel);
            },
            checkInstance: function checkInstance() {
                if (this.get("isUnCheckable")) {
                    return;
                }
                var check = this.createCheck();
                this.set("checkingModel", check);
                this.set("isChecking", true);
            },
            saveCheckingModel: function saveCheckingModel() {
                var _this10 = this;

                var checkingModel = this.get("checkingModel");
                if (checkingModel) {
                    checkingModel.save().then(function () {
                        _this10.store.unloadRecord(checkingModel);
                        _this10.set("checkingModel", null);
                        _this10.set("isChecking", false);
                    }, function () {});
                } else {
                    this.set("checkingModel", null);
                    this.set("isChecking", false);
                }
            },
            cancelChecking: function cancelChecking() {
                var checkingModel = this.get("checkingModel");
                this.set("checkingModel", null);
                this.set("isChecking", false);
                this.store.unloadRecord(checkingModel);
            },
            setProject: function setProject(target, project) {
                target.set("project", project);
                target.notifyPropertyChange("isRelationshipsChanged");
                this.set("isPickUpPopActive", false);
            },
            setDepartment: function setDepartment(target, department) {
                target.set("department", department);
                target.notifyPropertyChange("isRelationshipsChanged");
                this.set("isPickUpPopActive", false);
            },
            checkOil: function checkOil(_ref) {
                var target = _ref.target;
                var value = _ref.value;
                var isChecked = _ref.isChecked;

                if (isChecked) {
                    target.get("oils").pushObject(value);
                } else {
                    target.get("oils").removeObject(value);
                }
                target.notifyPropertyChange("isRelationshipsChanged");
            },
            setProjectForInstance: function setProjectForInstance(project) {
                var target = this.get("creatingInstance");
                this.send("setProject", target, project);
            },
            setDepartmentForInstance: function setDepartmentForInstance(department) {
                var target = this.get("creatingInstance");
                this.send("setDepartment", target, department);
            },
            checkOilForInstance: function checkOilForInstance(_ref2) {
                var value = _ref2.value;
                var isChecked = _ref2.isChecked;

                var target = this.get("creatingInstance");
                this.send("checkOil", { target: target, value: value, isChecked: isChecked });
            },
            setProjectForTrace: function setProjectForTrace(project) {
                var target = this.get("creatingTrace");
                this.send("setProject", target, project);
            },
            setDepartmentForTrace: function setDepartmentForTrace(department) {
                var target = this.get("creatingTrace");
                this.send("setDepartment", target, department);
            },
            checkOilForTrace: function checkOilForTrace(_ref3) {
                var value = _ref3.value;
                var isChecked = _ref3.isChecked;

                var target = this.get("creatingTrace");
                this.send("checkOil", { target: target, value: value, isChecked: isChecked });
            },
            fodeInstance: function fodeInstance() {
                var _this11 = this;

                _ember["default"].run.next(function () {
                    _this11.set("selection", null);
                });
            },
            unfodeInstance: function unfodeInstance(instance) {
                this.set("selection", instance);
            },
            setIsApproved: function setIsApproved(value) {
                this.set("isApproved", value);
            }
        }
    });
});
define("htis/mixins/instance-detail/new-route", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({
        // controllerName: 'manage.releases.release',
        // statusName:'isReleased',
        actions: {
            didTransition: function didTransition() {
                var controller = this.controller;
                if (this.statusName === "isSearch" || controller.get("model." + this.statusName)) {
                    controller.send("enterNewInstance");
                    return true;
                } else {
                    this.send("goBack");
                }
            },
            willTransition: function willTransition(transition) {
                var controller = this.controller;
                controller.set("confirmCancelTransition", null);
                controller.set("isConfirmingCancel", false);
                if (controller.get("isConfirmed")) {
                    controller.set("isConfirmed", false);
                    controller.send("cancelNewInstance");
                    return true;
                } else if (controller.get("creatingInstance.isNew") && this.controllerFor("manage").get("isPowered")) {
                    this.controller.send("showCancelConfirm", transition);
                    transition.abort();
                } else {
                    controller.send("cancelNewInstance");
                    return true;
                }
            },
            goBack: function goBack() {
                this.transitionTo(this.controllerName);
            }
        }
    });
});
define("htis/mixins/instance-detail/restore-car-route", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({
        // controllerName: 'manage.archives.archive',
        actions: {
            didTransition: function didTransition() {
                var controller = this.controller;
                if (controller.get("model.is_archived")) {
                    controller.send("enterRestoreCar");
                    return true;
                } else {
                    this.send("goBack");
                }
            },
            willTransition: function willTransition(transition) {
                var controller = this.controller;
                controller.set("confirmCancelTransition", null);
                controller.set("isConfirmingCancel", false);
                if (controller.get("isConfirmed")) {
                    controller.set("isConfirmed", false);
                    controller.send("cancelRestoringCar");
                    return true;
                } else if (controller.get("restoringCar.isNew")) {
                    this.controller.send("showCancelConfirm", transition);
                    transition.abort();
                } else {
                    controller.send("cancelRestoringCar");
                    return true;
                }
            },
            goBack: function goBack() {
                this.transitionTo(this.controllerName);
            }
        }
    });
});
define("htis/mixins/instance-detail/route", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({
        actions: {
            willTransition: function willTransition(transition) {
                var controller = this.controller;
                controller.set("confirmCancelTransition", null);
                if (controller.get("isConfirmed")) {
                    controller.set("isConfirmed", false);
                    if (controller.get("isCreatingTrace")) {
                        controller.send("cancelCreatingTrace");
                    } else if (controller.get("isRecapturing")) {
                        controller.send("cancelRecapturingTrace");
                    } else if (controller.get("isChecking")) {
                        controller.send("cancelChecking");
                    } else if (controller.get("isForbidding")) {
                        controller.send("cancelForbidding");
                    } else if (controller.get("isEnabling")) {
                        controller.send("cancelEnabling");
                    } else if (controller.get("isAborting")) {
                        controller.send("cancelAborting");
                    } else if (controller.get("isArchiving")) {
                        controller.send("cancelArchivingInstance");
                    }
                    controller.set("isConfirmingCancel", false);
                    return this._super();
                } else if (controller.get("isCreatingTrace") || controller.get("isRecapturing") || controller.get("isChecking") || controller.get("isForbidding") || controller.get("isEnabling") || controller.get("isAborting") || controller.get("isArchiving")) {
                    controller.send("showCancelConfirm", transition);
                    transition.abort();
                } else {
                    return this._super();
                }
            },
            goCarArchive: function goCarArchive() {
                var routeName = this.controller.get("routeName");
                this.transitionTo(routeName + ".archive");
            },
            goCarRestore: function goCarRestore() {
                var routeName = this.controller.get("routeName");
                this.transitionTo(routeName + ".restore");
            },
            goNewInstance: function goNewInstance() {
                var routeName = this.controller.get("routeName");
                this.transitionTo(routeName + ".newinstance");
            }
        }
    });
});
define('htis/mixins/instance-list/controller', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _ember['default'].Mixin.create({
        isCloudList: false,
        createdDateSorting: ['created_date:asc', 'id'],
        createdDateSortingDesc: ['created_date:desc', 'id'],
        modifiedDateSortingDesc: ['modified_date:desc'],
        isSearching: false,
        errorsForInstances: _emberData['default'].Errors.create(),
        isSearchingTraces: false,
        errorsForTraces: _emberData['default'].Errors.create(),
        lastId: 0,
        isMoreButtonNeeded: false,
        isToShowAll: false,
        topCount: 20,
        pageCount: 20,
        selection: null,
        selectionDidChange: _ember['default'].observer("selection", function () {
            var instance = this.get("selection");
            if (instance) {
                //如果没有traces说明申请单从已归档状态，需要从服务器加载其全部履历
                if (instance.get("traces.length") === 0) {
                    this.send("fetchTraces", instance);
                }
            }
        }),
        allArrangedResult: _ember['default'].computed.sort('model.instances', 'modifiedDateSortingDesc'),
        arrangedResult: _ember['default'].computed("allArrangedResult", "isToShowAll", function () {
            var _this = this;

            var allArrangedResult = this.get("allArrangedResult"),
                isToShowAll = this.get("isToShowAll");
            if (isToShowAll) {
                return allArrangedResult;
            } else {
                var _ret = (function () {
                    var topCount = _this.get("topCount");
                    return {
                        v: allArrangedResult.filter(function (item, index) {
                            return index < topCount;
                        })
                    };
                })();

                if (typeof _ret === 'object') return _ret.v;
            }
        }),
        isTopButtonNeeded: _ember['default'].computed("isToShowAll", "allArrangedResult.length", function () {
            //只要列表个数超过topCount则需要切换按钮
            return this.get("allArrangedResult.length") > this.get("topCount");
        }),
        isCloudListDidChange: _ember['default'].observer("isCloudList", function () {
            this.set("lastId", 0);
            this.set("isMoreButtonNeeded", false);
            var isCloudList = this.get("isCloudList");
            this.get("errorsForInstances").clear();
            if (isCloudList) {
                this.send("fetchArchivedInstances");
            } else {
                this.send("unloadArchivedInstances");
            }
        }),
        actions: {
            // unloadArchivedInstances(){
            //     let store = this.store;
            //     let car = this.get("model");
            //     //因为car的instances属性是靠ember-data的DS.hasMany自动计算的，
            //     //所以store.unloadRecord会触发这里的forEach函数内部索引异常造成
            //     //instance可能为undefined的情况（即被unloadRecord移除了），
            //     //所以这里一定要先把is_archived属性为true的全部筛选出来(保证所有instance都需要unloadRecord)，
            //     //然后再forEach，否则其中有任何跳过unloadRecord函数都会出现forEach异常的
            //     let instances = car.get("instances").filterBy("is_archived",true);
            //     let traces;
            //     instances.forEach((instance)=>{
            //         traces = instance.get("traces");
            //         traces.forEach((trace)=>{
            //             store.unloadRecord(trace);
            //         });
            //         store.unloadRecord(instance);
            //     });
            //     car.notifyPropertyChange("instances");
            // },
            unloadArchivedInstances: function unloadArchivedInstances() {
                var store = this.store;
                var car = this.get("model");
                car.get("instances").forEach(function (instance) {
                    if (instance.get("is_archived")) {
                        instance.get("traces").forEach(function (trace) {
                            store.unloadRecord(trace);
                        });
                        store.unloadRecord(instance);
                    }
                });
                car.notifyPropertyChange("instances");
            },
            fetchArchivedInstances: function fetchArchivedInstances() {
                var _this2 = this;

                var car = this.get("model");
                var pageCount = this.get("pageCount");
                var lastId = this.get("lastId");
                this.get("errorsForInstances").remove('server_side_error');
                this.set("isSearching", true);
                this.store.query('instance', {
                    count: pageCount,
                    car: car.get("id"),
                    lastId: lastId
                }).then(function (answer) {
                    var instances = answer.toArray();
                    if (instances.length > 0) {
                        var minId = instances.mapBy("id").sort(function (a, b) {
                            return parseInt(a) - parseInt(b);
                        }).get("firstObject");
                        _this2.set("lastId", minId);
                    }
                    if (instances.length < pageCount) {
                        _this2.set("isMoreButtonNeeded", false);
                    } else {
                        _this2.set("isMoreButtonNeeded", true);
                    }
                    car.notifyPropertyChange("instances");
                    _this2.set("isSearching", false);
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "该资源不存在或网络繁忙，请稍候再试";
                    }
                    var recordErrors = _this2.get("errorsForInstances");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this2.set("isSearching", false);
                });
            },
            fetchNext: function fetchNext() {
                this.set("isToShowAll", true);
                this.send("fetchArchivedInstances");
            },
            toggleToShowAll: function toggleToShowAll() {
                this.toggleProperty("isToShowAll");
            },
            toggleCloudList: function toggleCloudList() {
                this.toggleProperty("isCloudList");
            },
            fetchTraces: function fetchTraces(instance) {
                var _this3 = this;

                this.get("errorsForTraces").remove('server_side_error');
                this.set("isSearchingTraces", true);
                this.store.query('trace', {
                    instance: instance.get("id")
                }).then(function () {
                    instance.notifyPropertyChange("traces");
                    _this3.set("isSearchingTraces", false);
                }, function (reason) {
                    var error = reason.errors.objectAt(0);
                    var errorMsg = "";
                    if (reason.errors) {
                        errorMsg = error.detail;
                    } else {
                        errorMsg = "该资源不存在或网络繁忙，请稍候再试";
                    }
                    var recordErrors = _this3.get("errorsForTraces");
                    recordErrors.add(_ember['default'].String.underscore("ServerSideError"), errorMsg);
                    _this3.set("isSearchingTraces", false);
                });
            }
        }
    });
});
define("htis/mixins/instance-list/route", ["exports", "ember"], function (exports, _ember) {
	exports["default"] = _ember["default"].Mixin.create({
		actions: {
			willTransition: function willTransition() {
				var controller = this.controller;
				controller.set("isCloudList", false);
				//加这段的原因是，刚归档（结束）一个申请单，如果不执行下面的操作，这个申请单将处理未unload的状态
				//（原因归档操作的response及一次changeset都会让申请单从unload变成非unload状态），所以这里需要再执行一次
				//以确保刚归档的申请单不会再次无故出现在申请单列表
				controller.get("model").notifyPropertyChange("instances");
				controller.send("unloadArchivedInstances");
				return this._super();
			}
		}
	});
});
define("htis/mixins/manage-cars/controller", ["exports", "ember"], function (exports, _ember) {
  exports["default"] = _ember["default"].Mixin.create({
    isFiltered: false,
    actions: {
      filter: function filter() {
        this.toggleProperty("isFiltered");
      }
    }
  });
});
define("htis/mixins/navigable-pane/controller", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Mixin.create({
        isActive: false,
        isBack: false,
        isHide: false,
        // runLaterForHide:null,
        isPickUpPopActive: false,
        // isBackDidChange:Ember.observer("isBack",function(){
        //     //退出后要把div隐藏来减少内存消耗
        //     if(this.get("isBack")){
        //         if(Ember.$.support.transition){
        //             Ember.run.cancel(this.runLaterForHide);
        //             this.runLaterForHide = Ember.run.later(()=>{
        //                 if(this.get("isBack")){
        //                     this.set("isHide",true);
        //                 }
        //             },3000);
        //         }
        //         else{
        //             this.set("isHide",true);
        //         }
        //     }
        // }),
        actions: {
            clearPop: function clearPop() {
                this.set("isPickUpPopActive", false);
            }
        }
    });
});
define('htis/mixins/navigable-pane/route', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Mixin.create({
        controllerName: '', //start.scanning
        parentControllerName: "", //start
        // activate(){
        //     let controller = this.controllerFor(this.controllerName);
        //     let p_controller = this.controllerFor(this.parentControllerName);
        //     if(Ember.$.support.transition){
        //         Ember.run.next(()=>{
        //             //这里要加later的原因是有时next执行得太快没有动画效果
        //             // Ember.run.later(()=>{
        //                 controller.set("isActive",true);
        //                 p_controller.set("isBack",true);
        //             // },100);
        //         });
        //     }
        //     else{
        //         controller.set("isActive",true);
        //         p_controller.set("isBack",true);
        //     }
        //     return this;
        // },
        // deactivate(){
        //     let controller = this.controller;
        //     let p_controller = this.controllerFor(this.parentControllerName);
        //     controller.set("isActive",false);
        //     p_controller.set("isHide",false);
        //     Ember.run.next(()=>{
        //         p_controller.set("isBack",false);
        //     });
        //     return this;
        // },
        activate: function activate() {
            var parentControllerName = this.get("parentControllerName");
            if (parentControllerName) {
                var p_controller = this.controllerFor(parentControllerName);
                p_controller.set("isBack", true);
            }
            return this;
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            controller.set("isActive", false);
            var parentControllerName = this.get("parentControllerName");
            if (parentControllerName) {
                var p_controller = this.controllerFor(parentControllerName);
                p_controller.set("isBack", false);
            }
            return this;
        },
        actions: {
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
            }
        }
    });
});
define('htis/mixins/standard-detail/controller', ['exports', 'ember', 'htis/mixins/fit-pane/controller'], function (exports, _ember, _htisMixinsFitPaneController) {
    exports['default'] = _ember['default'].Mixin.create(_htisMixinsFitPaneController['default'], {
        routeName: "", //setting.roles.role
        applicationController: _ember['default'].inject.controller('application'),
        sessionController: _ember['default'].inject.controller('session'),
        parentController: null,
        parentRouteName: "",
        equipment: _ember['default'].inject.service('equipment'),
        modelTitle: "", //角色
        pannelTitle: _ember['default'].computed('isEditing', 'isNew', function () {
            if (this.get('isNew')) {
                return '新建' + this.get("modelTitle");
            } else if (this.get('isEditing')) {
                return '修改' + this.get("modelTitle") + '信息';
            } else {
                return this.get("modelTitle") + '信息';
            }
        }),
        confirmingCancelMsg: _ember['default'].computed('isNew', function () {
            if (this.get('isNew')) {
                return "确定要放弃新建记录吗？";
            } else {
                return "记录已被修改，确定要放弃修改吗？";
            }
        }),
        isActive: false,
        isBack: false,
        isEditing: false,
        isNew: false,
        isPicking: false,
        isPickUpPopActive: false,
        isConfirmingCancel: false,
        isConfirmingDelete: false,
        isPickingCustomizedMsg: false,
        customizedMsg: "",
        isConfirmed: false,
        isPickingError: false,
        confirmCancelTransition: null,
        // runLaterForHide:null,
        // isBackDidChange:Ember.observer("isBack",function(){
        //     //退出后要把div隐藏来减少内存消耗
        //     if(this.get("isBack")){
        //         if(Ember.$.support.transition){
        //             Ember.run.cancel(this.runLaterForHide);
        //             this.runLaterForHide = Ember.run.later(()=>{
        //                 if(this.get("isBack")){
        //                     this.set("isHide",true);
        //                 }
        //             },3000);
        //         }
        //         else{
        //             this.set("isHide",true);
        //         }
        //     }
        // }),
        // equipmentIsXsDidChange:Ember.observer("equipment.isXs",function(){
        //     //当浏览器大小在手机模式与非手机模式中变换时需要做调整来自动适应布局
        //     if(this.get("equipment.isXs")){
        //         let currentRouteName = this.target.currentRouteName;
        //         let isChildRoute = currentRouteName.indexOf(this.parentRouteName) >= 0 && currentRouteName !== `${this.parentRouteName}.index`;
        //         if(isChildRoute && !this.get("parentController.isBack")){
        //             this.set("parentController.isBack",true);
        //         }
        //     }
        //     else{
        //         if(this.get("parentController.isBack")){
        //             this.set("parentController.isHide",false);
        //             this.set("parentController.isBack",false);
        //         }
        //     }
        // }),
        currentStateName: _ember['default'].computed.oneWay("model.currentState.stateName"),
        afterRecordIsDeleted: _ember['default'].observer("currentStateName", function () {
            //当记录被删除时，返回上一个界面，这里的删除包括当前用户删除及从服务器中push过来的删除
            var currentStateName = this.get("currentStateName");
            if (currentStateName === "root.deleted.saved") {
                var currentRouteName = this.get("applicationController.currentRouteName");
                if (currentRouteName === this.routeName + '.index' || currentRouteName === this.routeName + '.edit' || currentRouteName === this.routeName + '.edit.index') {
                    this.send("goBack");
                }
            }
        }),
        isNeedToShowFix: _ember['default'].computed('isNew', 'isEditing', function () {
            return !(this.get("isNew") || this.get("isEditing"));
        }),
        isServerSideErrorDidChange: _ember['default'].observer("model.errors.server_side_error.length", function () {
            if (this.get("model.errors.server_side_error.length")) {
                this.set("isPickingError", true);
            }
        }),
        actions: {
            edit: function edit() {
                this.send("goEdit");
            },
            save: function save() {
                var _this = this;

                var currentUser = this.get("sessionController.user");
                this.set("model.modifier", currentUser);
                var isNew = this.get("isNew");
                this.get('model').save().then(function () {
                    if (isNew) {
                        _this.send("goBack");
                    } else {
                        _this.send("goIndex");
                    }
                }, function () {});
            },
            showCancelConfirm: function showCancelConfirm(transition) {
                this.set("confirmCancelTransition", transition);
                this.set("isConfirmingCancel", true);
            },
            cancel: function cancel() {
                var confirmCancelTransition = this.get("confirmCancelTransition");
                if (confirmCancelTransition) {
                    confirmCancelTransition.retry();
                } else if (this.get("isNew")) {
                    this.send("goBack");
                } else {
                    this.send("goIndex");
                }
            },
            doCancel: function doCancel(isDo) {
                this.set("isPickUpPopActive", false); //该属性会自动同步isConfirmingCancel为False
                // this.set("isConfirmingCancel",false);
                this.set("isConfirmed", isDo);
                if (isDo) {
                    this.send("cancel");
                } else {
                    this.set("confirmCancelTransition", null);
                }
            },
            'delete': function _delete() {
                this.set("isConfirmingDelete", true);
            },
            doDelete: function doDelete(isDo) {
                if (isDo) {
                    //这里不可以通过isPickUpPopActive来同步，因为记录被删除后同步属性会报错
                    this.set("isConfirmingDelete", false);
                    this.get("model").deleteRecord();
                    this.get("model").save().then(function () {}, function () {});
                } else {
                    this.set("isPickUpPopActive", false); //该属性会自动同步isConfirmingDelete为False
                }
            },
            clearPop: function clearPop() {
                this.set("isPickUpPopActive", false);
            },
            clearError: function clearError(model) {
                this.set("isPickUpPopActive", false);
                model.get("errors").remove("server_side_error");
            }
        }
    });
});
define('htis/mixins/standard-detail/edit-route', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Mixin.create({
        controllerName: '', //setting.roles.role
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isEditing", true);
            controller.set("isNew", false);
            return this;
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            controller.set("isEditing", false);
            controller.set("isNew", false);
            var model = controller.get("model");
            //这里要增加删除的判断，是因为如果该记录被其他用户删除然后push过来的话，rollbackAttributes会把删除的记录撤销
            if (model && !model.get("isDeleted")) {
                model.rollbackAttributes();
            }
            return this;
        },
        actions: {
            willTransition: function willTransition(transition) {
                var controller = this.get("controller");
                controller.set("confirmCancelTransition", null);
                controller.set("isConfirmingCancel", false);
                if (controller.get("isConfirmed")) {
                    controller.set("isConfirmed", false);
                    return true;
                } else if (controller.get("model.hasDirtyAttributes") && !controller.get("model.isDeleted")) {
                    //这里要判断isDeleted，是因为changeset给push过来的删除记录hasDirtyAttributes为true
                    controller.send("showCancelConfirm", transition);
                    transition.abort();
                } else {
                    return true;
                }
            },
            goIndex: function goIndex() {
                this.transitionTo(this.controllerName);
            }
        }
    });
});
define('htis/mixins/standard-detail/new-route', ['exports', 'ember', 'htis/mixins/fit-pane/route'], function (exports, _ember, _htisMixinsFitPaneRoute) {
    exports['default'] = _ember['default'].Mixin.create(_htisMixinsFitPaneRoute['default'], {
        controllerName: '', //setting.roles.role
        parentControllerName: "", //setting.roles
        renderTemplate: function renderTemplate(controller) {
            this.render(this.controllerName, { controller: controller });
        },
        model: function model() {
            return this.controllerFor(this.parentControllerName).createRecord();
        },
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isEditing", true);
            controller.set("isNew", true);
            controller.set("isConfirmingCancel", false);
            return this._super();
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            controller.set("isEditing", false);
            controller.set("isNew", false);
            controller.set("isConfirmingCancel", false);
            var model = controller.get("model");
            if (model) {
                model.rollbackAttributes();
            }
            return this._super();
        },
        actions: {
            willTransition: function willTransition(transition) {
                this.set("controller.confirmCancelTransition", null);
                if (this.get("controller.isConfirmed")) {
                    this.set("controller.isConfirmed", false);
                    return true;
                } else if (this.get("controller.model.hasDirtyAttributes")) {
                    this.controller.send("showCancelConfirm", transition);
                    transition.abort();
                } else {
                    return true;
                }
            },
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
            }
        }
    });
});
define('htis/mixins/standard-detail/route', ['exports', 'ember', 'htis/mixins/fit-pane/route'], function (exports, _ember, _htisMixinsFitPaneRoute) {
    exports['default'] = _ember['default'].Mixin.create(_htisMixinsFitPaneRoute['default'], {
        modelName: "", //role
        controllerName: '', //setting.roles.role
        parentControllerName: "", //setting.roles
        model: function model(params) {
            var curId = params['id'];
            var record = this.store.peekRecord(this.modelName, curId);
            if (!record && curId.indexOf("fixture") === 0) {
                //如果没有找到记录，并且是fixture开头的新记录则创建一个新记录来匹配
                return this.controllerFor(this.parentControllerName).createRecord();
            } else {
                //注意，这里如果没有找到记录，并且不是fixture开头的新记录，将返回null
                return record;
            }
        },
        afterModel: function afterModel(model, transition) {
            if (!model) {
                transition.send("goBack");
            }
        },
        activate: function activate() {
            return this._super();
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            controller.set("isConfirmingDelete", false);
            controller.set("isConfirmingCancel", false);
            controller.set("isPickingError", false);
            controller.set("isPickingCustomizedMsg", false);
            return this._super();
        },
        actions: {
            didTransition: function didTransition() {
                var controller = this.controller;
                var p_controller = this.controllerFor(this.parentControllerName);
                p_controller.set("selection", controller.get("model"));
            },
            willTransition: function willTransition() {
                var p_controller = this.controllerFor(this.parentControllerName);
                p_controller.set("selection", null);
                var controller = this.controller;
                //删除数据失败需要还原
                var model = controller.get("model");
                if (model) {
                    model.rollbackAttributes();
                }
            },
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
            },
            goEdit: function goEdit() {
                this.transitionTo(this.controllerName + '.edit');
            }
        }
    });
});
define('htis/mixins/standard-list/controller', ['exports', 'ember', 'htis/mixins/fit-pane/controller'], function (exports, _ember, _htisMixinsFitPaneController) {
    exports['default'] = _ember['default'].Mixin.create(_htisMixinsFitPaneController['default'], {
        modelName: "", //role
        routeName: "", //setting.roles
        modelTitle: "", //角色
        sessionController: _ember['default'].inject.controller('session'),
        parentController: _ember['default'].inject.controller('setting'),
        parentRouteName: "setting",
        selection: null,
        pannelTitle: _ember['default'].computed(function () {
            return this.modelTitle + '管理';
        }),
        // sortProperties: ['created_date','id'],
        // sortAscending: true,
        createdDateSorting: ['created_date:asc', 'id'],
        createdDateSortingDesc: ['created_date:desc', 'id'],
        modifiedDateSortingDesc: ['modified_date:desc'],
        isSearching: false,
        isMoreButtonNeeded: false,
        isToShowAll: false,
        topCount: 20,
        pageCount: 20,
        allArrangedResult: _ember['default'].computed.sort('filteredResult', 'createdDateSorting'),
        arrangedResult: _ember['default'].computed("allArrangedResult", "isToShowAll", function () {
            var _this = this;

            var allArrangedResult = this.get("allArrangedResult"),
                isToShowAll = this.get("isToShowAll");
            if (isToShowAll) {
                return allArrangedResult;
            } else {
                var _ret = (function () {
                    var topCount = _this.get("topCount");
                    return {
                        v: allArrangedResult.filter(function (item, index) {
                            return index < topCount;
                        })
                    };
                })();

                if (typeof _ret === 'object') return _ret.v;
            }
        }),
        isTopButtonNeeded: _ember['default'].computed("isToShowAll", "allArrangedResult.length", function () {
            //只要列表个数超过topCount则需要切换按钮
            return this.get("allArrangedResult.length") > this.get("topCount");
        }),
        searchKey: "",
        filteredResult: _ember['default'].computed("model.@each.searchKeys", "searchKey", function () {
            // this.set("isToShowAll",false);//搜索关键字变更后要重置isToShowAll值，以默认只显示最新topCount个记录
            var searchKey = this.get("searchKey").toLowerCase();
            searchKey = searchKey.replace(/\\/g, "");
            var arrangedContent = this.get("model.arrangedContent");
            if (!arrangedContent) {
                return [];
            }
            if (searchKey) {
                return arrangedContent.mapBy("record").filter(function (item) {
                    return item.get("searchKeys").find(function (key) {
                        return key.search(searchKey) >= 0;
                    });
                });
            } else {
                return arrangedContent.mapBy("record");
            }
        }),
        createRecord: function createRecord() {
            var currentUser = this.get("sessionController.user");
            var car = this.store.createRecord(this.modelName, {
                name: '新' + this.modelTitle,
                description: '',
                creater: currentUser,
                created_date: new Date(),
                modifier: currentUser,
                modified_date: new Date()
            });
            return car;
        },
        actions: {}
    });
});
define('htis/mixins/standard-list/route', ['exports', 'ember', 'htis/mixins/fit-pane/route'], function (exports, _ember, _htisMixinsFitPaneRoute) {
    exports['default'] = _ember['default'].Mixin.create(_htisMixinsFitPaneRoute['default'], {
        modelName: "", //role
        controllerName: '', //setting.roles
        parentControllerName: "", //setting
        model: function model() {
            return this.store.peekAll(this.modelName);
        },
        activate: function activate() {
            var p_controller = this.controllerFor(this.parentControllerName);
            p_controller.set('selection', this.modelName + 's');
            return this._super();
        },
        deactivate: function deactivate() {
            var p_controller = this.controllerFor(this.parentControllerName);
            p_controller.set('selection', null);
            return this._super();
        },
        actions: {
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
            },
            goNew: function goNew() {
                this.transitionTo(this.controllerName + '.new');
            },
            goItem: function goItem(item) {
                this.transitionTo(this.controllerName + '.' + this.modelName, item);
            }
        }
    });
});
define('htis/models/accountpwd', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].Model.extend({
        user: _emberData['default'].belongsTo('user'),
        old_password: _emberData['default'].attr('string'),
        new_password: _emberData['default'].attr('string'),
        confirm_password: _emberData['default'].attr('string'),
        oldPasswordDidChange: _ember['default'].observer('old_password', function () {
            var old_password = this.get("old_password");
            if (this.get("hasDirtyAttributes")) {
                if (_ember['default'].isEmpty(old_password)) {
                    this.get('errors').add('old_password', '不能为空');
                }
            }
        }),
        newPasswordDidChange: _ember['default'].observer('new_password', function () {
            var new_password = this.get("new_password");
            if (this.get("hasDirtyAttributes")) {
                if (_ember['default'].isEmpty(new_password)) {
                    this.get('errors').add('new_password', '不能为空');
                }
                // else if(!window.HOJS.lib.valiPasswordValue(new_password)){
                //     this.get('errors').add('new_password', '以字母开头，长度在6~16之间，只能包含字符、数字和下划线');
                // }
            }
        }),
        confirmPasswordDidChange: _ember['default'].observer('confirm_password', function () {
            var confirm_password = this.get("confirm_password"),
                new_password = this.get("new_password");
            if (this.get("hasDirtyAttributes")) {
                if (_ember['default'].isEmpty(confirm_password)) {
                    this.get('errors').add('confirm_password', '不能为空');
                } else if (new_password !== confirm_password) {
                    this.get('errors').add('confirm_password', '两次输入的密码必须相同');
                }
            }
        })
    });
});
define('htis/models/bill', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].Model.extend({
        car: _emberData['default'].belongsTo('car', { async: true, inverse: null }),
        instance: _emberData['default'].belongsTo('instance', { async: true }),
        project: _emberData['default'].belongsTo('project', { async: false }),
        department: _emberData['default'].belongsTo('department', { async: false }),
        oil: _emberData['default'].belongsTo('oil', { async: false }),
        volume: _emberData['default'].attr('number'),
        mileage: _emberData['default'].attr('number'),
        driver_name: _emberData['default'].attr('string', { defaultValue: "" }),
        signature: _emberData['default'].belongsTo('signature', { async: true }), //签字
        // signature: DS.attr('string',{ defaultValue: "" }),//签字id
        previous_oil: _emberData['default'].belongsTo('oil', { async: false }),
        rate: _emberData['default'].attr('number', { defaultValue: 0 }),
        oiler: _emberData['default'].belongsTo('user', { async: false, inverse: null }), //加油工
        time: _emberData['default'].attr('date'),
        is_lost: _emberData['default'].attr('boolean', { defaultValue: false }),
        is_printed: _emberData['default'].attr('boolean', { defaultValue: false }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        volumeDidChange: _ember['default'].observer('volume', function () {
            var volume = this.get("volume");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(volume)) {
                    this.get('errors').add('volume', '请输入合法数值');
                } else if (volume === 0) {
                    this.get('errors').add('volume', '请输入大于0的数值');
                } else if (volume && /^[-]\d+([.]\d{0,})?$/.test(volume)) {
                    this.get('errors').add('volume', '不允许负数');
                } else if (volume && volume.toString().split(".")[0].length > 3) {
                    this.get('errors').add('volume', '输入整数位过多');
                } else if (volume && /^\d+[.]\d{3,}$/.test(volume)) {
                    this.get('errors').add('volume', '输入小数位过多');
                }
            }
        }),
        mileageDidChange: _ember['default'].observer('mileage', function () {
            var mileage = this.get("mileage");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(mileage)) {
                    this.get('errors').add('mileage', '请输入合法数值');
                } else if (mileage === 0) {
                    this.get('errors').add('mileage', '请输入大于0的数值');
                } else if (mileage && /^[-]\d+([.]\d{0,})?$/.test(mileage)) {
                    this.get('errors').add('mileage', '不允许负数');
                } else if (mileage && /^\d+[.]\d{3,}$/.test(mileage)) {
                    this.get('errors').add('mileage', '输入小数位过多');
                }
            }
        }),
        // driverNameDidChange:Ember.observer('driver_name', function() {
        //     let driver_name = this.get("driver_name");
        //     if(this.get("hasDirtyAttributes") && !this.get("isDeleted")){
        //         driver_name = driver_name.trim();
        //         if(Ember.isEmpty(driver_name)){
        //             this.get('errors').add('driver_name', '不能为空');
        //         }
        //         else if(driver_name.length > 20){
        //             this.get('errors').add('driver_name', '长度不能超过20字符');
        //         }
        //     }
        // }),
        oilerDidChange: _ember['default'].observer('oiler', function () {
            var oiler = this.get("oiler");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(oiler)) {
                    this.get('errors').add('oiler', '不能为空');
                } else {
                    this.get('errors').remove('oiler');
                }
            }
        }),
        timeDidChange: _ember['default'].observer('time', function () {
            var time = this.get("time");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(time)) {
                    this.get('errors').add('time', '加油时间不能为空');
                } else if (time instanceof Date) {
                    if (time.toString().indexOf("Invalid") >= 0) {
                        this.get('errors').add('time', '时间格式不正确，请输入类似:2016-06-03 12:23格式的合法时间值');
                    } else {
                        this.get('errors').remove('time');
                    }
                } else {
                    this.get('errors').add('time', '时间格式不正确，请输入类似:2016-06-03 12:23格式的合法时间值');
                }
            }
        }),
        rateColor: _ember['default'].computed("rate", "previous_oil.yellow_rate", "previous_oil.red_rate", function () {
            var rate = this.get("rate");
            var yellow_rate = this.get("previous_oil.yellow_rate");
            var red_rate = this.get("previous_oil.red_rate");
            if (rate < 0) {
                return "danger";
            }
            if (rate && yellow_rate && red_rate) {
                if (rate > red_rate) {
                    return "danger";
                } else if (rate > yellow_rate) {
                    return "warning";
                } else {
                    return "success";
                }
            } else {
                return "muted";
            }
        }),
        computeRate: function computeRate() {
            var mileage = this.get("mileage");
            // let lastVolume = this.get("car.last_volume");
            var lastVolume = this.get("volume"); //油耗计算方法客户觉得用当前加油量作为分子，而不是上一次加油量
            var lastMileage = this.get("car.last_mileage");
            if (lastVolume > 0 && lastMileage > 0) {
                var rate = 0;
                if (mileage - lastMileage === 0) {
                    //两次里程数相同就设置为-999来标记
                    rate = -999;
                } else {
                    rate = window.HOJS.lib.accDiv(lastVolume, mileage - lastMileage) * 100;
                    rate = window.HOJS.lib.deci(rate, 2); //四舍五入到2位小数
                }
                this.set("rate", rate);
            }
        }
    });
});
define('htis/models/car', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        tagForInstances: 1,
        isOwnNotifyTag: false,
        number: _emberData['default'].attr('string'),
        vin: _emberData['default'].attr('string'),
        model: _emberData['default'].attr('string', { defaultValue: '' }),
        is_archived: _emberData['default'].attr('boolean', { defaultValue: false }),
        instance_count: _emberData['default'].attr('number', { defaultValue: 0 }),
        bill_count: _emberData['default'].attr('number', { defaultValue: 0 }),
        previous_oil: _emberData['default'].belongsTo('oil', { async: false }),
        last_oil: _emberData['default'].belongsTo('oil', { async: false }),
        last_volume: _emberData['default'].attr('number', { defaultValue: 0 }),
        last_mileage: _emberData['default'].attr('number', { defaultValue: 0 }),
        last_rate: _emberData['default'].attr('number', { defaultValue: 0 }),
        description: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        searchKeys: _ember['default'].computed("name", function () {
            if (!this.get("id")) {
                return [];
            }
            return [this.get("number").toLowerCase(), this.get("vin").toLowerCase(), this.get("model").toLowerCase()];
        }),
        numberDidChange: _ember['default'].observer('number', function () {
            var _this = this;

            var number = this.get("number");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                number = number.trim();
                if (_ember['default'].isEmpty(number)) {
                    this.get('errors').add('number', '不能为空');
                } else if (number.length > 20) {
                    this.get('errors').add('number', '长度不能超过20字符');
                } else {
                    (function () {
                        var curId = _this.get("id");
                        var isRepeated = _this.store.peekAll('car').filter(function (car) {
                            return car.get("id") !== curId && car.get("number") === number;
                        }).length > 0;
                        if (isRepeated) {
                            _this.get('errors').add('number', '不能重复');
                        }
                    })();
                }
            }
        }),
        vinDidChange: _ember['default'].observer('vin', function () {
            var _this2 = this;

            var vin = this.get("vin");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                // vin = vin.trim();
                if (/\s/g.test(vin)) {
                    this.get('errors').add('vin', '不能包含空格符');
                } else if (_ember['default'].isEmpty(vin)) {
                    this.get('errors').add('vin', '不能为空');
                } else if (vin.length > 100) {
                    this.get('errors').add('vin', '长度不能超过100字符');
                } else {
                    (function () {
                        var curId = _this2.get("id");
                        var isRepeated = _this2.store.peekAll('car').filter(function (car) {
                            return car.get("id") !== curId && car.get("vin") === vin;
                        }).length > 0;
                        if (isRepeated) {
                            _this2.get('errors').add('vin', '不能重复');
                        }
                    })();
                }
            }
        }),
        modelDidChange: _ember['default'].observer('model', function () {
            var model = this.get("model");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                model = model.trim();
                if (!_ember['default'].isEmpty(model) && model.length > 20) {
                    this.get('errors').add('model', '长度不能超过20字符');
                }
            }
        }),
        descriptionDidChange: _ember['default'].observer('description', function () {
            var description = this.get("description");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                description = description.trim();
                if (!_ember['default'].isEmpty(description) && description.length > 200) {
                    this.get('errors').add('description', '长度不能超过200字符');
                }
            }
        }),
        // instances: DS.hasMany('instance',{ async: false }),
        instances: _ember['default'].computed("modified_date", "tagForInstances", function () {
            _ember['default'].debug("instances--------" + this.get("number"));
            var curId = this.get("id");
            return this.store.peekAll("instance").filter(function (item) {
                return item.get("car.id") === curId && !item.get("isDeleted");
            });
        }),
        isUnused: _ember['default'].computed("instances", "is_archived", function () {
            _ember['default'].debug("isUnused--------" + this.get("number"));
            if (this.get("is_archived")) {
                return false;
            } else {
                var instances = this.get("instances").filterBy("is_archived", false);
                //没有发布或者没有启用的都是闲置状态
                if (instances.get("length") === 0) {
                    return true;
                } else {
                    return instances.any(function (item) {
                        return !item.get("is_released") || !item.get("is_enable") || item.get("isFinished");
                    });
                }
            }
        }),
        isPending: _ember['default'].computed("instances", "is_archived", function () {
            if (this.get("is_archived")) {
                return false;
            } else {
                var instances = this.get("instances"); //.filterBy("is_archived",false);
                return instances.isAny("is_pending", true);
            }
        }),
        isReleased: _ember['default'].computed("instances", "is_archived", function () {
            if (this.get("is_archived")) {
                return false;
            } else {
                //可加油且已启用才算是可加油状态
                var instances = this.get("instances"); //.filterBy("is_archived",false);
                return instances.any(function (item) {
                    return item.get("is_released") && item.get("is_enable") && !item.get("isFinished") && !item.get("is_archived");
                });
            }
        }),
        isDisable: _ember['default'].computed("instances", "is_archived", function () {
            if (this.get("is_archived")) {
                return false;
            } else {
                var instances = this.get("instances").filterBy("is_archived", false);
                return instances.isAny("is_enable", false);
            }
        }),
        isArchivable: _ember['default'].computed("instances", "isNew", "is_archived", function () {
            if (this.get("is_archived") || this.get("isNew")) {
                return false;
            } else {
                //有任何一个申请单没有归档，则该车辆不可以归档。
                //申请单个数为0的车辆可以归档
                var instances = this.get("instances");
                return !instances.isAny("is_archived", false);
            }
        }),
        isFinished: _ember['default'].computed("instances.@each.isFinished", "is_archived", function () {
            if (this.get("is_archived")) {
                return false;
            }
            //有任何申请单过期，则显示车辆有过期申请单
            var instances = this.get("instances");
            return instances.isAny("isFinished", true);
        }),
        isFinishing: _ember['default'].computed("instances.@each.isFinishing", "is_archived", function () {
            if (this.get("is_archived")) {
                return false;
            }
            //有任何申请单过期，则显示车辆有过期申请单
            if (this.get("isFinished")) {
                return true;
            } else {
                var instances = this.get("instances");
                return instances.isAny("isFinishing", true);
            }
        }),
        rateColor: _ember['default'].computed("last_rate", "previous_oil.yellow_rate", "previous_oil.red_rate", function () {
            var last_rate = this.get("last_rate");
            var yellow_rate = this.get("previous_oil.yellow_rate");
            var red_rate = this.get("previous_oil.red_rate");
            if (last_rate && yellow_rate && red_rate) {
                if (last_rate > red_rate) {
                    return "danger";
                } else if (last_rate > yellow_rate) {
                    return "warning";
                } else {
                    return "success";
                }
            } else {
                return "muted";
            }
        }),
        isOwn: _ember['default'].computed("instances", "creater.id", "modifier.id", "isOwnNotifyTag", function () {
            _ember['default'].debug("isOwn-car--------------------");
            //是否是当前用户关联车辆
            var userId = this.container.lookup('controller:session').get("userId").toString();
            var isOwn = this.get("creater.id") === userId || this.get("modifier.id") === userId;
            if (isOwn) {
                return true;
            } else {
                var instances = this.get("instances");
                return instances.isAny("isOwn", true);
            }
        }),
        // isArchivedDidChange:Ember.observer("is_archived",function(){
        //     //不需要了，让它留着，因为每天归档的数据不多
        //     //归档状态变化时触发，如果变成归档状态，则从store中移除记录
        //     if(this.get("is_archived")){
        //         Ember.run.next(()=>{
        //             this.store.unloadRecord(this);
        //         });
        //     }
        // }),
        instanceCountDidChange: _ember['default'].observer("instance_count", function () {
            var _this3 = this;

            _ember['default'].run.next(function () {
                _this3.get("instances").filterBy("is_archived", false).forEach(function (instance) {
                    instance.notifyPropertyChange("messageNotifyTag");
                });
            });
        })
    });
});
define('htis/models/cararchive', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        car: _emberData['default'].belongsTo('car', { async: false }),
        creater: _emberData['default'].belongsTo('user', { async: false }),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/carrestore', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        car: _emberData['default'].belongsTo('car', { async: false }),
        creater: _emberData['default'].belongsTo('user', { async: false }),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/changeset', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('htis/models/department', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string'),
        description: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        searchKeys: _ember['default'].computed("name", function () {
            if (!this.get("id")) {
                return [];
            }
            return [this.get("name").toLowerCase()];
        }),
        nameDidChange: _ember['default'].observer('name', function () {
            var name = this.get("name");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                name = name.trim();
                if (_ember['default'].isEmpty(name)) {
                    this.get('errors').add('name', '不能为空');
                } else if (name.length > 20) {
                    this.get('errors').add('name', '长度不能超过20字符');
                } else {
                    var curId = this.get("id");
                    var isRepeated = this.store.peekAll('department').filter(function (department) {
                        return department.get("id") !== curId && department.get("name") === name;
                    }).length > 0;
                    if (isRepeated) {
                        this.get('errors').add('name', '不能重复');
                    }
                }
            }
        }),
        descriptionDidChange: _ember['default'].observer('description', function () {
            var description = this.get("description");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                description = description.trim();
                if (!_ember['default'].isEmpty(description) && description.length > 200) {
                    this.get('errors').add('description', '长度不能超过200字符');
                }
            }
        })
    });
});
define('htis/models/export', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        length: _emberData['default'].attr('number'),
        total: _emberData['default'].attr('number'),
        last_id: _emberData['default'].attr('number')

    });
});
define('htis/models/instance', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].Model.extend({
        isOwnNotifyTag: false,
        car: _emberData['default'].belongsTo('car', { async: true }),
        project: _emberData['default'].belongsTo('project', { async: false }),
        department: _emberData['default'].belongsTo('department', { async: false }),
        user_name: _emberData['default'].attr('string'),
        oils: _emberData['default'].hasMany('oil', { async: false, inverse: null }),
        goal: _emberData['default'].attr('string', { defaultValue: '' }),
        start_date: _emberData['default'].attr('date'),
        end_date: _emberData['default'].attr('date'),
        is_released: _emberData['default'].attr('boolean', { defaultValue: false }),
        is_pending: _emberData['default'].attr('boolean', { defaultValue: false }),
        is_archived: _emberData['default'].attr('boolean', { defaultValue: false }),
        is_enable: _emberData['default'].attr('boolean', { defaultValue: false }),
        message: _emberData['default'].belongsTo('message', { async: false }),
        bill_count: _emberData['default'].attr('number', { defaultValue: 0 }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        // traces: DS.hasMany('trace',{ async: false,inverse: null }),
        traces: _ember['default'].computed("modified_date", function () {
            return this.store.peekAll("trace").filterBy("instance.id", this.get("id"));
        }),
        tracesSortingDesc: ['created_date:desc'],
        sortedTracesDesc: _ember['default'].computed.sort('traces', 'tracesSortingDesc'),
        lastTrace: _ember['default'].computed("traces", function () {
            if (this.get("is_pending")) {
                return this.get("traces").find(function (trace) {
                    return !trace.get("is_finished");
                });
            } else {
                return this.get("traces.lastObject");
            }
        }),
        isAbortable: _ember['default'].computed("is_released", "is_enable", function () {
            //只有可加油并且已启用的申请单才可以中止
            return this.get("is_released") && this.get("is_enable");
        }),
        isForbidable: _ember['default'].computed("is_released", "is_enable", function () {
            //只有可加油并且已启用的申请单才可以禁用暂停
            return this.get("is_released") && this.get("is_enable");
        }),
        isFinished: _ember['default'].computed("is_released", "is_enable", "is_archived", "end_date", function () {
            //计算是否过期，用于提醒过期状态，只有可加油的申请单才需要计算
            if (this.get("is_archived")) {
                //已结束的就不需要计算了
                return false;
            }
            var isReleased = this.get("is_released") && this.get("is_enable");
            if (isReleased) {
                var syncToken = this.container.lookup('controller:application').get("syncToken");
                if (this.get("end_date").getTime() - syncToken.getTime() < 0) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }),
        isFinishing: _ember['default'].computed("is_released", "is_enable", "is_archived", "end_date", function () {
            //计算是否快过期，用于过期前提前提醒用户，只有已发布的申请单才需要计算
            if (this.get("is_archived")) {
                //已结束的就不需要计算了
                return false;
            }
            if (this.get("isFinished")) {
                return true;
            }
            var isReleased = this.get("is_released");
            if (isReleased) {
                var applicationController = this.container.lookup('controller:application');
                var finishHour = applicationController.get("finishHour");
                if (!finishHour) {
                    finishHour = 48;
                }
                var syncToken = applicationController.get("syncToken");
                if (window.HOJS.lib.dateDiff("H", syncToken, this.get("end_date")) < finishHour) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }),
        isNeedToBellApprove: _ember['default'].computed("is_archived", "modified_date", function () {
            //计算是否需要生成核准通知
            //只通知48小时内的核准单子
            if (this.get("is_archived")) {
                //已归档申请单不用生成通知
                return false;
            }
            var modifiedDate = this.get("modified_date");
            var syncToken = this.container.lookup('controller:application').get("syncToken");
            if (window.HOJS.lib.dateDiff("H", modifiedDate, syncToken) < 48) {
                return true;
            } else {
                return false;
            }
        }),
        isOwn: _ember['default'].computed("traces", "isOwnNotifyTag", function () {
            _ember['default'].debug("isOwn-instance--------------------");
            //是否是当前用户关联申请单
            var traces = this.get("traces");
            return traces.isAny("isOwn", true);
        }),
        // isArchivedDidChange:Ember.observer("is_archived",function(){
        //     //不需要了，让它留着，因为每天归档的数据不多
        //     //归档状态变化时触发，如果变成归档状态，则从store中移除记录
        //     if(this.get("is_archived")){
        //         Ember.run.next(()=>{
        //             let car = this.get("car");
        //             this.store.unloadRecord(this);
        //             if(car){
        //                 //有可能出现车辆被归档后被从本地移除的情况
        //                 car.notifyPropertyChange("instances");
        //             }
        //         });
        //     }
        // }),
        messageNotifyTag: 1,
        lastTraceDidChange: _ember['default'].observer("lastTrace.status", "messageNotifyTag", function () {
            var _this = this;

            //计算当前申请单要生成的通知
            //启用（暂停）、禁用（恢复）及修改申请单没有通知
            _ember['default'].run.next(function () {
                if (_this.get("is_archived")) {
                    //已归档申请单不用生成通知
                    return;
                }
                var isCarManagePowered = _this.container.lookup('controller:session').get("isCarManagePowered");
                var isInstanceCheckPowered = _this.container.lookup('controller:session').get("isInstanceCheckPowered");
                if (!(isCarManagePowered || isInstanceCheckPowered)) {
                    //没有权限的没有任何通知需要生成
                    return;
                }
                var title = "";
                var icon = "";
                var color = "";
                var text = "";
                var lastTrace = _this.get("lastTrace");
                if (!lastTrace) {
                    _ember['default'].Logger.error('编号为' + _this.get("id") + '的申请单出现lastTrace为空的情况：\n                   可能是申请单没有归档但是其trace被归档了，造成本地没有trace的原因，\n                   也可能是出现了申请单的IsPending状态为true，但是其所有trace的is_finished都为true的不正常现象。');
                    return;
                }
                if (isCarManagePowered) {
                    //车辆管理员收到的通知
                    var lastTraceStatus = lastTrace.get("status");
                    switch (lastTraceStatus) {
                        case "approved":
                            //只通知48小时内的核准单子
                            if (_this.get("isNeedToBellApprove")) {
                                title = "核准通知";
                                icon = "glyphicon-ok";
                                color = "text-success";
                                text = '审核人[' + lastTrace.get("modifier.name") + ']核准了车辆[' + _this.get("car.number") + ']的申请单';
                            }
                            break;
                        case "rejected":
                            title = "驳回通知";
                            icon = "glyphicon-remove";
                            color = "text-danger";
                            text = '审核人[' + lastTrace.get("modifier.name") + ']驳回了车辆[' + _this.get("car.number") + ']的申请单';
                            break;
                        case "aborted":
                            title = "中止通知";
                            icon = "glyphicon-stop";
                            color = "text-danger";
                            text = '审核人[' + lastTrace.get("modifier.name") + ']中止了车辆[' + _this.get("car.number") + ']的申请单';
                            break;
                    }
                } else if (isInstanceCheckPowered) {
                    //车辆审核人收到的通知
                    var lastTraceStatus = lastTrace.get("status");
                    switch (lastTraceStatus) {
                        case "recaptured":
                            title = "取回通知";
                            icon = "glyphicon-adjust";
                            color = "text-info";
                            text = '申请人[' + _this.get("creater.name") + ']取回了车辆[' + _this.get("car.number") + ']的申请单';
                            break;
                        case "pending":
                            title = "审核通知";
                            icon = "glyphicon-time";
                            color = "text-warning";
                            text = '申请人[' + _this.get("creater.name") + ']提交了车辆[' + _this.get("car.number") + ']的申请单';
                            break;
                    }
                } else {
                    //没有权限的没有任何通知需要生成
                    return;
                }
                var message = _this.get("message");
                if (message) {
                    _this.store.unloadRecord(message);
                    _this.set("message", null);
                }
                if (!title) {
                    //当没有任何通知时，需要判断是否要生成过期通知（用于申请单已经过期但没有归档或者申请单快要过期时通知用户）
                    if (_this.get("isFinishing")) {
                        title = "过期通知";
                        //这里icon及color为空，是因为过期通知icon及其color是自动根据isFinishing及isFinished判定并加上的
                        icon = "";
                        color = "";
                        if (_this.get("isFinished")) {
                            text = '车辆[' + _this.get("car.number") + ']有一个申请单已于[' + _this.get("end_date").format("yyyy-MM-dd") + ']过期';
                        } else {
                            text = '车辆[' + _this.get("car.number") + ']有一个申请单将于[' + _this.get("end_date").format("yyyy-MM-dd") + ']过期';
                        }
                    }
                }
                if (title && lastTrace) {
                    var _message = _this.store.createRecord("message", {
                        instance: _this,
                        title: title,
                        icon: icon,
                        color: color,
                        text: text,
                        created_date: lastTrace.get("modified_date")
                    });
                    _this.set("message", _message);
                }
            });
        })
    });
});
define('htis/models/instanceabort', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        trace: _emberData['default'].belongsTo('trace', { async: false }),
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        car: _emberData['default'].belongsTo('car', { async: false }),
        status: _emberData['default'].attr('string'),
        start_info: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/instancearchive', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        traces: _emberData['default'].hasMany('trace', { async: false }),
        car: _emberData['default'].belongsTo('car', { async: false }),
        creater: _emberData['default'].belongsTo('user', { async: false })
    });
});
define('htis/models/instancecheck', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        trace: _emberData['default'].belongsTo('trace', { async: false }),
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        car: _emberData['default'].belongsTo('car', { async: false }),
        status: _emberData['default'].attr('string'),
        end_info: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/instanceenable', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        trace: _emberData['default'].belongsTo('trace', { async: false }),
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        car: _emberData['default'].belongsTo('car', { async: false }),
        status: _emberData['default'].attr('string'),
        start_info: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/instanceforbid', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        trace: _emberData['default'].belongsTo('trace', { async: false }),
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        car: _emberData['default'].belongsTo('car', { async: false }),
        status: _emberData['default'].attr('string'),
        start_info: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/instancenew', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        car: _emberData['default'].belongsTo('car', { async: false }),
        project: _emberData['default'].belongsTo('project', { async: false }),
        department: _emberData['default'].belongsTo('department', { async: false }),
        user_name: _emberData['default'].attr('string', { defaultValue: '' }),
        oils: _emberData['default'].hasMany('oil', { async: false, inverse: null }),
        goal: _emberData['default'].attr('string', { defaultValue: '' }),
        start_date: _emberData['default'].attr('date'),
        end_date: _emberData['default'].attr('date'),
        start_info: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        projectDidChange: _ember['default'].observer('project', function () {
            var project = this.get("project");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(project)) {
                    this.get('errors').add('project', '不能为空');
                } else {
                    this.get('errors').remove('project');
                }
            }
        }),
        departmentDidChange: _ember['default'].observer('department', function () {
            var department = this.get("department");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(department)) {
                    this.get('errors').add('department', '不能为空');
                } else {
                    this.get('errors').remove('department');
                }
            }
        }),
        userNameDidChange: _ember['default'].observer('user_name', function () {
            var user_name = this.get("user_name");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                user_name = user_name.trim();
                if (_ember['default'].isEmpty(user_name)) {
                    this.get('errors').add('user_name', '不能为空');
                } else if (user_name.length > 20) {
                    this.get('errors').add('user_name', '长度不能超过20字符');
                }
            }
        }),
        oilsDidChange: _ember['default'].observer('oils', function () {
            var oils = this.get("oils");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(oils)) {
                    this.get('errors').add('oils', '请至少选择一个油品');
                } else {
                    this.get('errors').remove('oils');
                }
            }
        }),
        goalDidChange: _ember['default'].observer('goal', function () {
            var goal = this.get("goal");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                goal = goal.trim();
                if (!_ember['default'].isEmpty(goal) && goal.length > 200) {
                    this.get('errors').add('goal', '长度不能超过200字符');
                }
            }
        }),
        startEndDateDidChange: _ember['default'].observer('start_date', 'end_date', function () {
            var start_date = this.get("start_date");
            var end_date = this.get("end_date");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                var now = new Date();
                if (_ember['default'].isEmpty(start_date) || _ember['default'].isEmpty(end_date)) {
                    this.get('errors').add('start_date', '起止时间都不能为空');
                } else if (end_date.getTime() - start_date.getTime() < 0) {
                    this.get('errors').remove('start_date');
                    this.get('errors').add('start_date', '终止时间不能小于起始时间');
                } else if (end_date.getTime() - now.getTime() < 0) {
                    this.get('errors').remove('start_date');
                    this.get('errors').add('start_date', '终止时间不能小于当前时间');
                } else {
                    this.get('errors').remove('start_date');
                }
            }
        }),
        startInfoDidChange: _ember['default'].observer('start_info', function () {
            var start_info = this.get("start_info");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                start_info = start_info.trim();
                if (!_ember['default'].isEmpty(start_info) && start_info.length > 200) {
                    this.get('errors').add('start_info', '长度不能超过200字符');
                }
            }
        })
    });
});
define('htis/models/login', ['exports', 'ember-data'], function (exports, _emberData) {
	exports['default'] = _emberData['default'].Model.extend({
		log_id: _emberData['default'].attr('number'),
		log_name: _emberData['default'].attr('string'),
		log_password: _emberData['default'].attr('string'),
		is_passed: _emberData['default'].attr('boolean', { defaultValue: false })
	});
});
define('htis/models/message', ['exports', 'ember-data'], function (exports, _emberData) {
   exports['default'] = _emberData['default'].Model.extend({
      instance: _emberData['default'].belongsTo('instance', { async: false, inverse: null }),
      // type: DS.attr('string',{ defaultValue: '' }),//审核通知[check]、核准通知[approve]、驳回通知[reject]、过期通知[finish]、普通通知[normal]
      // is_archived:DS.attr('boolean', {defaultValue: false}),
      title: _emberData['default'].attr('string', { defaultValue: '' }),
      icon: _emberData['default'].attr('string', { defaultValue: '' }),
      color: _emberData['default'].attr('string', { defaultValue: '' }),
      text: _emberData['default'].attr('string', { defaultValue: '' }),
      // href: DS.attr('string',{ defaultValue: '' }),
      // creater: DS.belongsTo('user', { async: false,inverse: null }),
      created_date: _emberData['default'].attr('date')
   });
});
// modifier: DS.belongsTo('user', { async: false,inverse: null }),
// modified_date: DS.attr('date')
define('htis/models/oil', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string'),
        yellow_rate: _emberData['default'].attr('number', { defaultValue: 0 }),
        red_rate: _emberData['default'].attr('number', { defaultValue: 0 }),
        description: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        searchKeys: _ember['default'].computed("name", function () {
            if (!this.get("id")) {
                return [];
            }
            return [this.get("name").toLowerCase()];
        }),
        nameDidChange: _ember['default'].observer('name', function () {
            var name = this.get("name");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                name = name.trim();
                if (_ember['default'].isEmpty(name)) {
                    this.get('errors').add('name', '不能为空');
                } else if (name.length > 20) {
                    this.get('errors').add('name', '长度不能超过20字符');
                } else {
                    var curId = this.get("id");
                    var isRepeated = this.store.peekAll('oil').filter(function (oil) {
                        return oil.get("id") !== curId && oil.get("name") === name;
                    }).length > 0;
                    if (isRepeated) {
                        this.get('errors').add('name', '不能重复');
                    }
                }
            }
        }),
        yellowRateDidChange: _ember['default'].observer('yellow_rate', function () {
            var yellow_rate = this.get("yellow_rate");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(yellow_rate)) {
                    this.get('errors').add('yellow_rate', '请输入合法数值');
                } else if (yellow_rate && /^[-]\d+([.]\d{0,})?$/.test(yellow_rate)) {
                    this.get('errors').add('yellow_rate', '不允许负数');
                } else if (yellow_rate && /^\d+[.]\d{3,}$/.test(yellow_rate)) {
                    this.get('errors').add('yellow_rate', '输入小数位过多');
                }
            }
        }),
        redRateDidChange: _ember['default'].observer('red_rate', function () {
            var red_rate = this.get("red_rate");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(red_rate)) {
                    this.get('errors').add('red_rate', '请输入合法数值');
                } else if (red_rate && /^[-]\d+([.]\d{0,})?$/.test(red_rate)) {
                    this.get('errors').add('red_rate', '不允许负数');
                } else if (red_rate && /^\d+[.]\d{3,}$/.test(red_rate)) {
                    this.get('errors').add('red_rate', '输入小数位过多');
                }
            }
        }),
        descriptionDidChange: _ember['default'].observer('description', function () {
            var description = this.get("description");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                description = description.trim();
                if (!_ember['default'].isEmpty(description) && description.length > 200) {
                    this.get('errors').add('description', '长度不能超过200字符');
                }
            }
        })
    });
});
define('htis/models/optimizer', ['exports', 'ember-data'], function (exports, _emberData) {
	exports['default'] = _emberData['default'].Model.extend({
		all_cars_count: _emberData['default'].attr('number', { defaultValue: 0 }),
		archived_cars_count: _emberData['default'].attr('number', { defaultValue: 0 }),
		archived_instances_count: _emberData['default'].attr('number', { defaultValue: 0 }),
		creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
		created_date: _emberData['default'].attr('date')
	});
});
define('htis/models/power', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string', { defaultValue: '' }),
        description: _emberData['default'].attr('string', { defaultValue: '' })
    });
});
define('htis/models/preference', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].Model.extend({
        shortcut_hour: _emberData['default'].attr('number', { defaultValue: 0 }),
        finish_hour: _emberData['default'].attr('number', { defaultValue: 0 }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        finishHourDidChange: _ember['default'].observer('finish_hour', function () {
            var finish_hour = this.get("finish_hour");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(finish_hour)) {
                    this.get('errors').add('finish_hour', '请输入合法数值');
                } else if (finish_hour <= 0) {
                    this.get('errors').add('finish_hour', '请输入大于0的数值');
                } else if (finish_hour && /^[-]\d+([.]\d{0,})?$/.test(finish_hour)) {
                    this.get('errors').add('finish_hour', '不允许负数');
                } else if (finish_hour && /^\d+[.]\d{0,}$/.test(finish_hour)) {
                    this.get('errors').add('finish_hour', '输入小数位过多');
                }
            }
        })
    });
});
define('htis/models/project', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string'),
        is_enable: _emberData['default'].attr('boolean', { defaultValue: false }),
        description: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        searchKeys: _ember['default'].computed("name", function () {
            if (!this.get("id")) {
                return [];
            }
            return [this.get("name").toLowerCase()];
        }),
        nameDidChange: _ember['default'].observer('name', function () {
            var name = this.get("name");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                name = name.trim();
                if (_ember['default'].isEmpty(name)) {
                    this.get('errors').add('name', '不能为空');
                } else if (name.length > 20) {
                    this.get('errors').add('name', '长度不能超过20字符');
                } else {
                    var curId = this.get("id");
                    var isRepeated = this.store.peekAll('project').filter(function (project) {
                        return project.get("id") !== curId && project.get("name") === name;
                    }).length > 0;
                    if (isRepeated) {
                        this.get('errors').add('name', '不能重复');
                    }
                }
            }
        }),
        descriptionDidChange: _ember['default'].observer('description', function () {
            var description = this.get("description");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                description = description.trim();
                if (!_ember['default'].isEmpty(description) && description.length > 200) {
                    this.get('errors').add('description', '长度不能超过200字符');
                }
            }
        })
    });
});
define('htis/models/report', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        project: _emberData['default'].belongsTo('project', { async: true }),
        department: _emberData['default'].belongsTo('department', { async: true }),
        oil: _emberData['default'].belongsTo('oil', { async: true }),
        volume: _emberData['default'].attr('number'),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/resetpwd', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        user: _emberData['default'].attr('string'),
        userObject: _ember['default'].computed("user", function () {
            var userId = this.get("user");
            return this.store.peekRecord("user", userId);
        }),
        // user: DS.belongsTo('user', { async: false,inverse: null }),
        new_password: _emberData['default'].attr('string', { defaultValue: "hhhhhh" }),
        newPasswordDidChange: _ember['default'].observer("new_password", function () {
            var new_password = this.get("new_password");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                new_password = new_password.trim();
                if (_ember['default'].isEmpty(new_password)) {
                    this.get('errors').add('new_password', '不能为空');
                }
                // else if(!window.HOJS.lib.valiPasswordValue(new_password)){
                //     this.get('errors').add('new_password', '以字母开头，长度在6~16之间，只能包含字符、数字和下划线');
                // }
            }
        })
    });
});
define('htis/models/role', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string'),
        powers: _emberData['default'].hasMany('power', { async: false, inverse: null }),
        description: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        searchKeys: _ember['default'].computed("name", function () {
            if (!this.get("id")) {
                return [];
            }
            return [this.get("name").toLowerCase()];
        }),
        nameDidChange: _ember['default'].observer('name', function () {
            var name = this.get("name");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                name = name.trim();
                if (_ember['default'].isEmpty(name)) {
                    this.get('errors').add('name', '不能为空');
                } else if (name.length > 20) {
                    this.get('errors').add('name', '长度不能超过20字符');
                } else {
                    var curId = this.get("id");
                    var isRepeated = this.store.peekAll('role').filter(function (role) {
                        return role.get("id") !== curId && role.get("name") === name;
                    }).length > 0;
                    if (isRepeated) {
                        this.get('errors').add('name', '不能重复');
                    }
                }
            }
        }),
        descriptionDidChange: _ember['default'].observer('description', function () {
            var description = this.get("description");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                description = description.trim();
                if (!_ember['default'].isEmpty(description) && description.length > 200) {
                    this.get('errors').add('description', '长度不能超过200字符');
                }
            }
        })
    });
});
define('htis/models/signature', ['exports', 'ember-data'], function (exports, _emberData) {
	exports['default'] = _emberData['default'].Model.extend({
		name: _emberData['default'].attr('string', { defaultValue: "" }),
		sign: _emberData['default'].attr('string', { defaultValue: "" }),
		creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
		created_date: _emberData['default'].attr('date')
	});
});
define('htis/models/startup', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('htis/models/trace', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        isOwnNotifyTag: false,
        car: _emberData['default'].belongsTo('car', { async: false }),
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        previous_trace: _emberData['default'].belongsTo('trace', { async: false, inverse: null }),
        status: _emberData['default'].attr('string'),
        is_finished: _emberData['default'].attr('boolean', { defaultValue: false }),
        is_archived: _emberData['default'].attr('boolean', { defaultValue: false }),
        project: _emberData['default'].belongsTo('project', { async: false }),
        department: _emberData['default'].belongsTo('department', { async: false }),
        user_name: _emberData['default'].attr('string'),
        oils: _emberData['default'].hasMany('oil', { async: false, inverse: null }),
        goal: _emberData['default'].attr('string'),
        start_date: _emberData['default'].attr('date'),
        end_date: _emberData['default'].attr('date'),
        start_info: _emberData['default'].attr('string', { defaultValue: '' }),
        end_info: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        isOwn: _ember['default'].computed("modifier.id", "isOwnNotifyTag", function () {
            _ember['default'].debug("isOwn-trace--------------------");
            //是否是当前用户关联申请历程
            var userId = this.container.lookup('controller:session').get("userId").toString();
            return this.get("creater.id") === userId || this.get("modifier.id") === userId;
        })
    });
});
// isArchivedDidChange:Ember.observer("is_archived",function(){
//     //不需要了，让它留着，因为每天归档的数据不多
//     //归档状态变化时触发，如果变成归档状态，则从store中移除记录
//     if(this.get("is_archived")){
//         Ember.run.next(()=>{
//             this.store.unloadRecord(this);
//         });
//     }
// })
define('htis/models/tracenew', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
    exports['default'] = _emberData['default'].Model.extend({
        car: _emberData['default'].belongsTo('car', { async: false }),
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        previous_trace: _emberData['default'].belongsTo('trace', { async: false, inverse: null }),
        status: _emberData['default'].attr('string'),
        project: _emberData['default'].belongsTo('project', { async: false }),
        department: _emberData['default'].belongsTo('department', { async: false }),
        user_name: _emberData['default'].attr('string'),
        oils: _emberData['default'].hasMany('oil', { async: false, inverse: null }),
        goal: _emberData['default'].attr('string', { defaultValue: '' }),
        start_date: _emberData['default'].attr('date'),
        end_date: _emberData['default'].attr('date'),
        start_info: _emberData['default'].attr('string', { defaultValue: '' }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        projectDidChange: _ember['default'].observer('project', function () {
            var project = this.get("project");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(project)) {
                    this.get('errors').add('project', '不能为空');
                } else {
                    this.get('errors').remove('project');
                }
            }
        }),
        departmentDidChange: _ember['default'].observer('department', function () {
            var department = this.get("department");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(department)) {
                    this.get('errors').add('department', '不能为空');
                } else {
                    this.get('errors').remove('department');
                }
            }
        }),
        userNameDidChange: _ember['default'].observer('user_name', function () {
            var user_name = this.get("user_name");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                user_name = user_name.trim();
                if (_ember['default'].isEmpty(user_name)) {
                    this.get('errors').add('user_name', '不能为空');
                } else if (user_name.length > 20) {
                    this.get('errors').add('user_name', '长度不能超过20字符');
                }
            }
        }),
        oilsDidChange: _ember['default'].observer('oils', function () {
            var oils = this.get("oils");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(oils)) {
                    this.get('errors').add('oils', '请至少选择一个油品');
                } else {
                    this.get('errors').remove('oils');
                }
            }
        }),
        goalDidChange: _ember['default'].observer('goal', function () {
            var goal = this.get("goal");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                goal = goal.trim();
                if (!_ember['default'].isEmpty(goal) && goal.length > 200) {
                    this.get('errors').add('goal', '长度不能超过200字符');
                }
            }
        }),
        startEndDateDidChange: _ember['default'].observer('start_date', 'end_date', function () {
            var start_date = this.get("start_date");
            var end_date = this.get("end_date");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                var now = new Date();
                if (_ember['default'].isEmpty(start_date) || _ember['default'].isEmpty(end_date)) {
                    this.get('errors').add('start_date', '起止时间都不能为空');
                } else if (end_date.getTime() - start_date.getTime() < 0) {
                    this.get('errors').remove('start_date');
                    this.get('errors').add('start_date', '中止时间不能小于起始时间');
                } else if (end_date.getTime() - now.getTime() < 0) {
                    this.get('errors').remove('start_date');
                    this.get('errors').add('start_date', '中止时间不能小于当前时间');
                } else {
                    this.get('errors').remove('start_date');
                }
            }
        }),
        startInfoDidChange: _ember['default'].observer('start_info', function () {
            var start_info = this.get("start_info");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                start_info = start_info.trim();
                if (!_ember['default'].isEmpty(start_info) && start_info.length > 200) {
                    this.get('errors').add('start_info', '长度不能超过200字符');
                }
            }
        })
    });
});
define('htis/models/tracerecapture', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        trace: _emberData['default'].belongsTo('trace', { async: false }),
        instance: _emberData['default'].belongsTo('instance', { async: false }),
        car: _emberData['default'].belongsTo('car', { async: false }),
        end_info: _emberData['default'].attr('string'),
        creater: _emberData['default'].belongsTo('user', { async: false }),
        created_date: _emberData['default'].attr('date')
    });
});
define('htis/models/user', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].Model.extend({
        name: _emberData['default'].attr('string', { defaultValue: '' }),
        phone: _emberData['default'].attr('string', { defaultValue: '' }),
        email: _emberData['default'].attr('string', { defaultValue: '' }),
        role: _emberData['default'].belongsTo('role', { async: false, inverse: null }),
        signature: _emberData['default'].attr('string', { defaultValue: '' }),
        is_sign_needed: _emberData['default'].attr('boolean', { defaultValue: true }),
        is_enable: _emberData['default'].attr('boolean', { defaultValue: true }),
        creater: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        created_date: _emberData['default'].attr('date'),
        modifier: _emberData['default'].belongsTo('user', { async: false, inverse: null }),
        modified_date: _emberData['default'].attr('date'),
        isBillScannerPowered: _ember['default'].computed("role", "role.powers", function () {
            var powers = this.get("role.powers");
            var powersIds = powers ? powers.mapBy("id") : [];
            return powersIds.contains("4");
        }),
        searchKeys: _ember['default'].computed("name", "phone", "email", "role.name", function () {
            return [this.get("name").toLowerCase(), this.get("phone").toLowerCase(), this.get("email").toLowerCase(), this.get("role.name").toLowerCase()];
        }),
        nameDidChange: _ember['default'].observer('name', function () {
            var name = this.get("name");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                name = name.trim();
                if (_ember['default'].isEmpty(name)) {
                    this.get('errors').add('name', '不能为空');
                } else if (name.length > 20) {
                    this.get('errors').add('name', '长度不能超过20字符');
                }
                //名称允许重复
                // else{
                //     var curId = this.get("id");
                //     var isRepeated = this.store.peekAll('user').filter(function (user) {
                //         return user.get("id") !== curId && user.get("name") === name;
                //     }).length > 0;
                //     if(isRepeated){
                //         this.get('errors').add('name', '不能重复');
                //     }
                // }
            }
        }),
        phoneDidChange: _ember['default'].observer('phone', function () {
            var phone = this.get("phone"),
                email = this.get("email");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                phone = phone.trim();
                email = email.trim();
                if (_ember['default'].isEmpty(phone) && _ember['default'].isEmpty(email)) {
                    this.get('errors').add('phone', '手机号及邮箱至少有一个不能为空');
                } else {
                    this.get('errors').remove('phone');
                    if (this.get('errors').get("email")) {
                        this.notifyPropertyChange("email");
                    }
                }
                if (!_ember['default'].isEmpty(phone) && phone.length > 20) {
                    this.get('errors').add('phone', '长度不能超过20字符');
                } else {
                    var curId = this.get("id");
                    var isRepeatedForPhone = this.store.peekAll('user').filter(function (user) {
                        return !_ember['default'].isEmpty(phone) && user.get("id") !== curId && user.get("phone") === phone;
                    }).length > 0;
                    if (isRepeatedForPhone) {
                        this.get('errors').add('phone', '不能重复');
                    }
                }
            }
        }),
        emailDidChange: _ember['default'].observer('email', function () {
            var phone = this.get("phone"),
                email = this.get("email");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                phone = phone.trim();
                email = email.trim();
                if (_ember['default'].isEmpty(phone) && _ember['default'].isEmpty(email)) {
                    this.get('errors').add('email', '手机号及邮箱至少有一个不能为空');
                } else {
                    this.get('errors').remove('email');
                    if (this.get('errors').get("phone")) {
                        this.notifyPropertyChange("phone");
                    }
                }
                if (!_ember['default'].isEmpty(email) && !window.HOJS.lib.valiEmailValue(email)) {
                    this.get('errors').add('email', '格式不正确');
                } else if (!_ember['default'].isEmpty(email) && email.length > 100) {
                    this.get('errors').add('email', '长度不能超过100字符');
                } else {
                    var curId = this.get("id");
                    var isRepeatedForEmail = this.store.peekAll('user').filter(function (user) {
                        return !_ember['default'].isEmpty(email) && user.get("id") !== curId && user.get("email") === email;
                    }).length > 0;
                    if (isRepeatedForEmail) {
                        this.get('errors').add('email', '不能重复');
                    }
                }
            }
        }),
        signatureDidChange: _ember['default'].observer('signature', function () {
            var signature = this.get("signature");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                signature = signature.trim();
                if (!_ember['default'].isEmpty(signature) && signature.length > 200) {
                    this.get('errors').add('signature', '长度不能超过200字符');
                }
            }
        }),
        roleDidChange: _ember['default'].observer('role', function () {
            var role = this.get("role");
            if (this.get("hasDirtyAttributes") && !this.get("isDeleted")) {
                if (_ember['default'].isEmpty(role)) {
                    this.get('errors').add('role', '不能为空');
                } else {
                    this.get('errors').remove('role');
                }
            }
        })
    });
});
define('htis/router', ['exports', 'ember', 'htis/config/environment'], function (exports, _ember, _htisConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _htisConfigEnvironment['default'].locationType
  });

  Router.map(function () {
    this.route('loading');
    this.route('startup');
    this.route('login');
    this.route('account', function () {
      this.route('info', function () {
        this.route('edit', function () {});
      });
      this.route('pwd');
    });
    this.route('start', function () {
      this.route('bill', { path: '/:id' });
    });
    this.route('scanning', function () {
      this.route('filling');
    });
    this.route('setting', function () {
      this.route('roles', {}, function () {
        this.route('role', { path: '/:id' }, function () {
          this.route('edit', {});
        });
        this.route('new');
      });
      this.route('users', {}, function () {
        this.route('user', { path: '/:id' }, function () {
          this.route('edit');
          this.route('resetpwd');
        });
        this.route('new');
      });
      this.route('projects', {}, function () {
        this.route('project', { path: '/:id' }, function () {
          this.route('edit');
        });
        this.route('new');
      });
      this.route('departments', {}, function () {
        this.route('department', { path: '/:id' }, function () {
          this.route('edit');
        });
        this.route('new');
      });
      this.route('oils', {}, function () {
        this.route('oil', { path: '/:id' }, function () {
          this.route('edit');
        });
        this.route('new');
      });
      this.route('preference', {}, function () {
        this.route('edit');
      });
    });
    this.route('manage', function () {
      this.route('cars', function () {
        this.route('car', { path: '/car/:id' }, function () {
          this.route('edit');
        });
        this.route('new');
      });
      this.route('pendings', function () {
        this.route('pending', { path: '/:id' }, function () {
          this.route('edit');
          this.route('newinstance');
        });
      });
      this.route('releases', function () {
        this.route('release', { path: '/:id' }, function () {
          this.route('edit');
          this.route('newinstance');
          this.route('archive');
        });
      });
      this.route('disables', function () {
        this.route('disable', { path: '/:id' }, function () {
          this.route('edit');
          this.route('newinstance');
          this.route('archive');
        });
      });
      this.route('archives', function () {
        this.route('archive', { path: '/:id' }, function () {
          this.route('edit');
          this.route('restore');
        });
      });
      this.route('unuseds', function () {
        this.route('unused', { path: '/:id' }, function () {
          this.route('edit');
          this.route('archive');
          this.route('newinstance');
        });
        this.route('new');
      });
      this.route('searchs', function () {
        this.route('search', { path: '/:id' }, function () {
          this.route('edit');
          this.route('archive');
          this.route('newinstance');
          this.route('restore');
        });
      });
    });
    this.route('history', function () {
      this.route('bills', {}, function () {
        this.route('bill', { path: '/:id' }, function () {
          this.route('edit', {});
        });
        this.route('new');
        this.route('filter');
      });
      this.route('reports', function () {
        this.route('filter');
      });
    });
    this.route('controller', function () {});
    this.route('online');
    this.route('shortcut', function () {});
    this.route('valids');
  });

  exports['default'] = Router;
});
define('htis/routes/account', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        controllerName: 'account',
        parentControllerName: "",
        beforeModel: function beforeModel(transition) {
            var sessionController = this.controllerFor("session");
            return sessionController.checkSession(transition);
        },
        model: function model() {
            return this.controllerFor("session").get("user");
        },
        actions: {
            goAccountInfo: function goAccountInfo() {
                this.transitionTo('account.info');
            },
            goAccountPwd: function goAccountPwd() {
                this.transitionTo('account.pwd');
            },
            goBack: function goBack() {
                this.transitionTo('index');
            }
        }
    });
});
// import Ember from 'ember';

// export default Ember.Route.extend({
//     beforeModel(transition){
//         var sessionController = this.controllerFor("session");
//         return sessionController.checkSession(transition);
//     },
//     model(){
//         return this.controllerFor("session").get("user");
//     },
//     activate(){
//         let controller = this.controllerFor("account");
//         if(Ember.$.support.transition){
//             Ember.run.next(()=>{
//                 //这里要加later的原因是有时next执行得太快没有动画效果
//                 // Ember.run.later(()=>{
//                     controller.set("isActive",true);
//                 // },100);
//             });
//         }
//         else{
//             controller.set("isActive",true);
//         }
//         return this;
//     },
//     deactivate(){
//         let controller = this.controllerFor("account");
//         controller.set("isActive",false);
//         return this;
//     },
//     actions:{
//         goAccountInfo(){
//             this.transitionTo('account.info');
//         },
//         goAccountPwd(){
//             this.transitionTo('account.pwd');
//         },
//         goBack(){
//             this.transitionTo('index');
//         }
//     }
// });
define('htis/routes/account/info', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        controllerName: 'account.info',
        parentControllerName: "account"
    });
});
// import Ember from 'ember';

// export default Ember.Route.extend({
//     activate(){
//         let controller = this.controllerFor("account.info");
//         let p_controller = this.controllerFor("account");
//         if(Ember.$.support.transition){
//             Ember.run.next(()=>{
//             	//这里要加later的原因是有时next执行得太快没有动画效果
//     	        // Ember.run.later(()=>{
//     	            controller.set("isActive",true);
//     		        p_controller.set("isBack",true);
//     	        // },100);
//             });
//         }
//         else{
//             controller.set("isActive",true);
//             p_controller.set("isBack",true);
//         }
//         return this;
//     },
//     deactivate(){
//         let controller = this.controllerFor("account.info");
//         let p_controller = this.controllerFor("account");
//         controller.set("isActive",false);
//         p_controller.set("isBack",false);
//         return this;
//     },
// 	actions:{
// 		goBack(){
//             this.transitionTo('account');
// 		}
// 	}
// });
define('htis/routes/account/info/edit', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        controllerName: 'account.info',
        renderTemplate: function renderTemplate(controller) {
            this.render('account/info', { outlet: 'account/info', controller: controller });
        },
        activate: function activate() {
            var controller = this.controllerFor("account/info");
            controller.set("isEditing", true);
            return this;
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            var model = controller.get("model");
            if (model) {
                model.rollbackAttributes();
            }
            return this;
        },
        actions: {
            goIndex: function goIndex() {
                this.transitionTo('account.info.index');
            }
        }
    });
});
define('htis/routes/account/info/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        controllerName: 'account.info',
        renderTemplate: function renderTemplate(controller) {
            this.render('account/info', { outlet: 'account/info', controller: controller });
        },
        activate: function activate() {
            var controller = this.controllerFor("account/info");
            controller.set("isEditing", false);
            return this;
        },
        actions: {
            goEdit: function goEdit() {
                this.transitionTo('account.info.edit');
            }
        }
    });
});
define('htis/routes/account/pwd', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        controllerName: 'account.pwd',
        parentControllerName: "account",
        model: function model() {
            var user = this.controllerFor("session").get("user");
            return this.store.createRecord('accountpwd', {
                user: user
            });
        },
        deactivate: function deactivate() {
            this._super();
            this.controller.send("unloadRecord");
            return this;
        }
    });
});
// import Ember from 'ember';

// export default Ember.Route.extend({
//     model(){
//         let user = this.controllerFor("session").get("user");
//         return this.store.createRecord('accountpwd',{
//             user: user
//         });
//     },
//     activate(){
//         let controller = this.controllerFor("account/pwd");
//         let p_controller = this.controllerFor("account");
//         if(Ember.$.support.transition){
//             Ember.run.next(()=>{
//             	//这里要加later的原因是有时next执行得太快没有动画效果
//     	        // Ember.run.later(()=>{
//     	            controller.set("isActive",true);
//     		        p_controller.set("isBack",true);
//     	        // },100);
//             });
//         }
//         else{
//             controller.set("isActive",true);
//             p_controller.set("isBack",true);
//         }
//         return this;
//     },
//     deactivate(){
//         let controller = this.controllerFor("account/pwd");
//         let p_controller = this.controllerFor("account");
//         controller.set("isActive",false);
//         p_controller.set("isBack",false);
//         controller.send("unloadRecord");
//         return this;
//     },
// 	actions:{
// 		goBack(){
//             this.transitionTo('account');
// 		}
// 	}
// });
define("htis/routes/application", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        beforeModel: function beforeModel(transition) {
            window.document.title = this.controllerFor("application").get("appTitle");
            var startupController = this.controllerFor("startup");
            var sessionController = this.controllerFor("session");
            if (!startupController.get("isStartupLoaded") && transition.targetName !== "startup") {
                sessionController.send("syncLocal", "init");
                startupController.set("previousTransition", transition);
            }
        },
        model: function model() {},
        setupController: function setupController() {},
        actions: {
            logout: function logout() {
                this.send("unloadArchiveds");
                this.send("exitSide");
                var sessionController = this.controllerFor("session");
                sessionController.send("logout", true);
            },
            // loading: function() {
            //     return false;
            //     // var view = this.container.lookup('view:loading').append();
            //     // this.router.one('didTransition', view, 'destroy');
            // },
            error: function error(reason) {
                _ember["default"].Logger.error(reason);
                _ember["default"].Logger.error(reason.stack);
                alert(reason.message);
            },
            goLogin: function goLogin() {
                this.transitionTo('login');
            },
            goIndex: function goIndex() {
                this.transitionTo('index');
            },
            goStart: function goStart() {
                this.transitionTo('start');
            },
            goStartup: function goStartup() {
                this.transitionTo('startup');
            },
            goAccount: function goAccount() {
                this.transitionTo('account');
            },
            goAbout: function goAbout() {
                var controller = this.controller;
                controller.beginPropertyChanges();
                controller.set("isBellActive", false);
                controller.set("isAboutActive", true);
                controller.endPropertyChanges();
            },
            goBell: function goBell() {
                var controller = this.controller;
                controller.beginPropertyChanges();
                controller.set("isAboutActive", false);
                controller.set("isBellActive", true);
                controller.endPropertyChanges();
            },
            exitSide: function exitSide() {
                var controller = this.controller;
                controller.beginPropertyChanges();
                controller.set("isAboutActive", false);
                controller.set("isBellActive", false);
                controller.endPropertyChanges();
                this.controllerFor("messages").set("isToShowAll", false);
            },
            goMessageTarget: function goMessageTarget(message) {
                var _this = this;

                //从通知消息链接导航到目标申请单
                var instance = message.get("instance");
                var car = instance.get("car");
                if (!car) {
                    return;
                }
                //启用（暂停）、禁用（恢复）及修改申请单没有通知
                if (car.get("isPending")) {
                    //审核通知
                    this.transitionTo("manage.pendings.pending", car);
                    _ember["default"].run.next(function () {
                        var controller = _this.controllerFor("manage.pendings.pending");
                        controller.send("unfodeInstance", instance);
                    });
                } else if (car.get("isReleased")) {
                    //核准通知
                    this.transitionTo("manage.releases.release", car);
                    _ember["default"].run.next(function () {
                        var controller = _this.controllerFor("manage.releases.release");
                        controller.send("unfodeInstance", instance);
                    });
                } else if (car.get("isUnused")) {
                    //驳回通知、取回通知、中止通知
                    this.transitionTo("manage.unuseds.unused", car);
                    _ember["default"].run.next(function () {
                        var controller = _this.controllerFor("manage.unuseds.unused");
                        controller.send("unfodeInstance", instance);
                    });
                }
                _ember["default"].run.next(function () {
                    //手机上需要自动退出通知中心
                    var controller = _this.controllerFor("manage");
                    if (controller.get("equipment.isXs")) {
                        _this.send("exitSide");
                    }
                });
            },
            unloadArchiveds: function unloadArchiveds() {
                _ember["default"].debug("unloadArchiveds");
                var store = this.store;
                store.peekAll("instance").forEach(function (instance) {
                    if (instance.get("is_archived")) {
                        instance.get("traces").forEach(function (trace) {
                            store.unloadRecord(trace);
                        });
                        store.unloadRecord(instance);
                    }
                });
                store.peekAll("car").forEach(function (car) {
                    if (car.get("is_archived")) {
                        store.unloadRecord(car);
                    }
                });
            },
            setRemoteDebugStatus: function setRemoteDebugStatus(value) {
                var controller = this.controller;
                controller.set("remoteDebugStatus", value);
            },
            fetchChangeset: function fetchChangeset() {
                var controller = this.controllerFor("changeset");
                controller.send("tryFetch");
            }
        }
    });
});
define("htis/routes/history", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        activate: function activate() {
            var controller = this.controllerFor("history");
            controller.set("isActive", true);
            return this;
        },
        deactivate: function deactivate() {
            this.send("unloadArchiveds");
            var controller = this.controllerFor("history");
            controller.set("isActive", false);
            return this;
        },
        actions: {
            didTransition: function didTransition() {
                if (this.controller.get("equipment.isXs")) {
                    return;
                }
                //当发现没有选项时选中默认的roles
                if (!this.controller.get("selection")) {
                    this.replaceWith('history.bills');
                }
            },
            goHome: function goHome() {
                this.transitionTo('start');
            },
            goBills: function goBills() {
                this.transitionTo('history.bills');
            },
            goReports: function goReports() {
                this.transitionTo('history.reports');
            }
        }
    });
});
define('htis/routes/history/bills', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "bill",
        controllerName: 'history.bills',
        parentControllerName: "history",
        activate: function activate() {
            var c_controller = this.controllerFor("changeset");
            //进入加油单列表，需要暂停changeset抓取
            c_controller.set("isPaused", true);
            var controller = this.controllerFor(this.controllerName);
            //进入加油单列表，需要清除所有加油单
            controller.send("clearBills");
            return this._super();
        },
        deactivate: function deactivate() {
            var c_controller = this.controllerFor("changeset");
            //离开加油单列表，需要恢复changeset抓取
            c_controller.set("isPaused", false);
            var controller = this.controller;
            controller.set("isMoreButtonNeeded", false);
            controller.set("filterOption", null);
            controller.set("searchKey", "");
            controller.set("lastId", 0);
            controller.get("errors").clear();
            //这里要加run.next的原因是如果立刻执行会触发history.bills.bill.controller的afterRecordIsDeleted函数，造成无法正常退出当前route的问题
            _ember['default'].run.next(function () {
                //离开加油单列表，需要清除所有加油单
                controller.send("clearBills");
            });
            return this._super();
        },
        actions: {
            goFilter: function goFilter() {
                this.transitionTo('history.bills.filter');
            }
        }
    });
});
define('htis/routes/history/bills/bill', ['exports', 'ember', 'htis/mixins/standard-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], {
        modelName: "bill",
        controllerName: 'history.bills.bill',
        parentControllerName: "history.bills",
        isDeep: true,
        model: function model(params) {
            var curId = params['id'];
            var record = this.store.peekRecord(this.modelName, curId);
            if (!record && curId.indexOf("fixture") === 0) {
                //如果没有找到记录，并且是fixture开头的新记录则创建一个新记录来匹配
                return this.controllerFor(this.parentControllerName).createRecord();
            } else {
                //注意，这里如果没有找到记录，并且不是fixture开头的新记录，将返回null
                return record;
            }
        },
        afterModel: function afterModel(model, transition) {
            if (!model) {
                transition.send("goBack");
            }
        }
    });
});
define('htis/routes/history/bills/bill/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'history.bills.bill',
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("history").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/history/bills/filter', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        controllerName: 'history.bills.filter',
        parentControllerName: "history.bills",
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isConfirmingCancel", false);
            var p_controller = this.controllerFor(this.parentControllerName);
            controller.send("syncOption", p_controller.get("filterOption"));
            return this._super();
        },
        deactivate: function deactivate() {
            return this._super();
        },
        actions: {
            willTransition: function willTransition() {
                this.set("controller.confirmCancelTransition", null);
                if (this.get("controller.isConfirmed")) {
                    this.set("controller.isConfirmed", false);
                    return true;
                } else {
                    return true;
                }
                return true;
            }
        }
    });
});
define('htis/routes/history/reports', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "report",
        controllerName: 'history.reports',
        parentControllerName: "history",
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            //进入加油单报表，需要清除所有加油单报表
            controller.send("clearReports");
            return this._super();
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            controller.set("filterOption", null);
            controller.get("errors").clear();
            controller.send("clearReports");
            return this._super();
        },
        actions: {
            goFilter: function goFilter() {
                this.transitionTo('history.reports.filter');
            }
        }
    });
});
define('htis/routes/history/reports/filter', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        controllerName: 'history.reports.filter',
        parentControllerName: "history.reports",
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isConfirmingCancel", false);
            var p_controller = this.controllerFor(this.parentControllerName);
            controller.send("syncOption", p_controller.get("filterOption"));
            return this._super();
        },
        deactivate: function deactivate() {
            return this._super();
        },
        actions: {
            willTransition: function willTransition() {
                this.set("controller.confirmCancelTransition", null);
                if (this.get("controller.isConfirmed")) {
                    this.set("controller.isConfirmed", false);
                    return true;
                } else {
                    return true;
                }
                return true;
            }
        }
    });
});
define("htis/routes/index", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        beforeModel: function beforeModel() {
            var isLogined = this.controllerFor("session").get("isLogined");
            if (isLogined) {
                //这里如果用transitionTo，则浏览器返回上一页会有bug，即永远只能进入start或login，而不能返回到真正的上一页
                this.replaceWith('start');
            } else {
                this.transitionTo('login');
            }
        }
    });
});
define('htis/routes/loading', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("htis/routes/login", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        beforeModel: function beforeModel() {
            var isLogined = this.controllerFor("session").get("isLogined");
            if (isLogined) {
                this.replaceWith('start');
            }
        },
        model: function model() {
            return this.store.createRecord("login", {});
        },
        deactivate: function deactivate() {
            var _this = this;

            //把所有用于交互的临时数据删除
            _ember["default"].run.next(function () {
                _this.store.unloadAll("login");
            });
            return this;
        }
    });
});
define("htis/routes/manage", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        activate: function activate() {
            var controller = this.controllerFor("manage");
            controller.set("isActive", true);
            return this;
        },
        deactivate: function deactivate() {
            this.send("unloadArchiveds");
            var controller = this.controllerFor("manage");
            controller.set("isActive", false);
            return this;
        },
        actions: {
            didTransition: function didTransition() {
                if (this.controller.get("equipment.isXs")) {
                    return;
                }
                //当发现没有选项时选中默认的roles
                if (!this.controller.get("selection")) {
                    this.replaceWith('manage.pendings');
                }
            },
            goHome: function goHome() {
                this.transitionTo('start');
            },
            goSearchs: function goSearchs() {
                this.transitionTo('manage.searchs');
            },
            goPendings: function goPendings() {
                this.transitionTo('manage.pendings');
            },
            goUnuseds: function goUnuseds() {
                this.transitionTo('manage.unuseds');
            },
            goReleases: function goReleases() {
                this.transitionTo('manage.releases');
            },
            goDisables: function goDisables() {
                this.transitionTo('manage.disables');
            },
            goArchives: function goArchives() {
                this.transitionTo('manage.archives');
            },
            goNew: function goNew() {
                this.transitionTo('manage.unuseds.new');
            }
        }
    });
});
define('htis/routes/manage/archives', ['exports', 'ember', 'htis/mixins/standard-list/route', 'htis/mixins/archive-cars/route'], function (exports, _ember, _htisMixinsStandardListRoute, _htisMixinsArchiveCarsRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], _htisMixinsArchiveCarsRoute['default'], {
        modelName: "archive",
        controllerName: 'manage.archives',
        parentControllerName: "manage",
        model: function model() {
            return this.store.peekAll('car');
        },
        actions: {
            goNew: function goNew() {
                return true;
            }
        }
    });
});
define('htis/routes/manage/archives/archive', ['exports', 'ember', 'htis/mixins/standard-detail/route', 'htis/mixins/instance-list/route', 'htis/mixins/instance-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute, _htisMixinsInstanceListRoute, _htisMixinsInstanceDetailRoute) {
							exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], _htisMixinsInstanceListRoute['default'], _htisMixinsInstanceDetailRoute['default'], {
														modelName: "car",
														controllerName: 'manage.archives.archive',
														parentControllerName: "manage.archives",
														actions: {
																					didTransition: function didTransition() {
																												var controller = this.controller;
																												if (controller.get("model.is_archived")) {
																																			return this._super();
																												} else {
																																			this.send("goBack");
																												}
																					}
														}
							});
});
define('htis/routes/manage/archives/archive/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'manage.archives.archive',
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isBaseFolded", false);
            return this._super();
        }
    });
});
define('htis/routes/manage/archives/archive/restore', ['exports', 'ember', 'htis/mixins/instance-detail/restore-car-route'], function (exports, _ember, _htisMixinsInstanceDetailRestoreCarRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailRestoreCarRoute['default'], {
        controllerName: 'manage.archives.archive'
    });
});
define('htis/routes/manage/archives/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/cars', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/cars/car', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/cars/car/edit', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/cars/new', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/disables', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "disable",
        controllerName: 'manage.disables',
        parentControllerName: "manage",
        model: function model() {
            return this.store.peekAll('car');
        },
        actions: {
            goNew: function goNew() {
                return true;
            }
        }
    });
});
define('htis/routes/manage/disables/disable', ['exports', 'ember', 'htis/mixins/standard-detail/route', 'htis/mixins/instance-list/route', 'htis/mixins/instance-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute, _htisMixinsInstanceListRoute, _htisMixinsInstanceDetailRoute) {
							exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], _htisMixinsInstanceListRoute['default'], _htisMixinsInstanceDetailRoute['default'], {
														modelName: "car",
														controllerName: 'manage.disables.disable',
														parentControllerName: "manage.disables",
														actions: {
																					didTransition: function didTransition() {
																												var controller = this.controller;
																												if (controller.get("model.isDisable")) {
																																			return this._super();
																												} else {
																																			this.send("goBack");
																												}
																					}
														}
							});
});
define('htis/routes/manage/disables/disable/archive', ['exports', 'ember', 'htis/mixins/instance-detail/archive-car-route'], function (exports, _ember, _htisMixinsInstanceDetailArchiveCarRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailArchiveCarRoute['default'], {
        controllerName: 'manage.disables.disable',
        statusName: 'isDisable'
    });
});
define('htis/routes/manage/disables/disable/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'manage.disables.disable',
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isBaseFolded", false);
            return this._super();
        }
    });
});
define('htis/routes/manage/disables/disable/newinstance', ['exports', 'ember', 'htis/mixins/instance-detail/new-route'], function (exports, _ember, _htisMixinsInstanceDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailNewRoute['default'], {
        controllerName: 'manage.disables.disable',
        statusName: 'isDisable'
    });
});
define('htis/routes/manage/disables/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/new', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/pendings', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "pending",
        controllerName: 'manage.pendings',
        parentControllerName: "manage",
        model: function model() {
            return this.store.peekAll('car');
        },
        actions: {
            goNew: function goNew() {
                return true;
            }
        }
    });
});
define('htis/routes/manage/pendings/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/pendings/pending', ['exports', 'ember', 'htis/mixins/standard-detail/route', 'htis/mixins/instance-list/route', 'htis/mixins/instance-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute, _htisMixinsInstanceListRoute, _htisMixinsInstanceDetailRoute) {
							exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], _htisMixinsInstanceListRoute['default'], _htisMixinsInstanceDetailRoute['default'], {
														modelName: "car",
														controllerName: 'manage.pendings.pending',
														parentControllerName: "manage.pendings",
														actions: {
																					didTransition: function didTransition() {
																												var controller = this.controller;
																												if (controller.get("model.isPending")) {
																																			return this._super();
																												} else {
																																			this.send("goBack");
																												}
																					}
														}
							});
});
define('htis/routes/manage/pendings/pending/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'manage.pendings.pending',
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isBaseFolded", false);
            return this._super();
        }
    });
});
define('htis/routes/manage/pendings/pending/newinstance', ['exports', 'ember', 'htis/mixins/instance-detail/new-route'], function (exports, _ember, _htisMixinsInstanceDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailNewRoute['default'], {
        controllerName: 'manage.pendings.pending',
        statusName: 'isPending'
    });
});
define('htis/routes/manage/releases', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "release",
        controllerName: 'manage.releases',
        parentControllerName: "manage",
        model: function model() {
            return this.store.peekAll('car');
        },
        actions: {
            goNew: function goNew() {
                return true;
            }
        }
    });
});
define('htis/routes/manage/releases/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/releases/release', ['exports', 'ember', 'htis/mixins/standard-detail/route', 'htis/mixins/instance-list/route', 'htis/mixins/instance-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute, _htisMixinsInstanceListRoute, _htisMixinsInstanceDetailRoute) {
							exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], _htisMixinsInstanceListRoute['default'], _htisMixinsInstanceDetailRoute['default'], {
														modelName: "car",
														controllerName: 'manage.releases.release',
														parentControllerName: "manage.releases",
														actions: {
																					didTransition: function didTransition() {
																												var controller = this.controller;
																												if (controller.get("model.isReleased")) {
																																			return this._super();
																												} else {
																																			this.send("goBack");
																												}
																					}
														}
							});
});
define('htis/routes/manage/releases/release/archive', ['exports', 'ember', 'htis/mixins/instance-detail/archive-car-route'], function (exports, _ember, _htisMixinsInstanceDetailArchiveCarRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailArchiveCarRoute['default'], {
        controllerName: 'manage.releases.release',
        statusName: 'isReleased'
    });
});
define('htis/routes/manage/releases/release/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'manage.releases.release',
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isBaseFolded", false);
            return this._super();
        }
    });
});
define('htis/routes/manage/releases/release/newinstance', ['exports', 'ember', 'htis/mixins/instance-detail/new-route'], function (exports, _ember, _htisMixinsInstanceDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailNewRoute['default'], {
        controllerName: 'manage.releases.release',
        statusName: 'isReleased'
    });
});
define('htis/routes/manage/searchs', ['exports', 'ember', 'htis/mixins/standard-list/route', 'htis/mixins/archive-cars/route'], function (exports, _ember, _htisMixinsStandardListRoute, _htisMixinsArchiveCarsRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], _htisMixinsArchiveCarsRoute['default'], {
        modelName: "search",
        controllerName: 'manage.searchs',
        parentControllerName: "manage",
        model: function model() {
            return this.store.peekAll('car');
        },
        actions: {
            goNew: function goNew() {
                return true;
            }
        }
    });
});
define('htis/routes/manage/searchs/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/searchs/search', ['exports', 'ember', 'htis/mixins/standard-detail/route', 'htis/mixins/instance-list/route', 'htis/mixins/instance-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute, _htisMixinsInstanceListRoute, _htisMixinsInstanceDetailRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], _htisMixinsInstanceListRoute['default'], _htisMixinsInstanceDetailRoute['default'], {
        modelName: "car",
        controllerName: 'manage.searchs.search',
        parentControllerName: "manage.searchs"
    });
});
define('htis/routes/manage/searchs/search/archive', ['exports', 'ember', 'htis/mixins/instance-detail/archive-car-route'], function (exports, _ember, _htisMixinsInstanceDetailArchiveCarRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailArchiveCarRoute['default'], {
        controllerName: 'manage.searchs.search',
        statusName: 'isSearch'
    });
});
define('htis/routes/manage/searchs/search/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'manage.searchs.search',
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isBaseFolded", false);
            return this._super();
        }
    });
});
define('htis/routes/manage/searchs/search/newinstance', ['exports', 'ember', 'htis/mixins/instance-detail/new-route'], function (exports, _ember, _htisMixinsInstanceDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailNewRoute['default'], {
        controllerName: 'manage.searchs.search',
        statusName: 'isSearch'
    });
});
define('htis/routes/manage/searchs/search/restore', ['exports', 'ember', 'htis/mixins/instance-detail/restore-car-route'], function (exports, _ember, _htisMixinsInstanceDetailRestoreCarRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailRestoreCarRoute['default'], {
        controllerName: 'manage.searchs.search'
    });
});
define('htis/routes/manage/unuseds', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "unused",
        controllerName: 'manage.unuseds',
        parentControllerName: "manage",
        model: function model() {
            return this.store.peekAll('car');
        },
        actions: {
            goNew: function goNew() {
                return true;
            }
        }
    });
});
define('htis/routes/manage/unuseds/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/routes/manage/unuseds/new', ['exports', 'ember', 'htis/mixins/standard-detail/new-route'], function (exports, _ember, _htisMixinsStandardDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailNewRoute['default'], {
        controllerName: 'manage.unuseds.unused',
        parentControllerName: "manage.unuseds",
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isBaseFolded", false);
            return this._super();
        },
        model: function model() {
            return this.controllerFor("manage").createRecord();
        },
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("manage").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/manage/unuseds/unused', ['exports', 'ember', 'htis/mixins/standard-detail/route', 'htis/mixins/instance-list/route', 'htis/mixins/instance-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute, _htisMixinsInstanceListRoute, _htisMixinsInstanceDetailRoute) {
							exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], _htisMixinsInstanceListRoute['default'], _htisMixinsInstanceDetailRoute['default'], {
														modelName: "car",
														controllerName: 'manage.unuseds.unused',
														parentControllerName: "manage.unuseds",
														actions: {
																					didTransition: function didTransition() {
																												var controller = this.controller;
																												if (controller.get("model.isUnused")) {
																																			return this._super();
																												} else {
																																			this.send("goBack");
																												}
																					}
														}
							});
});
define('htis/routes/manage/unuseds/unused/archive', ['exports', 'ember', 'htis/mixins/instance-detail/archive-car-route'], function (exports, _ember, _htisMixinsInstanceDetailArchiveCarRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailArchiveCarRoute['default'], {
        controllerName: 'manage.unuseds.unused',
        statusName: 'isUnused'
    });
});
define('htis/routes/manage/unuseds/unused/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'manage.unuseds.unused',
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.set("isBaseFolded", false);
            return this._super();
        },
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("manage").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/manage/unuseds/unused/newinstance', ['exports', 'ember', 'htis/mixins/instance-detail/new-route'], function (exports, _ember, _htisMixinsInstanceDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsInstanceDetailNewRoute['default'], {
        controllerName: 'manage.unuseds.unused',
        statusName: 'isUnused'
    });
});
define("htis/routes/online", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        parentControllerName: "start",
        beforeModel: function beforeModel(transition) {
            var sessionController = this.controllerFor("session");
            sessionController.checkSession(transition);
        },
        model: function model() {
            return this.store.peekAll("bill");
        },
        actions: {
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
            }
        }
    });
});
define('htis/routes/scanning', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        controllerName: 'scanning',
        parentControllerName: "start",
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            var p_controller = this.controllerFor(this.parentControllerName);
            p_controller.set("isFolded", true);
            controller.set("vinCode", "");
            controller.set("isChecking", false);
            controller.set("isConfirming", false);
            return this._super();
        },
        actions: {
            goFilling: function goFilling() {
                this.transitionTo(this.controllerName + '.filling');
            },
            goBack: function goBack() {
                //通知列表重新排序
                this.controllerFor("start").notifyPropertyChange("model");
                this._super();
            }
        }
    });
});
define('htis/routes/scanning/filling', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        controllerName: 'scanning.filling',
        parentControllerName: "scanning",
        model: function model() {
            var p_controller = this.controllerFor(this.parentControllerName);
            var car = p_controller.get("car");
            var instance = p_controller.get("instance");
            if (car && instance) {
                var currentUser = p_controller.get("sessionController.user");
                var oil = instance.get("oils.firstObject");
                var project = instance.get("project");
                var department = instance.get("department");
                return this.store.createRecord("bill", {
                    car: car,
                    instance: instance,
                    project: project,
                    department: department,
                    oil: oil,
                    oiler: currentUser,
                    time: new Date(),
                    creater: currentUser,
                    created_date: new Date()
                });
            } else {
                return null;
            }
        },
        afterModel: function afterModel(model, transition) {
            if (!model) {
                transition.send("goBack");
            }
        },
        activate: function activate() {
            var controller = this.controllerFor(this.controllerName);
            controller.send("resetOptions");
            return this._super();
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            var model = controller.get("model");
            var signature = controller.get("signature");
            if (signature) {
                if (signature.get("isNew")) {
                    //如果有签字没有提交，则撤销签字
                    controller.send("cancelSigning");
                } else {
                    //如果有签字但已提交，则还原签字为null
                    controller.set("signature", null);
                }
            }
            if (model && model.get("isNew")) {
                //如果model没有保存成功，说明很可能中途用户放弃该加油单，则需要同时删除其对应的签字
                controller.send("resetSignature");
            }
            if (model) {
                model.rollbackAttributes();
            }
            return this._super();
        },
        actions: {
            willTransition: function willTransition(transition) {
                var p_controller = this.controllerFor(this.parentControllerName);
                p_controller.set("vinCode", "");
                p_controller.set("isChecking", false);
                p_controller.set("isConfirming", false);

                this.set("controller.confirmCancelTransition", null);
                if (this.get("controller.isConfirmed")) {
                    this.set("controller.isConfirmed", false);
                    return true;
                } else if (this.get("controller.model.hasDirtyAttributes")) {
                    this.controller.send("showCancelConfirm", transition);
                    transition.abort();
                } else {
                    return true;
                }
                return true;
            },
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
                _ember['default'].run.next(function () {
                    window.$("input").focus();
                });
            }
        }
    });
});
define("htis/routes/setting", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        activate: function activate() {
            var controller = this.controllerFor("setting");
            controller.set("isActive", true);
            return this;
        },
        deactivate: function deactivate() {
            var controller = this.controllerFor("setting");
            controller.set("isActive", false);
            return this;
        },
        actions: {
            didTransition: function didTransition() {
                if (this.controller.get("equipment.isXs")) {
                    return;
                }
                //当发现没有选项时选中默认的roles
                if (!this.controller.get("selection")) {
                    this.replaceWith('setting.roles');
                }
            },
            goHome: function goHome() {
                this.transitionTo('start');
            },
            goRoles: function goRoles() {
                this.transitionTo('setting.roles');
            },
            goUsers: function goUsers() {
                this.transitionTo('setting.users');
            },
            goProjects: function goProjects() {
                this.transitionTo('setting.projects');
            },
            goDepartments: function goDepartments() {
                this.transitionTo('setting.departments');
            },
            goOils: function goOils() {
                this.transitionTo('setting.oils');
            },
            goPreference: function goPreference() {
                this.transitionTo('setting.preference');
            }
        }
    });
});
define('htis/routes/setting/departments', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "department",
        controllerName: 'setting.departments',
        parentControllerName: "setting"
    });
});
define('htis/routes/setting/departments/department', ['exports', 'ember', 'htis/mixins/standard-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], {
        modelName: "department",
        controllerName: 'setting.departments.department',
        parentControllerName: "setting.departments",
        isDeep: true
    });
});
define('htis/routes/setting/departments/department/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'setting.departments.department',
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/departments/new', ['exports', 'ember', 'htis/mixins/standard-detail/new-route'], function (exports, _ember, _htisMixinsStandardDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailNewRoute['default'], {
        controllerName: 'setting.departments.department',
        parentControllerName: "setting.departments",
        isDeep: true,
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/oils', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "oil",
        controllerName: 'setting.oils',
        parentControllerName: "setting"
    });
});
define('htis/routes/setting/oils/new', ['exports', 'ember', 'htis/mixins/standard-detail/new-route'], function (exports, _ember, _htisMixinsStandardDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailNewRoute['default'], {
        controllerName: 'setting.oils.oil',
        parentControllerName: "setting.oils",
        isDeep: true,
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/oils/oil', ['exports', 'ember', 'htis/mixins/standard-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], {
        modelName: "oil",
        controllerName: 'setting.oils.oil',
        parentControllerName: "setting.oils",
        isDeep: true
    });
});
define('htis/routes/setting/oils/oil/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'setting.oils.oil',
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/preference', ['exports', 'ember', 'htis/mixins/fit-pane/route'], function (exports, _ember, _htisMixinsFitPaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsFitPaneRoute['default'], {
        modelName: "preference",
        controllerName: 'setting.preference',
        parentControllerName: "setting",
        model: function model() {
            return this.store.peekAll(this.modelName).get("firstObject");
        },
        activate: function activate() {
            var p_controller = this.controllerFor(this.parentControllerName);
            p_controller.set('selection', '' + this.modelName);
            return this._super();
        },
        deactivate: function deactivate() {
            var p_controller = this.controllerFor(this.parentControllerName);
            p_controller.set('selection', null);
            return this._super();
        },
        actions: {
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
            },
            goEdit: function goEdit() {
                this.transitionTo(this.controllerName + '.edit');
            }
        }
    });
});
define('htis/routes/setting/preference/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'setting.preference',
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/projects', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "project",
        controllerName: 'setting.projects',
        parentControllerName: "setting"
    });
});
define('htis/routes/setting/projects/new', ['exports', 'ember', 'htis/mixins/standard-detail/new-route'], function (exports, _ember, _htisMixinsStandardDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailNewRoute['default'], {
        controllerName: 'setting.projects.project',
        parentControllerName: "setting.projects",
        isDeep: true,
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/projects/project', ['exports', 'ember', 'htis/mixins/standard-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], {
        modelName: "project",
        controllerName: 'setting.projects.project',
        parentControllerName: "setting.projects",
        isDeep: true
    });
});
define('htis/routes/setting/projects/project/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'setting.projects.project',
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/roles', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "role",
        controllerName: 'setting.roles',
        parentControllerName: "setting"
    });
});
define('htis/routes/setting/roles/new', ['exports', 'ember', 'htis/mixins/standard-detail/new-route'], function (exports, _ember, _htisMixinsStandardDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailNewRoute['default'], {
        controllerName: 'setting.roles.role',
        parentControllerName: "setting.roles",
        isDeep: true,
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/roles/role', ['exports', 'ember', 'htis/mixins/standard-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], {
        modelName: "role",
        controllerName: 'setting.roles.role',
        parentControllerName: "setting.roles",
        isDeep: true
    });
});
define('htis/routes/setting/roles/role/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'setting.roles.role',
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/users', ['exports', 'ember', 'htis/mixins/standard-list/route'], function (exports, _ember, _htisMixinsStandardListRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardListRoute['default'], {
        modelName: "user",
        controllerName: 'setting.users',
        parentControllerName: "setting"
    });
});
define('htis/routes/setting/users/new', ['exports', 'ember', 'htis/mixins/standard-detail/new-route'], function (exports, _ember, _htisMixinsStandardDetailNewRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailNewRoute['default'], {
        controllerName: 'setting.users.user',
        parentControllerName: "setting.users",
        isDeep: true,
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/users/user', ['exports', 'ember', 'htis/mixins/standard-detail/route'], function (exports, _ember, _htisMixinsStandardDetailRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailRoute['default'], {
        modelName: "user",
        controllerName: 'setting.users.user',
        parentControllerName: "setting.users",
        isDeep: true,
        actions: {
            goResetpwd: function goResetpwd() {
                this.transitionTo(this.controllerName + '.resetpwd');
            }
        }
    });
});
define('htis/routes/setting/users/user/edit', ['exports', 'ember', 'htis/mixins/standard-detail/edit-route'], function (exports, _ember, _htisMixinsStandardDetailEditRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsStandardDetailEditRoute['default'], {
        controllerName: 'setting.users.user',
        actions: {
            willTransition: function willTransition(transition) {
                if (this.controllerFor("setting").get("isPowered")) {
                    return this._super(transition);
                } else {
                    //在没有权限，比如退出系统时，不需要也不可以做弹出confirm框确认，因为弹出框会被none-power框替代
                    return true;
                }
            }
        }
    });
});
define('htis/routes/setting/users/user/resetpwd', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        renderTemplate: function renderTemplate(controller) {
            this.render('setting/users/user/resetpwd', { into: 'setting/users', controller: controller });
        },
        model: function model() {
            var curUserId = this.paramsFor("setting.users.user").id;
            return this.store.createRecord('resetpwd', {
                user: curUserId
            });
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            var model = controller.get("model");
            if (model) {
                model.rollbackAttributes();
            }
            return this;
        },
        actions: {
            goIndex: function goIndex() {
                this.transitionTo('setting.users.user');
            }
        }
    });
});
define("htis/routes/shortcut", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        parentControllerName: "start",
        controllerName: "shortcut",
        beforeModel: function beforeModel(transition) {
            var sessionController = this.controllerFor("session");
            sessionController.checkSession(transition);
        },
        activate: function activate() {
            this.send("unloadArchiveds");
            var c_controller = this.controllerFor("changeset");
            //进入加油单列表，需要暂停changeset抓取
            c_controller.set("isPaused", true);
            var controller = this.controllerFor(this.controllerName);
            //进入加油单列表，需要清除所有加油单
            controller.send("clearReportsAndBills");
            controller.send("loadData");
            return true;
        },
        deactivate: function deactivate() {
            var controller = this.controller;
            controller.send("clearReportsAndBills");
            controller.get("errorsForReports").clear();
            controller.get("errorsForBills").clear();
            controller.set("totalCount", 0);
            //离开加油单列表，需要恢复changeset抓取
            var c_controller = this.controllerFor("changeset");
            c_controller.set("isPaused", false);
            return true;
        },
        actions: {
            goPreference: function goPreference() {
                this.transitionTo("shortcut.preference");
            },
            goBack: function goBack() {
                this.transitionTo(this.parentControllerName);
            }
        }
    });
});
define("htis/routes/start", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = _ember["default"].Route.extend({
        beforeModel: function beforeModel(transition) {
            var sessionController = this.controllerFor("session");
            sessionController.checkSession(transition);
        },
        model: function model() {
            return this.store.peekAll("bill");
        },
        actions: {
            goSetting: function goSetting() {
                this.transitionTo('setting');
            },
            goManage: function goManage() {
                this.transitionTo('manage');
            },
            goHistory: function goHistory() {
                this.transitionTo('history');
            },
            goShortcut: function goShortcut() {
                this.transitionTo('shortcut');
            },
            goValids: function goValids() {
                // this.transitionTo('valids');
            },
            goOnline: function goOnline() {
                this.transitionTo('online');
            },
            goScanning: function goScanning() {
                this.transitionTo('scanning');
            },
            goBill: function goBill(bill) {
                this.transitionTo('start.bill', bill);
            }
        }
    });
});
define('htis/routes/start/bill', ['exports', 'ember', 'htis/mixins/navigable-pane/route'], function (exports, _ember, _htisMixinsNavigablePaneRoute) {
    exports['default'] = _ember['default'].Route.extend(_htisMixinsNavigablePaneRoute['default'], {
        modelName: "bill",
        controllerName: 'start.bill',
        parentControllerName: "start",
        model: function model(params) {
            var curId = params['id'];
            return this.store.peekRecord(this.modelName, curId);
        },
        afterModel: function afterModel(model, transition) {
            if (!model) {
                transition.send("goBack");
            }
        },
        activate: function activate() {
            var p_controller = this.controllerFor(this.parentControllerName);
            p_controller.set("isFolded", true);
            return this._super();
        }
    });
});
define('htis/routes/startup', ['exports', 'ember', 'ember-data', 'htis/models/startup'], function (exports, _ember, _emberData, _htisModelsStartup) {
    exports['default'] = _ember['default'].Route.extend({
        unloadAllRecord: function unloadAllRecord() {
            this.store.unloadAll("startup");
        },
        model: function model() {
            var _this = this;

            var prom = this.store.createRecord("startup").save();
            prom.then(function () {
                _this.unloadAllRecord();
            }, function (reason) {
                //这里请求失败时整个model没有了要重新构建，并且返回到setupController函数后需要手动设置其model为返回值
                if (reason instanceof _emberData['default'].InvalidError) {
                    var errors = new _emberData['default'].Errors();
                    Object.keys(reason.errors).forEach(function (key) {
                        errors.add(_ember['default'].String.underscore(key), reason.errors[key]);
                    });
                    return {
                        errors: errors
                    };
                }
                _this.unloadAllRecord();
            });
            return prom;
        },
        setupController: function setupController(controller, model) {
            if (!(model instanceof _htisModelsStartup['default']) && model.errors) {
                controller.set("model", model);
            } else {
                controller.set("isStartupLoaded", true);
                var sessionController = this.controllerFor("session");
                sessionController.send("syncUser");
                controller.send("doSchedules");
                controller.fixScrollBug();
                var previousTransition = controller.get("previousTransition");
                if (previousTransition) {
                    controller.set("previousTransition", null);
                    _ember['default'].run.next(this, function () {
                        previousTransition.retry();
                    });
                } else {
                    this.send("goIndex");
                }
            }
        }
    });
});
define('htis/routes/valids', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('htis/serializers/application', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports['default'] = _emberData['default'].RESTSerializer.extend({ //ActiveModelSerializer/RESTSerializer
        primaryKey: 'Id',
        isNewSerializerAPI: true,
        attrs: {
            server_side_error: 'ServerSideError',
            is_changeset_error: 'IsChangesetError',
            err_msg_for_changeset: 'ErrMsgForChangeset'
        },
        normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
            var sync_token = null;
            if (payload.IsChangesetError) {
                this.extractChangesetError(payload.ErrMsgForChangeset);
            }
            delete payload.IsChangesetError;
            delete payload.ErrMsgForChangeset;
            if (payload.Startup) {
                var serializedStartup = {};
                for (var k in payload.Startup) {
                    serializedStartup[_ember['default'].String.underscore(k)] = payload.Startup[k];
                }
                sync_token = serializedStartup.sync_token;
                delete serializedStartup.id;
                delete serializedStartup.sync_token;
                this.extractStartup(store, serializedStartup);
            } else if (payload.Changeset) {
                var serializedChangeset = {};
                for (var k in payload.Changeset) {
                    serializedChangeset[_ember['default'].String.underscore(k)] = payload.Changeset[k];
                }
                sync_token = serializedChangeset.sync_token;
                delete serializedChangeset.id;
                delete serializedChangeset.sync_token;
                var capitalizedModelName = primaryModelClass.modelName.capitalize();
                this.extractChangeset(store, serializedChangeset, primaryModelClass.modelName, payload[capitalizedModelName] ? payload[capitalizedModelName]["Id"] : null);

                // var serializedChangeset = {};
                // for(let k in payload.Changeset){
                //     serializedChangeset[Ember.String.underscore(k)] = payload.Changeset[k];
                // }
                // sync_token = serializedChangeset.sync_token;
                // delete serializedChangeset.sync_token;
                // this.extractChangeset(
                //     store,
                //     serializedChangeset,
                //     type.typeKey,
                //     payload[type.typeKey] ? payload[type.typeKey]["Id"] : null
                // );
            }
            if (sync_token) {
                this.extractSyncToken(store, sync_token);
            }
            return this._super(store, primaryModelClass, payload, id, requestType);
        },
        serialize: function serialize(record, options) {
            return this._super(record, options);
        },
        keyForAttribute: function keyForAttribute(attr) {
            return _ember['default'].String.classify(attr);
        },
        keyForRelationship: function keyForRelationship(attr) {
            return _ember['default'].String.classify(attr);
        },
        extractMeta: function extractMeta(store, type, payload) {
            if (payload && payload.meta) {
                var serializedMeta = {};
                for (var k in payload.meta) {
                    serializedMeta[_ember['default'].String.underscore(k)] = payload.meta[k];
                }
                store.setMetadataFor(type, serializedMeta);
                delete payload.meta;
            }
        },
        // extract:function(store, type, payload, id, requestType){
        //     let sync_token = null;
        //     if(payload.IsChangesetError){
        //         this.extractChangesetError(payload.ErrMsgForChangeset);
        //     }
        //     delete payload.IsChangesetError;
        //     delete payload.ErrMsgForChangeset;
        //     if(payload.Startup){
        //         var serializedStartup = {};
        //         for(let k in payload.Startup){
        //             serializedStartup[Ember.String.underscore(k)] = payload.Startup[k];
        //         }
        //         sync_token = serializedStartup.sync_token;
        //         delete serializedStartup.sync_token;
        //         this.extractStartup(store,serializedStartup);
        //     }
        //     else if(payload.Changeset){
        //         var serializedChangeset = {};
        //         for(let k in payload.Changeset){
        //             serializedChangeset[Ember.String.underscore(k)] = payload.Changeset[k];
        //         }
        //         sync_token = serializedChangeset.sync_token;
        //         delete serializedChangeset.sync_token;
        //         this.extractChangeset(
        //             store,
        //             serializedChangeset,
        //             type.typeKey,
        //             payload[type.typeKey] ? payload[type.typeKey]["Id"] : null
        //         );
        //     }
        //     else if(payload.search){
        //         var serializedSearch = {};
        //         for(let k in payload.search){
        //             serializedSearch[Ember.String.underscore(k)] = payload.search[k];
        //         }
        //         delete serializedSearch.user;
        //         this.extractSearch(store,serializedSearch);
        //     }
        //     if(sync_token){
        //         this.extractSyncToken(store, sync_token);
        //     }
        //     return this._super(store, type, payload, id, requestType);
        // },
        extractChangesetError: function extractChangesetError(errMsg) {
            _ember['default'].error("There is an error for changeset fetching:%@".fmt(errMsg));
            this.container.lookup('controller:changeset').set("lastErrorToken", new Date());
        },
        extractStartup: function extractStartup(store, startup) {
            store.pushPayload(startup);
            // let instances = startup.instances;
            // let traces = startup.traces;
            // delete startup.instances;
            // delete startup.traces;
            // startup.traces = [];
            // startup.instances = [];
            // store.pushPayload(startup);
            // Ember.run.next(()=>{
            //     store.pushPayload({
            //         instances:instances
            //     });
            //     Ember.run.next(()=>{
            //         store.pushPayload({
            //             traces:traces
            //         });
            //     });
            // });
        },
        // extractArray:function(e,r,t){
        //     var i=this.normalizePayload(t);
        //     var n=r.typeKey;
        //     var a;
        //     for(var o in i){
        //         var s=o;
        //         var u=false;
        //         if(o.charAt(0)==="_"){
        //             u=true;s=o.substr(1)
        //         }
        //         var c=this.typeForRoot(s);
        //         if(!e.modelFactoryFor(c)){
        //             continue
        //         }
        //         var l=e.modelFor(c);
        //         var d=e.serializerFor(l);
        //         var h=!u&&l.typeKey===n;
        //         var f=Q.call(i[o],function(e){
        //             return d.normalize(l,e,o)
        //         },this);
        //         if(h){
        //             a=f
        //         }else{
        //             e.pushMany(c,f)
        //         }}
        //         return a
        // },
        extractChangeset: function extractChangeset(store, changeset, currentTypeKey, currentId) {
            //为防止新添加的记录可能依赖已删除的记录造成的潜在问题
            //一定要先加载添加和修改的记录，然后再加载删除的记录
            // var deleteds = changeset.deleteds;
            // var serializedDeleteds = this.extractArray(store,Hwv.Deleted,changeset.deleteds);
            var deleteds = [];
            if (changeset.deleteds) {
                deleteds = _ember['default'].copy(changeset.deleteds, true);
            }
            // for(var k in deleteds){
            //     serializedDeleteds[Ember.String.underscore(k)] = deleteds[k];
            // }
            delete changeset.deleteds;
            //因为添加或修改一条记录后，后台会同时返回change及当前记录
            //当前记录如果在changeset中存在，则需要删除掉，除了优化性能外
            //更重要的是在新增记录时，如果不删除重复项的话，会出现新增了两次记录的问题
            var currentObjsByType = changeset[_ember['default'].String.pluralize(currentTypeKey)];
            if (currentObjsByType) {
                var currentObj = currentObjsByType.findBy("Id", currentId);
                if (currentObj) {
                    currentObjsByType.removeObject(currentObj);
                }
            }
            //根据modified_date值是否有变化判断是否记录已更新到store中，清除changeset中的重复项
            for (var key in changeset) {
                var singularizeKey = key.singularize();
                var records = changeset[key];
                var tempId, tempRecord, tempModifiedDate;
                if (records.length > 0) {
                    changeset[key] = records.filter(function (record) {
                        tempId = record["Id"];
                        tempRecord = store.peekRecord(singularizeKey, tempId);
                        if (tempRecord) {
                            //如果本地存在相同记录，则对比其ModifiedDate属性时间来判断数据是否有变化，从而判断是否需要跳过该记录
                            tempModifiedDate = record["ModifiedDate"];
                            var equalTag = "modified_date";
                            if (!tempModifiedDate) {
                                equalTag = "created_date";
                                tempModifiedDate = record["CreatedDate"];
                            }
                            tempModifiedDate = store.container.lookup("transform:date").deserialize.call(null, tempModifiedDate);
                            if (tempModifiedDate.getTime() === tempRecord.get(equalTag).getTime()) {
                                return false;
                            } else {
                                return true;
                            }
                        } else {
                            return true;
                        }
                    });
                }
            }
            store.pushPayload(changeset); //添加和修改的记录直接覆盖加载即可
            //加载删除的记录，从store中unloadRecord
            //这里要加run.next是因为不加的话，会报错，需要先unloadchangeset再执行这边的unloadRecord
            _ember['default'].run.next(function () {
                deleteds.forEach(function (deleted) {
                    var model = _ember['default'].String.underscore(deleted["Model"]),
                        targetIds = deleted["TargetIds"].split(",");
                    targetIds.forEach(function (id) {
                        var record = store.peekRecord(model, id);
                        if (record) {
                            store.unloadRecord(record);
                        }
                    });
                });
            });
        },
        extractSyncToken: function extractSyncToken(store, sync_token) {
            this.container.lookup("controller:application").set("syncToken", this.container.lookup("transform:date").deserialize.call(null, sync_token));
        },
        extractSearch: function extractSearch(store, search) {
            store.pushPayload(search);
        }
        // pushPayload:function(store, payload){
        //     var data=this.normalizePayload(payload);
        //     for(var prop in data){
        //         var type=this.typeForRoot(prop);
        //         if(!store.modelFactoryFor(type,prop)){
        //             continue
        //         }
        //         var model=store.modelFor(type);
        //         var serializer=store.serializerFor(model);
        //         var normalizeDatas = Ember.makeArray(data[prop]).map(function(item){
        //             return serializer.normalize(model,item,prop)
        //         },this);
        //         store.pushMany(type,normalizeDatas)
        //     }
        // }
    });
});
define('htis/services/equipment', ['exports', 'ember'], function (exports, _ember) {
	exports['default'] = _ember['default'].Service.extend({
		failCount: 0,
		checkHiddenXsIsHidden: function checkHiddenXsIsHidden() {
			var _this = this;

			var displayValue = _ember['default'].$('.hidden-xs').eq(0).css("display");
			if (displayValue === undefined) {
				var _ret = (function () {
					var failCount = _this.get("failCount");
					if (failCount > 2) {
						//防止死循环的可能性（只有界面真的不存在hidden-xs样式类元素才会出现）
						return {
							v: false
						};
					}
					_ember['default'].run.next(function () {
						_this.set("failCount", failCount + 1);
						//有少部分界面会出来hidden-xs样式类元素还没有加载完成就进入该函数计算属性了，
						//比如，经测试进入权限缺失界面的时候一定会出现这种情况，
						//这会造成isXs属性值的误判，所以这里要增加延时通知重新计算的逻辑
						_this.notifyPropertyChange("isXs");
					});
					return {
						v: false
					};
				})();

				if (typeof _ret === 'object') return _ret.v;
			} else {
				return displayValue === "none";
			}
		},
		isXs: _ember['default'].computed(function () {
			return this.checkHiddenXsIsHidden();
		}),
		isNotXs: _ember['default'].computed.not("isXs")
	});
});
define("htis/templates/account", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 182
              },
              "end": {
                "line": 1,
                "column": 991
              }
            },
            "moduleName": "htis/templates/account.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel panel-primary");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading text-center");
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "title", "返回");
            dom.setAttribute(el4, "href", "javascript:void(0)");
            dom.setAttribute(el4, "class", "btn-back pull-left");
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-arrow-left");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "sr-only");
            var el6 = dom.createTextNode("返回");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-body panel-scroll");
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "list-group");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "class", "list-group-item");
            var el5 = dom.createTextNode("账户信息");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-chevron-right pull-right");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "class", "list-group-item");
            var el5 = dom.createTextNode("修改密码");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-chevron-right pull-right");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "btns");
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "class", "btn btn-danger btn-block");
            var el5 = dom.createTextNode("退出系统");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0, 0]);
            var element2 = dom.childAt(element1, [0]);
            var element3 = dom.childAt(element0, [1]);
            var element4 = dom.childAt(element3, [0]);
            var element5 = dom.childAt(element4, [0]);
            var element6 = dom.childAt(element4, [1]);
            var element7 = dom.childAt(element3, [1, 0]);
            var morphs = new Array(5);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createElementMorph(element5);
            morphs[3] = dom.createElementMorph(element6);
            morphs[4] = dom.createElementMorph(element7);
            return morphs;
          },
          statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 366], [1, 385]]]], ["content", "pannelTitle", ["loc", [null, [1, 537], [1, 552]]]], ["element", "action", ["goAccountInfo"], [], ["loc", [null, [1, 627], [1, 653]]]], ["element", "action", ["goAccountPwd"], [], ["loc", [null, [1, 753], [1, 778]]]], ["element", "action", ["logout"], [], ["loc", [null, [1, 907], [1, 926]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 146
            },
            "end": {
              "line": 1,
              "column": 1020
            }
          },
          "moduleName": "htis/templates/account.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 210], [1, 219]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 229], [1, 237]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 245], [1, 251]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 259], [1, 265]]]]], [], []]], 0, null, ["loc", [null, [1, 182], [1, 1010]]]], ["content", "outlet", ["loc", [null, [1, 1010], [1, 1020]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1045
          }
        },
        "moduleName": "htis/templates/account.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "account");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element8, 'class');
        morphs[2] = dom.createMorphAt(element8, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main opacity09 trans-all-05 ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 96], [1, 130]]]], "is-folded"], [], ["loc", [null, [1, 91], [1, 144]]]]]]], ["block", "container-wrap", [], ["isBoxShadow", true], 0, null, ["loc", [null, [1, 146], [1, 1039]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/account/info", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 762
                },
                "end": {
                  "line": 1,
                  "column": 857
                }
              },
              "moduleName": "htis/templates/account/info.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 654
              },
              "end": {
                "line": 1,
                "column": 864
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "input", [], ["id", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [1, 707], [1, 717]]]]], [], []], "placeholder", "请输入真实姓名", "class", "form-control"], ["loc", [null, [1, 671], [1, 762]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [1, 768], [1, 785]]]]], [], 0, null, ["loc", [null, [1, 762], [1, 864]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 864
              },
              "end": {
                "line": 1,
                "column": 921
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "form-control-static");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "model.name", ["loc", [null, [1, 903], [1, 917]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 928
              },
              "end": {
                "line": 1,
                "column": 1025
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 1002], [1, 1019]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1354
                },
                "end": {
                  "line": 1,
                  "column": 1450
                }
              },
              "moduleName": "htis/templates/account/info.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1245
              },
              "end": {
                "line": 1,
                "column": 1457
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "input", [], ["id", "phone", "type", "tel", "value", ["subexpr", "@mut", [["get", "model.phone", ["loc", [null, [1, 1298], [1, 1309]]]]], [], []], "placeholder", "请输入手机号码", "class", "form-control"], ["loc", [null, [1, 1262], [1, 1354]]]], ["block", "if", [["get", "model.errors.phone", ["loc", [null, [1, 1360], [1, 1378]]]]], [], 0, null, ["loc", [null, [1, 1354], [1, 1457]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1457
              },
              "end": {
                "line": 1,
                "column": 1515
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "form-control-static");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "model.phone", ["loc", [null, [1, 1496], [1, 1511]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1522
              },
              "end": {
                "line": 1,
                "column": 1620
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 1597], [1, 1614]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child6 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1947
                },
                "end": {
                  "line": 1,
                  "column": 2043
                }
              },
              "moduleName": "htis/templates/account/info.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1839
              },
              "end": {
                "line": 1,
                "column": 2050
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "input", [], ["id", "email", "type", "text", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [1, 1893], [1, 1904]]]]], [], []], "placeholder", "请输入邮箱", "class", "form-control"], ["loc", [null, [1, 1856], [1, 1947]]]], ["block", "if", [["get", "model.errors.email", ["loc", [null, [1, 1953], [1, 1971]]]]], [], 0, null, ["loc", [null, [1, 1947], [1, 2050]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child7 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2050
              },
              "end": {
                "line": 1,
                "column": 2108
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "form-control-static");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "model.email", ["loc", [null, [1, 2089], [1, 2104]]]]],
          locals: [],
          templates: []
        };
      })();
      var child8 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2115
              },
              "end": {
                "line": 1,
                "column": 2213
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 2190], [1, 2207]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child9 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2652
                },
                "end": {
                  "line": 1,
                  "column": 2718
                }
              },
              "moduleName": "htis/templates/account/info.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "text-success");
              var el2 = dom.createTextNode("需要签字");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2718
                },
                "end": {
                  "line": 1,
                  "column": 2764
                }
              },
              "moduleName": "htis/templates/account/info.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "text-danger");
              var el2 = dom.createTextNode("不需要签字");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2453
              },
              "end": {
                "line": 1,
                "column": 2782
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "for", "is_sign_needed");
            dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
            var el3 = dom.createTextNode("加油签字");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.is_sign_needed", ["loc", [null, [1, 2658], [1, 2678]]]]], [], 0, 1, ["loc", [null, [1, 2652], [1, 2771]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child10 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3128
                },
                "end": {
                  "line": 1,
                  "column": 3228
                }
              },
              "moduleName": "htis/templates/account/info.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2998
              },
              "end": {
                "line": 1,
                "column": 3235
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "textarea", [], ["id", "signature", "type", "text", "rows", "4", "value", ["subexpr", "@mut", [["get", "model.signature", ["loc", [null, [1, 3068], [1, 3083]]]]], [], []], "placeholder", "请输入个性签名", "class", "form-control"], ["loc", [null, [1, 3015], [1, 3128]]]], ["block", "if", [["get", "model.errors.signature", ["loc", [null, [1, 3134], [1, 3156]]]]], [], 0, null, ["loc", [null, [1, 3128], [1, 3235]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child11 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3235
              },
              "end": {
                "line": 1,
                "column": 3297
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "form-control-static");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "model.signature", ["loc", [null, [1, 3274], [1, 3293]]]]],
          locals: [],
          templates: []
        };
      })();
      var child12 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3304
              },
              "end": {
                "line": 1,
                "column": 3406
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 3383], [1, 3400]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child13 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3465
                },
                "end": {
                  "line": 1,
                  "column": 3587
                }
              },
              "moduleName": "htis/templates/account/info.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-center text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 3564], [1, 3581]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3436
              },
              "end": {
                "line": 1,
                "column": 3596
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "model.errors.server_side_error", ["loc", [null, [1, 3473], [1, 3503]]]]], [], 0, null, ["loc", [null, [1, 3465], [1, 3596]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child14 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3603
              },
              "end": {
                "line": 1,
                "column": 3832
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "btn btn-default btn-block");
            var el2 = dom.createTextNode("取消");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createElementMorph(element1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["inline", "spin-button", [], ["action", "save", "isLoading", ["subexpr", "@mut", [["get", "model.isSaving", ["loc", [null, [1, 3658], [1, 3672]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "model.isUnSavable", ["loc", [null, [1, 3684], [1, 3701]]]]], [], []], "title", "保存", "class", "btn btn-info btn-block"], ["loc", [null, [1, 3620], [1, 3745]]]], ["element", "action", ["cancel"], [], ["loc", [null, [1, 3753], [1, 3772]]]]],
          locals: [],
          templates: []
        };
      })();
      var child15 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3832
              },
              "end": {
                "line": 1,
                "column": 3922
              }
            },
            "moduleName": "htis/templates/account/info.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "btn btn-info btn-block");
            var el2 = dom.createTextNode("修改");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["edit"], [], ["loc", [null, [1, 3848], [1, 3865]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 3947
            }
          },
          "moduleName": "htis/templates/account/info.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading text-center");
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "title", "返回");
          dom.setAttribute(el4, "href", "javascript:void(0)");
          dom.setAttribute(el4, "class", "btn-back pull-left");
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "glyphicon glyphicon-arrow-left");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "class", "sr-only");
          var el6 = dom.createTextNode("返回");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body panel-scroll");
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3, "class", "list-group form-horizontal");
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "name");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("姓名");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "phone");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("手机号");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "email");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("邮箱");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4, "class", "list-group-item form-group has-feedback");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "role");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("所属角色");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createElement("p");
          dom.setAttribute(el6, "class", "form-control-static");
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "signature");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("个性签名");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [0]);
          var element3 = dom.childAt(element2, [0, 0]);
          var element4 = dom.childAt(element3, [0]);
          var element5 = dom.childAt(element2, [1]);
          var element6 = dom.childAt(element5, [0]);
          var element7 = dom.childAt(element6, [0]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element6, [1]);
          var element10 = dom.childAt(element9, [1]);
          var element11 = dom.childAt(element6, [2]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element6, [5]);
          var element14 = dom.childAt(element13, [1]);
          var element15 = dom.childAt(element5, [1]);
          var morphs = new Array(18);
          morphs[0] = dom.createElementMorph(element4);
          morphs[1] = dom.createMorphAt(element3, 1, 1);
          morphs[2] = dom.createAttrMorph(element7, 'class');
          morphs[3] = dom.createMorphAt(element8, 0, 0);
          morphs[4] = dom.createMorphAt(element8, 1, 1);
          morphs[5] = dom.createAttrMorph(element9, 'class');
          morphs[6] = dom.createMorphAt(element10, 0, 0);
          morphs[7] = dom.createMorphAt(element10, 1, 1);
          morphs[8] = dom.createAttrMorph(element11, 'class');
          morphs[9] = dom.createMorphAt(element12, 0, 0);
          morphs[10] = dom.createMorphAt(element12, 1, 1);
          morphs[11] = dom.createMorphAt(dom.childAt(element6, [3, 1, 0]), 0, 0);
          morphs[12] = dom.createMorphAt(element6, 4, 4);
          morphs[13] = dom.createAttrMorph(element13, 'class');
          morphs[14] = dom.createMorphAt(element14, 0, 0);
          morphs[15] = dom.createMorphAt(element14, 1, 1);
          morphs[16] = dom.createMorphAt(element15, 0, 0);
          morphs[17] = dom.createMorphAt(element15, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 184], [1, 203]]]], ["content", "pannelTitle", ["loc", [null, [1, 355], [1, 370]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.name.length", ["loc", [null, [1, 513], [1, 537]]]], "has-error"], [], ["loc", [null, [1, 508], [1, 551]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 660], [1, 669]]]]], [], 0, 1, ["loc", [null, [1, 654], [1, 928]]]], ["block", "each", [["get", "model.errors.name", ["loc", [null, [1, 936], [1, 953]]]]], [], 2, null, ["loc", [null, [1, 928], [1, 1034]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.phone.length", ["loc", [null, [1, 1101], [1, 1126]]]], "has-error"], [], ["loc", [null, [1, 1096], [1, 1140]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1251], [1, 1260]]]]], [], 3, 4, ["loc", [null, [1, 1245], [1, 1522]]]], ["block", "each", [["get", "model.errors.phone", ["loc", [null, [1, 1530], [1, 1548]]]]], [], 5, null, ["loc", [null, [1, 1522], [1, 1629]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.email.length", ["loc", [null, [1, 1696], [1, 1721]]]], "has-error"], [], ["loc", [null, [1, 1691], [1, 1735]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1845], [1, 1854]]]]], [], 6, 7, ["loc", [null, [1, 1839], [1, 2115]]]], ["block", "each", [["get", "model.errors.email", ["loc", [null, [1, 2123], [1, 2141]]]]], [], 8, null, ["loc", [null, [1, 2115], [1, 2222]]]], ["content", "model.role.name", ["loc", [null, [1, 2419], [1, 2438]]]], ["block", "if", [["get", "model.isBillScannerPowered", ["loc", [null, [1, 2459], [1, 2485]]]]], [], 9, null, ["loc", [null, [1, 2453], [1, 2789]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.signature.length", ["loc", [null, [1, 2845], [1, 2874]]]], "has-error"], [], ["loc", [null, [1, 2840], [1, 2888]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 3004], [1, 3013]]]]], [], 10, 11, ["loc", [null, [1, 2998], [1, 3304]]]], ["block", "each", [["get", "model.errors.signature", ["loc", [null, [1, 3312], [1, 3334]]]]], [], 12, null, ["loc", [null, [1, 3304], [1, 3415]]]], ["block", "if", [["get", "model.errors.messages", ["loc", [null, [1, 3442], [1, 3463]]]]], [], 13, null, ["loc", [null, [1, 3436], [1, 3603]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 3609], [1, 3618]]]]], [], 14, 15, ["loc", [null, [1, 3603], [1, 3929]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3976
          }
        },
        "moduleName": "htis/templates/account/info.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 3966]]]], ["content", "outlet", ["loc", [null, [1, 3966], [1, 3976]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/account/info/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/account/info/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/account/info/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/account/info/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/account/pwd", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 781
              },
              "end": {
                "line": 1,
                "column": 884
              }
            },
            "moduleName": "htis/templates/account/pwd.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 891
              },
              "end": {
                "line": 1,
                "column": 996
              }
            },
            "moduleName": "htis/templates/account/pwd.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 973], [1, 990]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1340
              },
              "end": {
                "line": 1,
                "column": 1443
              }
            },
            "moduleName": "htis/templates/account/pwd.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1450
              },
              "end": {
                "line": 1,
                "column": 1555
              }
            },
            "moduleName": "htis/templates/account/pwd.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 1532], [1, 1549]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1916
              },
              "end": {
                "line": 1,
                "column": 2023
              }
            },
            "moduleName": "htis/templates/account/pwd.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2030
              },
              "end": {
                "line": 1,
                "column": 2139
              }
            },
            "moduleName": "htis/templates/account/pwd.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 2116], [1, 2133]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child6 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2169
              },
              "end": {
                "line": 1,
                "column": 2291
              }
            },
            "moduleName": "htis/templates/account/pwd.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-center text-danger");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 2268], [1, 2285]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 2429
            }
          },
          "moduleName": "htis/templates/account/pwd.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel panel-primary");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading text-center");
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "title", "返回");
          dom.setAttribute(el4, "href", "javascript:void(0)");
          dom.setAttribute(el4, "class", "btn-back pull-left");
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "glyphicon glyphicon-arrow-left");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "class", "sr-only");
          var el6 = dom.createTextNode("返回");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-body panel-scroll");
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3, "class", "list-group form-horizontal");
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "old_password");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("旧密码");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "new_password");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("新密码");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "confirm_password");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("确认密码");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-8 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [0, 0]);
          var element2 = dom.childAt(element1, [0]);
          var element3 = dom.childAt(element0, [1]);
          var element4 = dom.childAt(element3, [0]);
          var element5 = dom.childAt(element4, [0]);
          var element6 = dom.childAt(element5, [1]);
          var element7 = dom.childAt(element4, [1]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element4, [2]);
          var element10 = dom.childAt(element9, [1]);
          var element11 = dom.childAt(element3, [1]);
          var morphs = new Array(16);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element5, 'class');
          morphs[3] = dom.createMorphAt(element6, 0, 0);
          morphs[4] = dom.createMorphAt(element6, 1, 1);
          morphs[5] = dom.createMorphAt(element6, 2, 2);
          morphs[6] = dom.createAttrMorph(element7, 'class');
          morphs[7] = dom.createMorphAt(element8, 0, 0);
          morphs[8] = dom.createMorphAt(element8, 1, 1);
          morphs[9] = dom.createMorphAt(element8, 2, 2);
          morphs[10] = dom.createAttrMorph(element9, 'class');
          morphs[11] = dom.createMorphAt(element10, 0, 0);
          morphs[12] = dom.createMorphAt(element10, 1, 1);
          morphs[13] = dom.createMorphAt(element10, 2, 2);
          morphs[14] = dom.createMorphAt(element11, 0, 0);
          morphs[15] = dom.createMorphAt(element11, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 184], [1, 203]]]], ["content", "pannelTitle", ["loc", [null, [1, 355], [1, 370]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.old_password.length", ["loc", [null, [1, 513], [1, 545]]]], "has-error"], [], ["loc", [null, [1, 508], [1, 559]]]]]]], ["inline", "input", [], ["id", "old_password", "type", "password", "value", ["subexpr", "@mut", [["get", "model.old_password", ["loc", [null, [1, 719], [1, 737]]]]], [], []], "placeholder", "请输入旧密码", "class", "form-control"], ["loc", [null, [1, 671], [1, 781]]]], ["block", "if", [["get", "model.errors.old_password", ["loc", [null, [1, 787], [1, 812]]]]], [], 0, null, ["loc", [null, [1, 781], [1, 891]]]], ["block", "each", [["get", "model.errors.old_password", ["loc", [null, [1, 899], [1, 924]]]]], [], 1, null, ["loc", [null, [1, 891], [1, 1005]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.new_password.length", ["loc", [null, [1, 1072], [1, 1104]]]], "has-error"], [], ["loc", [null, [1, 1067], [1, 1118]]]]]]], ["inline", "input", [], ["id", "new_password", "type", "password", "value", ["subexpr", "@mut", [["get", "model.new_password", ["loc", [null, [1, 1278], [1, 1296]]]]], [], []], "placeholder", "请输入新密码", "class", "form-control"], ["loc", [null, [1, 1230], [1, 1340]]]], ["block", "if", [["get", "model.errors.new_password", ["loc", [null, [1, 1346], [1, 1371]]]]], [], 2, null, ["loc", [null, [1, 1340], [1, 1450]]]], ["block", "each", [["get", "model.errors.new_password", ["loc", [null, [1, 1458], [1, 1483]]]]], [], 3, null, ["loc", [null, [1, 1450], [1, 1564]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.confirm_password.length", ["loc", [null, [1, 1631], [1, 1667]]]], "has-error"], [], ["loc", [null, [1, 1626], [1, 1681]]]]]]], ["inline", "input", [], ["id", "confirm_password", "type", "password", "value", ["subexpr", "@mut", [["get", "model.confirm_password", ["loc", [null, [1, 1850], [1, 1872]]]]], [], []], "placeholder", "请输入新密码", "class", "form-control"], ["loc", [null, [1, 1798], [1, 1916]]]], ["block", "if", [["get", "model.errors.confirm_password", ["loc", [null, [1, 1922], [1, 1951]]]]], [], 4, null, ["loc", [null, [1, 1916], [1, 2030]]]], ["block", "each", [["get", "model.errors.confirm_password", ["loc", [null, [1, 2038], [1, 2067]]]]], [], 5, null, ["loc", [null, [1, 2030], [1, 2148]]]], ["block", "each", [["get", "model.errors.server_side_error", ["loc", [null, [1, 2177], [1, 2207]]]]], [], 6, null, ["loc", [null, [1, 2169], [1, 2300]]]], ["inline", "spin-button", [], ["action", "save", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [1, 2338], [1, 2346]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isUnSavable", ["loc", [null, [1, 2356], [1, 2367]]]]], [], []], "title", "保存", "class", "btn btn-info btn-block"], ["loc", [null, [1, 2300], [1, 2411]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2458
          }
        },
        "moduleName": "htis/templates/account/pwd.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 2448]]]], ["content", "outlet", ["loc", [null, [1, 2448], [1, 2458]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 426
            },
            "end": {
              "line": 1,
              "column": 634
            }
          },
          "moduleName": "htis/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "changeset-error alert alert-danger");
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "btn btn-sm btn-block btn-danger");
          var el3 = dom.createTextNode("检测到多次数据同步失败，请检查网络连接是否正常！");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["fetchChangeset"], [], ["loc", [null, [1, 527], [1, 554]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 718
          }
        },
        "moduleName": "htis/templates/application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "footer navbar-fixed-bottom");
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "title", "关于我们");
        dom.setAttribute(el2, "class", "btn-left");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "glyphicon glyphicon-info-sign");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "sr-only");
        var el4 = dom.createTextNode("关于我们");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "target", "blank");
        dom.setAttribute(el2, "class", "author");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "hidden-xs");
        var el3 = dom.createTextNode("·");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "hidden-xs copyright");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "hidden-xs");
        var el3 = dom.createTextNode("·");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "hidden-xs version");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("audio");
        dom.setAttribute(el1, "id", "billAudio");
        dom.setAttribute(el1, "src", "http://192.168.0.99:86/musics/notify.mp3");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var element2 = dom.childAt(element1, [0]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
        morphs[5] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]], ["element", "action", ["goAbout"], ["on", "click"], ["loc", [null, [1, 53], [1, 84]]]], ["content", "author", ["loc", [null, [1, 238], [1, 248]]]], ["content", "copyright", ["loc", [null, [1, 318], [1, 331]]]], ["content", "version", ["loc", [null, [1, 402], [1, 413]]]], ["block", "if", [["get", "changesetController.isNeedToShowError", ["loc", [null, [1, 432], [1, 469]]]]], [], 0, null, ["loc", [null, [1, 426], [1, 641]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/common-alert", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 119
                },
                "end": {
                  "line": 1,
                  "column": 188
                }
              },
              "moduleName": "htis/templates/common-alert.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "customizedMsg", ["loc", [null, [1, 171], [1, 188]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 30
              },
              "end": {
                "line": 1,
                "column": 204
              }
            },
            "moduleName": "htis/templates/common-alert.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "alert-error", [], ["isCustomized", true, "action", "clearPop"], 0, null, ["loc", [null, [1, 119], [1, 204]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 220
            }
          },
          "moduleName": "htis/templates/common-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingCustomizedMsg", ["loc", [null, [1, 55], [1, 77]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 87], [1, 104]]]]], [], []], "isAlert", true], 0, null, ["loc", [null, [1, 30], [1, 220]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 249
              },
              "end": {
                "line": 1,
                "column": 377
              }
            },
            "moduleName": "htis/templates/common-alert.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "alert-error", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 350], [1, 355]]]]], [], []], "action", "clearError"], ["loc", [null, [1, 330], [1, 377]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 227
            },
            "end": {
              "line": 1,
              "column": 393
            }
          },
          "moduleName": "htis/templates/common-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingError", ["loc", [null, [1, 274], [1, 288]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 298], [1, 315]]]]], [], []], "isAlert", true], 0, null, ["loc", [null, [1, 249], [1, 393]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 426
              },
              "end": {
                "line": 1,
                "column": 574
              }
            },
            "moduleName": "htis/templates/common-alert.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "alert-warning", [], ["message", ["subexpr", "@mut", [["get", "confirmingCancelMsg", ["loc", [null, [1, 535], [1, 554]]]]], [], []], "action", "doCancel"], ["loc", [null, [1, 511], [1, 574]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 400
            },
            "end": {
              "line": 1,
              "column": 590
            }
          },
          "moduleName": "htis/templates/common-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isConfirmingCancel", ["loc", [null, [1, 451], [1, 469]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 479], [1, 496]]]]], [], []], "isAlert", true], 0, null, ["loc", [null, [1, 426], [1, 590]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 623
              },
              "end": {
                "line": 1,
                "column": 770
              }
            },
            "moduleName": "htis/templates/common-alert.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "alert-warning", [], ["message", "删除操作不可撤销，确定要删除吗？", "action", "doDelete"], ["loc", [null, [1, 708], [1, 770]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 597
            },
            "end": {
              "line": 1,
              "column": 786
            }
          },
          "moduleName": "htis/templates/common-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isConfirmingDelete", ["loc", [null, [1, 648], [1, 666]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 676], [1, 693]]]]], [], []], "isAlert", true], 0, null, ["loc", [null, [1, 623], [1, 786]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 793
          }
        },
        "moduleName": "htis/templates/common-alert.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isPickingCustomizedMsg", ["loc", [null, [1, 6], [1, 28]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 227]]]], ["block", "if", [["get", "isPickingError", ["loc", [null, [1, 233], [1, 247]]]]], [], 1, null, ["loc", [null, [1, 227], [1, 400]]]], ["block", "if", [["get", "isConfirmingCancel", ["loc", [null, [1, 406], [1, 424]]]]], [], 2, null, ["loc", [null, [1, 400], [1, 597]]]], ["block", "if", [["get", "isConfirmingDelete", ["loc", [null, [1, 603], [1, 621]]]]], [], 3, null, ["loc", [null, [1, 597], [1, 793]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("htis/templates/components/alert-error", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 246
            },
            "end": {
              "line": 1,
              "column": 275
            }
          },
          "moduleName": "htis/templates/components/alert-error.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [1, 266], [1, 275]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 283
              },
              "end": {
                "line": 1,
                "column": 351
              }
            },
            "moduleName": "htis/templates/components/alert-error.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 334], [1, 351]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 275
            },
            "end": {
              "line": 1,
              "column": 360
            }
          },
          "moduleName": "htis/templates/components/alert-error.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "model.errors.server_side_error", ["loc", [null, [1, 291], [1, 321]]]]], [], 0, null, ["loc", [null, [1, 283], [1, 360]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 374
          }
        },
        "moduleName": "htis/templates/components/alert-error.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "aria-hidden", "true");
        dom.setAttribute(el1, "class", "glyphicon glyphicon-exclamation-sign");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "sr-only");
        var el2 = dom.createTextNode("Error:");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1, "class", "btn-clear-error");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "glyphicon glyphicon-remove pull-right");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "alert-content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
        return morphs;
      },
      statements: [["element", "action", ["ok"], [], ["loc", [null, [1, 115], [1, 130]]]], ["block", "if", [["get", "isCustomized", ["loc", [null, [1, 252], [1, 264]]]]], [], 0, 1, ["loc", [null, [1, 246], [1, 367]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/components/alert-warning", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 367
          }
        },
        "moduleName": "htis/templates/components/alert-warning.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "aria-hidden", "true");
        dom.setAttribute(el1, "class", "glyphicon glyphicon-warning-sign");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "sr-only");
        var el2 = dom.createTextNode("Warning:");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1, "class", "btn-cancel pull-right");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "glyphicon glyphicon-remove");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1, "class", "btn-ok pull-right margin-right");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "alert-content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [3]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        return morphs;
      },
      statements: [["element", "action", ["cancel"], [], ["loc", [null, [1, 113], [1, 132]]]], ["element", "action", ["ok"], [], ["loc", [null, [1, 218], [1, 233]]]], ["content", "message", ["loc", [null, [1, 349], [1, 360]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/canvas-sign", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 26
            },
            "end": {
              "line": 1,
              "column": 326
            }
          },
          "moduleName": "htis/templates/components/canvas-sign.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "btns-center");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "role", "group");
          dom.setAttribute(el2, "class", "btn-group");
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-block btn-warning");
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "glyphicon glyphicon-remove left-icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("取消");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "help-block text-muted text-center");
          var el3 = dom.createTextNode("如果长时间无响应，可以取消重新提交");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [0, 0, 0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [["element", "action", ["abort"], [], ["loc", [null, [1, 111], [1, 129]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 326
            },
            "end": {
              "line": 1,
              "column": 802
            }
          },
          "moduleName": "htis/templates/components/canvas-sign.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "btns-center");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "role", "group");
          dom.setAttribute(el2, "class", "btn-group");
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "glyphicon glyphicon-ok left-icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("提交");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "glyphicon glyphicon-ban-circle left-icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("清除");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "btn btn-default");
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "glyphicon glyphicon-remove left-icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createTextNode("取消");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 0]);
          var element1 = dom.childAt(element0, [0]);
          var element2 = dom.childAt(element0, [1]);
          var element3 = dom.childAt(element0, [2]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["element", "action", ["submit"], [], ["loc", [null, [1, 403], [1, 422]]]], ["element", "action", ["reset"], [], ["loc", [null, [1, 531], [1, 549]]]], ["element", "action", ["cancel"], [], ["loc", [null, [1, 666], [1, 685]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 809
          }
        },
        "moduleName": "htis/templates/components/canvas-sign.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("canvas");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 17], [1, 26]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [1, 32], [1, 40]]]]], [], 0, 1, ["loc", [null, [1, 26], [1, 809]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/components/checkbox-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "htis/templates/components/checkbox-list-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "isChecked", ["loc", [null, [1, 8], [1, 17]]]]], [], ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/checkbox-list-value", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "htis/templates/components/checkbox-list-value.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "value", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/checkbox-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 64
            },
            "end": {
              "line": 1,
              "column": 115
            }
          },
          "moduleName": "htis/templates/components/checkbox-list.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "item", ["loc", [null, [1, 99], [1, 103]]]], ["get", "selection", ["loc", [null, [1, 104], [1, 113]]]]], [], ["loc", [null, [1, 91], [1, 115]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 130
          }
        },
        "moduleName": "htis/templates/components/checkbox-list.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "data-toggle", "buttons");
        dom.setAttribute(el1, "class", "btn-group btn-group-vertical");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "content", ["loc", [null, [1, 72], [1, 79]]]]], [], 0, null, ["loc", [null, [1, 64], [1, 124]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/components/compare-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 17
          }
        },
        "moduleName": "htis/templates/components/compare-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "isEqual", ["loc", [null, [1, 8], [1, 15]]]]], [], ["loc", [null, [1, 0], [1, 17]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/container-wrap", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 80
          }
        },
        "moduleName": "htis/templates/components/container-wrap.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["navigable-container ", ["subexpr", "if", [["get", "isBoxShadow", ["loc", [null, [1, 37], [1, 48]]]], "box-shadow"], [], ["loc", [null, [1, 32], [1, 63]]]]]]], ["content", "yield", ["loc", [null, [1, 65], [1, 74]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/date-picker-value", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 45
            }
          },
          "moduleName": "htis/templates/components/date-picker-value.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "timefmt", [["get", "startDate", ["loc", [null, [1, 27], [1, 36]]]], ["get", "format", ["loc", [null, [1, 37], [1, 43]]]]], [], ["loc", [null, [1, 17], [1, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 45
            },
            "end": {
              "line": 1,
              "column": 90
            }
          },
          "moduleName": "htis/templates/components/date-picker-value.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "text-warning");
          var el2 = dom.createTextNode("未选择");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 150
            },
            "end": {
              "line": 1,
              "column": 191
            }
          },
          "moduleName": "htis/templates/components/date-picker-value.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "timefmt", [["get", "endDate", ["loc", [null, [1, 175], [1, 182]]]], ["get", "format", ["loc", [null, [1, 183], [1, 189]]]]], [], ["loc", [null, [1, 165], [1, 191]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 191
            },
            "end": {
              "line": 1,
              "column": 236
            }
          },
          "moduleName": "htis/templates/components/date-picker-value.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "text-warning");
          var el2 = dom.createTextNode("未选择");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 243
          }
        },
        "moduleName": "htis/templates/components/date-picker-value.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "glyphicon glyphicon-arrow-right");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "startDate", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 97]]]], ["block", "if", [["get", "endDate", ["loc", [null, [1, 156], [1, 163]]]]], [], 2, 3, ["loc", [null, [1, 150], [1, 243]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("htis/templates/components/date-picker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "htis/templates/components/date-picker.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/datetime-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "htis/templates/components/datetime-input.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/default-index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 45
              },
              "end": {
                "line": 1,
                "column": 377
              }
            },
            "moduleName": "htis/templates/components/default-index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading text-center");
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-scroll");
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "fix-icon");
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "glyphicon glyphicon-file");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "icon-title");
            var el5 = dom.createElement("span");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 0]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 0, 1, 0]), 0, 0);
            return morphs;
          },
          statements: [["content", "title", ["loc", [null, [1, 193], [1, 202]]]], ["content", "tooltip", ["loc", [null, [1, 335], [1, 346]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 396
            }
          },
          "moduleName": "htis/templates/components/default-index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "navigable-pane", [], ["routeName", "manage.unuseds.index", "isActive", true], 0, null, ["loc", [null, [1, 45], [1, 396]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 415
          }
        },
        "moduleName": "htis/templates/components/default-index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "container-wrap", [], ["isMulti", true, "isRight", true], 0, null, ["loc", [null, [1, 0], [1, 415]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/components/detail-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 63
            },
            "end": {
              "line": 1,
              "column": 297
            }
          },
          "moduleName": "htis/templates/components/detail-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "javascript:void(0)");
          dom.setAttribute(el1, "class", "btn-back pull-left");
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "sr-only");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [0]);
          var element3 = dom.childAt(element2, [0]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element2, 'title');
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createAttrMorph(element3, 'class');
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "title", ["get", "leftButtonTitle", ["loc", [null, [1, 124], [1, 139]]]]], ["element", "action", ["leftAction"], [], ["loc", [null, [1, 92], [1, 115]]]], ["attribute", "class", ["concat", ["glyphicon ", ["get", "leftButtonIcon", ["loc", [null, [1, 219], [1, 233]]]]]]], ["content", "leftButtonTitle", ["loc", [null, [1, 266], [1, 285]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 304
            },
            "end": {
              "line": 1,
              "column": 543
            }
          },
          "moduleName": "htis/templates/components/detail-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "javascript:void(0)");
          dom.setAttribute(el1, "class", "btn-new pull-right");
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "sr-only");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [0]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "title", ["get", "rightButtonTitle", ["loc", [null, [1, 367], [1, 383]]]]], ["element", "action", ["rightAction"], [], ["loc", [null, [1, 334], [1, 358]]]], ["attribute", "class", ["concat", ["glyphicon ", ["get", "rightButtonIcon", ["loc", [null, [1, 463], [1, 478]]]]]]], ["content", "rightButtonTitle", ["loc", [null, [1, 511], [1, 531]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 617
          }
        },
        "moduleName": "htis/templates/components/detail-panel.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel-heading text-center");
        var el2 = dom.createElement("h3");
        dom.setAttribute(el2, "class", "panel-title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel-scroll");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element4, 0, 0);
        morphs[1] = dom.createMorphAt(element4, 1, 1);
        morphs[2] = dom.createMorphAt(element4, 2, 2);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLeftButtonNeeded", ["loc", [null, [1, 69], [1, 87]]]]], [], 0, null, ["loc", [null, [1, 63], [1, 304]]]], ["block", "if", [["get", "isRightButtonNeeded", ["loc", [null, [1, 310], [1, 329]]]]], [], 1, null, ["loc", [null, [1, 304], [1, 550]]]], ["content", "pannelTitle", ["loc", [null, [1, 550], [1, 565]]]], ["content", "yield", ["loc", [null, [1, 602], [1, 611]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/components/fold-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 99
          }
        },
        "moduleName": "htis/templates/components/fold-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "isFolded", ["loc", [null, [1, 8], [1, 16]]]]], [], ["loc", [null, [1, 0], [1, 18]]]], ["attribute", "class", ["concat", ["glyphicon pull-left ", ["subexpr", "if", [["get", "isFolded", ["loc", [null, [1, 56], [1, 64]]]], ["get", "foldedIcon", ["loc", [null, [1, 65], [1, 75]]]], ["get", "unfoldedIcon", ["loc", [null, [1, 76], [1, 88]]]]], [], ["loc", [null, [1, 51], [1, 90]]]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/list-panel-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "htis/templates/components/list-panel-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "isChecked", ["loc", [null, [1, 8], [1, 17]]]]], [], ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/list-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 63
            },
            "end": {
              "line": 1,
              "column": 288
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "javascript:void(0)");
          dom.setAttribute(el1, "class", "pull-left");
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "sr-only");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [0]);
          var element10 = dom.childAt(element9, [0]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element9, 'title');
          morphs[1] = dom.createElementMorph(element9);
          morphs[2] = dom.createAttrMorph(element10, 'class');
          morphs[3] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "title", ["get", "leftButtonTitle", ["loc", [null, [1, 124], [1, 139]]]]], ["element", "action", ["leftAction"], [], ["loc", [null, [1, 92], [1, 115]]]], ["attribute", "class", ["concat", ["glyphicon ", ["get", "leftButtonIcon", ["loc", [null, [1, 210], [1, 224]]]]]]], ["content", "leftButtonTitle", ["loc", [null, [1, 257], [1, 276]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 295
            },
            "end": {
              "line": 1,
              "column": 526
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "javascript:void(0)");
          dom.setAttribute(el1, "class", "pull-right");
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "sr-only");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [0]);
          var element8 = dom.childAt(element7, [0]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element7, 'title');
          morphs[1] = dom.createElementMorph(element7);
          morphs[2] = dom.createAttrMorph(element8, 'class');
          morphs[3] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "title", ["get", "rightButtonTitle", ["loc", [null, [1, 358], [1, 374]]]]], ["element", "action", ["rightAction"], [], ["loc", [null, [1, 325], [1, 349]]]], ["attribute", "class", ["concat", ["glyphicon ", ["get", "rightButtonIcon", ["loc", [null, [1, 446], [1, 461]]]]]]], ["content", "rightButtonTitle", ["loc", [null, [1, 494], [1, 514]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 834
              },
              "end": {
                "line": 1,
                "column": 940
              }
            },
            "moduleName": "htis/templates/components/list-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element5, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["glyphicon glyphicon-hourglass ", ["subexpr", "if", [["get", "isEnterLighted", ["loc", [null, [1, 901], [1, 915]]]], "text-danger"], [], ["loc", [null, [1, 896], [1, 931]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 940
              },
              "end": {
                "line": 1,
                "column": 1032
              }
            },
            "moduleName": "htis/templates/components/list-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["glyphicon glyphicon-search ", ["subexpr", "if", [["get", "isEnterLighted", ["loc", [null, [1, 993], [1, 1007]]]], "text-danger"], [], ["loc", [null, [1, 988], [1, 1023]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1180
                },
                "end": {
                  "line": 1,
                  "column": 1246
                }
              },
              "moduleName": "htis/templates/components/list-panel.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "text-warning");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "filterText", ["loc", [null, [1, 1225], [1, 1239]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1046
              },
              "end": {
                "line": 1,
                "column": 1353
              }
            },
            "moduleName": "htis/templates/components/list-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "input-group-addin addin-round pull-right");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [0]);
            var element3 = dom.childAt(element2, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element2, 'title');
            morphs[1] = dom.createElementMorph(element2);
            morphs[2] = dom.createMorphAt(element2, 0, 0);
            morphs[3] = dom.createAttrMorph(element3, 'class');
            return morphs;
          },
          statements: [["attribute", "title", ["get", "filterButtonTitle", ["loc", [null, [1, 1111], [1, 1128]]]]], ["element", "action", ["filterAction"], [], ["loc", [null, [1, 1077], [1, 1102]]]], ["block", "if", [["get", "filterText", ["loc", [null, [1, 1186], [1, 1196]]]]], [], 0, null, ["loc", [null, [1, 1180], [1, 1253]]]], ["attribute", "class", ["concat", ["glyphicon ", ["get", "filterButtonIcon", ["loc", [null, [1, 1278], [1, 1294]]]], " ", ["subexpr", "if", [["get", "isFilterButtonLighted", ["loc", [null, [1, 1302], [1, 1323]]]], "text-warning"], [], ["loc", [null, [1, 1297], [1, 1340]]]]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 559
            },
            "end": {
              "line": 1,
              "column": 1366
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "input-group search-box");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "input-group-addin addin-round pull-left");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [0]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element6, 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(element6, 2, 2);
          return morphs;
        },
        statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "searchKey", ["loc", [null, [1, 634], [1, 643]]]]], [], []], "enter", "enterSearchAction", "placeholder", ["subexpr", "@mut", [["get", "searchPlaceholder", ["loc", [null, [1, 682], [1, 699]]]]], [], []], "type", "text", "class", "ember-text-field form-control input-round input-addin-left"], ["loc", [null, [1, 620], [1, 780]]]], ["block", "if", [["get", "isSearching", ["loc", [null, [1, 840], [1, 851]]]]], [], 0, 1, ["loc", [null, [1, 834], [1, 1039]]]], ["block", "if", [["get", "isFilterButtonNeeded", ["loc", [null, [1, 1052], [1, 1072]]]]], [], 2, null, ["loc", [null, [1, 1046], [1, 1360]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1486
              },
              "end": {
                "line": 1,
                "column": 1533
              }
            },
            "moduleName": "htis/templates/components/list-panel.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "item", ["loc", [null, [1, 1521], [1, 1525]]]], ["get", "value", ["loc", [null, [1, 1526], [1, 1531]]]]], [], ["loc", [null, [1, 1513], [1, 1533]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1471
            },
            "end": {
              "line": 1,
              "column": 1542
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content", ["loc", [null, [1, 1494], [1, 1501]]]]], [], 0, null, ["loc", [null, [1, 1486], [1, 1542]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1550
              },
              "end": {
                "line": 1,
                "column": 1683
              }
            },
            "moduleName": "htis/templates/components/list-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "empty-box");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-road");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "empty-title");
            var el3 = dom.createTextNode("没有找到数据");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1542
            },
            "end": {
              "line": 1,
              "column": 1694
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isSearching", ["loc", [null, [1, 1560], [1, 1571]]]]], [], 0, null, ["loc", [null, [1, 1550], [1, 1694]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1701
            },
            "end": {
              "line": 1,
              "column": 1817
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "help-block text-danger text-center");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.message", ["loc", [null, [1, 1794], [1, 1811]]]]],
        locals: ["error"],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1826
            },
            "end": {
              "line": 1,
              "column": 1964
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "empty-box");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-hourglass");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "empty-title");
          var el3 = dom.createTextNode("Loading...");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1972
              },
              "end": {
                "line": 1,
                "column": 2211
              }
            },
            "moduleName": "htis/templates/components/list-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "title", "切换全部显示");
            dom.setAttribute(el1, "class", "btn btn-default btn-xs btn-block");
            var el2 = dom.createElement("span");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["element", "action", ["toggleToShowAll"], [], ["loc", [null, [1, 2005], [1, 2033]]]], ["attribute", "class", ["concat", ["glyphicon ", ["subexpr", "if", [["get", "isToShowAll", ["loc", [null, [1, 2132], [1, 2143]]]], "glyphicon-chevron-up", "glyphicon-chevron-down"], [], ["loc", [null, [1, 2127], [1, 2193]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2218
              },
              "end": {
                "line": 1,
                "column": 2426
              }
            },
            "moduleName": "htis/templates/components/list-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "spin-button", [], ["action", "fetchNextAction", "isIcon", true, "loadedIcon", "glyphicon-chevron-down", "isLoading", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [1, 2341], [1, 2352]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [1, 2364], [1, 2375]]]]], [], []], "title", "更多", "class", "btn btn-info btn-xs btn-block"], ["loc", [null, [1, 2244], [1, 2426]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1964
            },
            "end": {
              "line": 1,
              "column": 2433
            }
          },
          "moduleName": "htis/templates/components/list-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isTopButtonNeeded", ["loc", [null, [1, 1978], [1, 1995]]]]], [], 0, null, ["loc", [null, [1, 1972], [1, 2218]]]], ["block", "if", [["get", "isMoreButtonNeeded", ["loc", [null, [1, 2224], [1, 2242]]]]], [], 1, null, ["loc", [null, [1, 2218], [1, 2433]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2452
          }
        },
        "moduleName": "htis/templates/components/list-panel.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel-heading text-center");
        var el2 = dom.createElement("h3");
        dom.setAttribute(el2, "class", "panel-title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "list-group list-full");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [0, 0]);
        var element12 = dom.childAt(fragment, [2]);
        var element13 = dom.childAt(element12, [0]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(element11, 0, 0);
        morphs[1] = dom.createMorphAt(element11, 1, 1);
        morphs[2] = dom.createMorphAt(element11, 2, 2);
        morphs[3] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[4] = dom.createAttrMorph(element12, 'class');
        morphs[5] = dom.createMorphAt(element13, 0, 0);
        morphs[6] = dom.createMorphAt(element13, 1, 1);
        morphs[7] = dom.createMorphAt(element13, 2, 2);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLeftButtonNeeded", ["loc", [null, [1, 69], [1, 87]]]]], [], 0, null, ["loc", [null, [1, 63], [1, 295]]]], ["block", "if", [["get", "isRightButtonNeeded", ["loc", [null, [1, 301], [1, 320]]]]], [], 1, null, ["loc", [null, [1, 295], [1, 533]]]], ["content", "pannelTitle", ["loc", [null, [1, 533], [1, 548]]]], ["block", "if", [["get", "isSearchBoxNeeded", ["loc", [null, [1, 565], [1, 582]]]]], [], 2, null, ["loc", [null, [1, 559], [1, 1373]]]], ["attribute", "class", ["concat", ["panel-scroll ", ["subexpr", "if", [["get", "isSearchBoxNeeded", ["loc", [null, [1, 1403], [1, 1420]]]], "top-search"], [], ["loc", [null, [1, 1398], [1, 1435]]]]]]], ["block", "if", [["get", "content", ["loc", [null, [1, 1477], [1, 1484]]]]], [], 3, 4, ["loc", [null, [1, 1471], [1, 1701]]]], ["block", "each", [["get", "errors.server_side_error", ["loc", [null, [1, 1709], [1, 1733]]]]], [], 5, null, ["loc", [null, [1, 1701], [1, 1826]]]], ["block", "if", [["get", "isSearching", ["loc", [null, [1, 1832], [1, 1843]]]]], [], 6, 7, ["loc", [null, [1, 1826], [1, 2440]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("htis/templates/components/navigable-pane", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "htis/templates/components/navigable-pane.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/none-powered", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 19
              },
              "end": {
                "line": 1,
                "column": 543
              }
            },
            "moduleName": "htis/templates/components/none-powered.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading text-center");
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "title", "返回主页");
            dom.setAttribute(el4, "href", "javascript:void(0)");
            dom.setAttribute(el4, "class", "btn-back pull-left");
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-arrow-left");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "sr-only");
            var el6 = dom.createTextNode("返回主页");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-scroll");
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "fix-icon");
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "glyphicon glyphicon-ban-circle");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "icon-title text-danger");
            var el5 = dom.createElement("span");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0, 0]);
            var element2 = dom.childAt(element1, [0]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [1, 0, 1, 0]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["backAction"], [], ["loc", [null, [1, 162], [1, 185]]]], ["content", "title", ["loc", [null, [1, 341], [1, 350]]]], ["content", "tooltip", ["loc", [null, [1, 501], [1, 512]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 562
            }
          },
          "moduleName": "htis/templates/components/none-powered.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "navigable-pane", [], ["routeName", "none-powered", "isActive", true], 0, null, ["loc", [null, [1, 19], [1, 562]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 581
          }
        },
        "moduleName": "htis/templates/components/none-powered.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "container-wrap", [], [], 0, null, ["loc", [null, [1, 0], [1, 581]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/components/number-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "htis/templates/components/number-input.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/pick-up-pop", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 164
          }
        },
        "moduleName": "htis/templates/components/pick-up-pop.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "pick-up-shadow");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(element1, 0, 0);
        return morphs;
      },
      statements: [["element", "action", ["clearPop"], [], ["loc", [null, [1, 5], [1, 26]]]], ["attribute", "class", ["concat", ["pick-up-content trans-all-02 ", ["subexpr", "if", [["get", "isActive", ["loc", [null, [1, 102], [1, 110]]]], "active"], [], ["loc", [null, [1, 97], [1, 121]]]], " ", ["subexpr", "if", [["get", "isAlert", ["loc", [null, [1, 127], [1, 134]]]], "is-alert"], [], ["loc", [null, [1, 122], [1, 147]]]]]]], ["content", "yield", ["loc", [null, [1, 149], [1, 158]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/pick-up", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 6
            },
            "end": {
              "line": 1,
              "column": 28
            }
          },
          "moduleName": "htis/templates/components/pick-up.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [1, 19], [1, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 28
            },
            "end": {
              "line": 1,
              "column": 73
            }
          },
          "moduleName": "htis/templates/components/pick-up.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "text-warning");
          var el2 = dom.createTextNode("未选择");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 152
          }
        },
        "moduleName": "htis/templates/components/pick-up.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "glyphicon glyphicon-chevron-down pull-right");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "value", ["loc", [null, [1, 12], [1, 17]]]]], [], 0, 1, ["loc", [null, [1, 6], [1, 80]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/components/radio-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "htis/templates/components/radio-list-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "isChecked", ["loc", [null, [1, 8], [1, 17]]]]], [], ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/radio-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 101
              },
              "end": {
                "line": 1,
                "column": 148
              }
            },
            "moduleName": "htis/templates/components/radio-list.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "item", ["loc", [null, [1, 136], [1, 140]]]], ["get", "value", ["loc", [null, [1, 141], [1, 146]]]]], [], ["loc", [null, [1, 128], [1, 148]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 84
            },
            "end": {
              "line": 1,
              "column": 157
            }
          },
          "moduleName": "htis/templates/components/radio-list.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "content", ["loc", [null, [1, 109], [1, 116]]]]], [], 0, null, ["loc", [null, [1, 101], [1, 157]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 157
            },
            "end": {
              "line": 1,
              "column": 189
            }
          },
          "moduleName": "htis/templates/components/radio-list.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "checkedContent", ["loc", [null, [1, 173], [1, 187]]]]], [], ["loc", [null, [1, 165], [1, 189]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 202
          }
        },
        "moduleName": "htis/templates/components/radio-list.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "data-toggle", "buttons");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["btn-group ", ["subexpr", "if", [["get", "isVertical", ["loc", [null, [1, 49], [1, 59]]]], "btn-group-vertical"], [], ["loc", [null, [1, 44], [1, 82]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 90], [1, 99]]]]], [], 0, 1, ["loc", [null, [1, 84], [1, 196]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/components/spin-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 14
              },
              "end": {
                "line": 1,
                "column": 78
              }
            },
            "moduleName": "htis/templates/components/spin-button.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["glyphicon ", ["get", "loadingIcon", ["loc", [null, [1, 56], [1, 67]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 78
              },
              "end": {
                "line": 1,
                "column": 132
              }
            },
            "moduleName": "htis/templates/components/spin-button.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["glyphicon ", ["get", "loadedIcon", ["loc", [null, [1, 111], [1, 121]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 177
            }
          },
          "moduleName": "htis/templates/components/spin-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "sr-only");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "isLoading", ["loc", [null, [1, 20], [1, 29]]]]], [], 0, 1, ["loc", [null, [1, 14], [1, 139]]]], ["content", "title", ["loc", [null, [1, 161], [1, 170]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 185
              },
              "end": {
                "line": 1,
                "column": 217
              }
            },
            "moduleName": "htis/templates/components/spin-button.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "loadingText", ["loc", [null, [1, 202], [1, 217]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 225
                },
                "end": {
                  "line": 1,
                  "column": 297
                }
              },
              "moduleName": "htis/templates/components/spin-button.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["glyphicon left-icon ", ["get", "titleIcon", ["loc", [null, [1, 277], [1, 286]]]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 217
              },
              "end": {
                "line": 1,
                "column": 313
              }
            },
            "moduleName": "htis/templates/components/spin-button.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "titleIcon", ["loc", [null, [1, 231], [1, 240]]]]], [], 0, null, ["loc", [null, [1, 225], [1, 304]]]], ["content", "title", ["loc", [null, [1, 304], [1, 313]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 177
            },
            "end": {
              "line": 1,
              "column": 320
            }
          },
          "moduleName": "htis/templates/components/spin-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isLoading", ["loc", [null, [1, 191], [1, 200]]]]], [], 0, 1, ["loc", [null, [1, 185], [1, 320]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 327
          }
        },
        "moduleName": "htis/templates/components/spin-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isIcon", ["loc", [null, [1, 6], [1, 12]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 327]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/components/spin-space", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "htis/templates/components/spin-space.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/components/standard-detail-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 63
            },
            "end": {
              "line": 1,
              "column": 267
            }
          },
          "moduleName": "htis/templates/components/standard-detail-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "title", "返回");
          dom.setAttribute(el1, "href", "javascript:void(0)");
          dom.setAttribute(el1, "class", "btn-back pull-left");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "glyphicon glyphicon-arrow-left");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "class", "sr-only");
          var el3 = dom.createTextNode("返回");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["element", "action", ["backAction"], [], ["loc", [null, [1, 92], [1, 115]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 301
              },
              "end": {
                "line": 1,
                "column": 692
              }
            },
            "moduleName": "htis/templates/components/standard-detail-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "title", "取消");
            dom.setAttribute(el1, "href", "javascript:void(0)");
            dom.setAttribute(el1, "class", "btn-back pull-right");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-remove");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("取消");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [0]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["element", "action", ["cancelAction"], [], ["loc", [null, [1, 321], [1, 346]]]], ["inline", "spin-button", [], ["action", "saveAction", "isIcon", true, "loadedIcon", "glyphicon-floppy-disk", "isLoading", ["subexpr", "@mut", [["get", "model.isSaving", ["loc", [null, [1, 586], [1, 600]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "model.isUnSavable", ["loc", [null, [1, 612], [1, 629]]]]], [], []], "title", "保存", "class", "btn-save pull-right margin-right is-blank"], ["loc", [null, [1, 495], [1, 692]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 692
              },
              "end": {
                "line": 1,
                "column": 1062
              }
            },
            "moduleName": "htis/templates/components/standard-detail-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "title", "删除");
            dom.setAttribute(el1, "href", "javascript:void(0)");
            dom.setAttribute(el1, "class", "btn-back pull-right");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-trash");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("删除");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "title", "修改");
            dom.setAttribute(el1, "href", "javascript:void(0)");
            dom.setAttribute(el1, "class", "btn-back pull-right margin-right");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-edit");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("修改");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["deleteAction"], [], ["loc", [null, [1, 703], [1, 728]]]], ["element", "action", ["editAction"], [], ["loc", [null, [1, 879], [1, 902]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 274
            },
            "end": {
              "line": 1,
              "column": 1069
            }
          },
          "moduleName": "htis/templates/components/standard-detail-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isEditing", ["loc", [null, [1, 307], [1, 316]]]]], [], 0, 1, ["loc", [null, [1, 301], [1, 1069]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1143
          }
        },
        "moduleName": "htis/templates/components/standard-detail-panel.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel-heading text-center");
        var el2 = dom.createElement("h3");
        dom.setAttribute(el2, "class", "panel-title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "panel-scroll");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element4, 0, 0);
        morphs[1] = dom.createMorphAt(element4, 1, 1);
        morphs[2] = dom.createMorphAt(element4, 2, 2);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLeftButtonNeeded", ["loc", [null, [1, 69], [1, 87]]]]], [], 0, null, ["loc", [null, [1, 63], [1, 274]]]], ["block", "if", [["get", "isRightButtonNeeded", ["loc", [null, [1, 280], [1, 299]]]]], [], 1, null, ["loc", [null, [1, 274], [1, 1076]]]], ["content", "pannelTitle", ["loc", [null, [1, 1076], [1, 1091]]]], ["content", "yield", ["loc", [null, [1, 1128], [1, 1137]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/components/trace-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 137
            },
            "end": {
              "line": 1,
              "column": 233
            }
          },
          "moduleName": "htis/templates/components/trace-list-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element7, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["bg-line ", ["subexpr", "if", [["get", "content.is_finished", ["loc", [null, [1, 192], [1, 211]]]], "opacity05"], [], ["loc", [null, [1, 187], [1, 225]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2346
              },
              "end": {
                "line": 1,
                "column": 2584
              }
            },
            "moduleName": "htis/templates/components/trace-list-item.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "list-group-item form-group");
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("消息");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-10 col-sm-12");
            var el3 = dom.createElement("p");
            dom.setAttribute(el3, "class", "form-control-static");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [0]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element3, [1, 0]), 0, 0);
            return morphs;
          },
          statements: [["content", "createrTag", ["loc", [null, [1, 2459], [1, 2473]]]], ["content", "content.start_info", ["loc", [null, [1, 2547], [1, 2569]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3054
                },
                "end": {
                  "line": 1,
                  "column": 3289
                }
              },
              "moduleName": "htis/templates/components/trace-list-item.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "list-group-item form-group");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("消息");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-10 col-sm-12");
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 0]), 0, 0);
              return morphs;
            },
            statements: [["content", "modifierTag", ["loc", [null, [1, 3165], [1, 3180]]]], ["content", "content.end_info", ["loc", [null, [1, 3254], [1, 3274]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2591
              },
              "end": {
                "line": 1,
                "column": 3296
              }
            },
            "moduleName": "htis/templates/components/trace-list-item.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "list-group-item form-group");
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("人");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-10 col-sm-12");
            var el3 = dom.createElement("p");
            dom.setAttribute(el3, "class", "form-control-static");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "list-group-item form-group");
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("时间");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-10 col-sm-12");
            var el3 = dom.createElement("p");
            dom.setAttribute(el3, "class", "form-control-static");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [0]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 0]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [0]), 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element2, [1, 0]), 0, 0);
            morphs[4] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "modifierTag", ["loc", [null, [1, 2702], [1, 2717]]]], ["content", "content.modifier.name", ["loc", [null, [1, 2790], [1, 2815]]]], ["content", "modifierTag", ["loc", [null, [1, 2917], [1, 2932]]]], ["inline", "timefmt", [["get", "content.modified_date", ["loc", [null, [1, 3016], [1, 3037]]]]], [], ["loc", [null, [1, 3006], [1, 3039]]]], ["block", "if", [["get", "content.end_info", ["loc", [null, [1, 3060], [1, 3076]]]]], [], 0, null, ["loc", [null, [1, 3054], [1, 3296]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 381
            },
            "end": {
              "line": 1,
              "column": 3308
            }
          },
          "moduleName": "htis/templates/components/trace-list-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createTextNode("系统编号");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createTextNode("所属项目");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createTextNode("使用部门");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createTextNode("使用人");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createTextNode("油品");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createTextNode("实验目的");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createTextNode("起止时间");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("人");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "list-group-item form-group");
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("时间");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "form-control-static");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [0]);
          var element5 = dom.childAt(element4, [7]);
          var element6 = dom.childAt(element4, [8]);
          var morphs = new Array(13);
          morphs[0] = dom.createMorphAt(dom.childAt(element4, [0, 1, 0]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element4, [1, 1, 0]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element4, [2, 1, 0]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element4, [3, 1, 0]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element4, [4, 1, 0]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element4, [5, 1, 0]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element4, [6, 1, 0]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element5, [0]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element5, [1, 0]), 0, 0);
          morphs[9] = dom.createMorphAt(dom.childAt(element6, [0]), 0, 0);
          morphs[10] = dom.createMorphAt(dom.childAt(element6, [1, 0]), 0, 0);
          morphs[11] = dom.createMorphAt(element4, 9, 9);
          morphs[12] = dom.createMorphAt(element4, 10, 10);
          return morphs;
        },
        statements: [["content", "content.id", ["loc", [null, [1, 610], [1, 624]]]], ["content", "content.project.name", ["loc", [null, [1, 802], [1, 826]]]], ["content", "content.department.name", ["loc", [null, [1, 1004], [1, 1031]]]], ["content", "content.user_name", ["loc", [null, [1, 1208], [1, 1229]]]], ["inline", "checkbox-list-value", [], ["content", ["subexpr", "@mut", [["get", "content.oils", ["loc", [null, [1, 1435], [1, 1447]]]]], [], []]], ["loc", [null, [1, 1405], [1, 1449]]]], ["content", "content.goal", ["loc", [null, [1, 1627], [1, 1643]]]], ["inline", "date-picker-value", [], ["startDate", ["subexpr", "@mut", [["get", "content.start_date", ["loc", [null, [1, 1851], [1, 1869]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "content.end_date", ["loc", [null, [1, 1878], [1, 1894]]]]], [], []]], ["loc", [null, [1, 1821], [1, 1896]]]], ["content", "createrTag", ["loc", [null, [1, 1998], [1, 2012]]]], ["content", "content.creater.name", ["loc", [null, [1, 2085], [1, 2109]]]], ["content", "createrTag", ["loc", [null, [1, 2211], [1, 2225]]]], ["inline", "timefmt", [["get", "content.created_date", ["loc", [null, [1, 2309], [1, 2329]]]]], [], ["loc", [null, [1, 2299], [1, 2331]]]], ["block", "if", [["get", "content.start_info", ["loc", [null, [1, 2352], [1, 2370]]]]], [], 0, null, ["loc", [null, [1, 2346], [1, 2591]]]], ["block", "if", [["get", "isModifierNeeded", ["loc", [null, [1, 2597], [1, 2613]]]]], [], 1, null, ["loc", [null, [1, 2591], [1, 3303]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3584
              },
              "end": {
                "line": 1,
                "column": 3628
              }
            },
            "moduleName": "htis/templates/components/trace-list-item.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "content.end_info", ["loc", [null, [1, 3608], [1, 3628]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3636
                },
                "end": {
                  "line": 1,
                  "column": 3686
                }
              },
              "moduleName": "htis/templates/components/trace-list-item.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "content.start_info", ["loc", [null, [1, 3664], [1, 3686]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3628
              },
              "end": {
                "line": 1,
                "column": 3697
              }
            },
            "moduleName": "htis/templates/components/trace-list-item.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "isModifierNeeded", ["loc", [null, [1, 3646], [1, 3662]]]]], [], 0, null, ["loc", [null, [1, 3636], [1, 3697]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 3308
            },
            "end": {
              "line": 1,
              "column": 3710
            }
          },
          "moduleName": "htis/templates/components/trace-list-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "trace-user pull-left");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "trace-date pull-right hidden-xs");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "trace-date visible-xs-block");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "trace-msg clearboth");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          return morphs;
        },
        statements: [["content", "content.modifier.name", ["loc", [null, [1, 3351], [1, 3376]]]], ["inline", "timefmt", [["get", "content.modified_date", ["loc", [null, [1, 3439], [1, 3460]]]]], [], ["loc", [null, [1, 3429], [1, 3462]]]], ["inline", "timefmt", [["get", "content.modified_date", ["loc", [null, [1, 3521], [1, 3542]]]]], [], ["loc", [null, [1, 3511], [1, 3544]]]], ["block", "if", [["get", "content.end_info", ["loc", [null, [1, 3590], [1, 3606]]]]], [], 0, 1, ["loc", [null, [1, 3584], [1, 3704]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3723
          }
        },
        "moduleName": "htis/templates/components/trace-list-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "trace-icon");
        var el2 = dom.createElement("span");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "trace-title");
        var el2 = dom.createElement("span");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "trace-content text-muted");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [0, 0]);
        var element9 = dom.childAt(fragment, [2]);
        var element10 = dom.childAt(element9, [1]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element8, 'class');
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element9, [0]), 0, 0);
        morphs[3] = dom.createAttrMorph(element10, 'class');
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["glyphicon ", ["subexpr", "if", [["get", "content.is_finished", ["loc", [null, [1, 52], [1, 71]]]], "glyphicon-ok-sign", "glyphicon-record opacity05"], [], ["loc", [null, [1, 47], [1, 122]]]]]]], ["block", "if", [["get", "content.previous_trace", ["loc", [null, [1, 143], [1, 165]]]]], [], 0, null, ["loc", [null, [1, 137], [1, 240]]]], ["content", "text", ["loc", [null, [1, 271], [1, 279]]]], ["attribute", "class", ["concat", ["pull-right glyphicon ", ["get", "icon", ["loc", [null, [1, 322], [1, 326]]]]]]], ["block", "if", [["get", "isChecked", ["loc", [null, [1, 387], [1, 396]]]]], [], 1, 2, ["loc", [null, [1, 381], [1, 3717]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("htis/templates/container-side", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 715
                      },
                      "end": {
                        "line": 1,
                        "column": 802
                      }
                    },
                    "moduleName": "htis/templates/container-side.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [0]);
                    var morphs = new Array(1);
                    morphs[0] = dom.createAttrMorph(element3, 'class');
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["glyphicon pull-left ", ["get", "item.icon", ["loc", [null, [1, 767], [1, 776]]]], " ", ["get", "item.color", ["loc", [null, [1, 781], [1, 791]]]]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 809
                      },
                      "end": {
                        "line": 1,
                        "column": 917
                      }
                    },
                    "moduleName": "htis/templates/container-side.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "pull-left glyphicon glyphicon-cloud-upload text-danger");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 917
                        },
                        "end": {
                          "line": 1,
                          "column": 1031
                        }
                      },
                      "moduleName": "htis/templates/container-side.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "pull-left glyphicon glyphicon-cloud-upload text-warning");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 917
                      },
                      "end": {
                        "line": 1,
                        "column": 1031
                      }
                    },
                    "moduleName": "htis/templates/container-side.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "item.instance.isFinishing", ["loc", [null, [1, 927], [1, 952]]]]], [], 0, null, ["loc", [null, [1, 917], [1, 1031]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 619
                    },
                    "end": {
                      "line": 1,
                      "column": 1180
                    }
                  },
                  "moduleName": "htis/templates/container-side.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "pull-right text-muted");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "message-text text-muted");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(5);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                  morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                  morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
                  dom.insertBoundary(fragment, 0);
                  return morphs;
                },
                statements: [["block", "if", [["get", "item.icon", ["loc", [null, [1, 721], [1, 730]]]]], [], 0, null, ["loc", [null, [1, 715], [1, 809]]]], ["block", "if", [["get", "item.instance.isFinished", ["loc", [null, [1, 815], [1, 839]]]]], [], 1, 2, ["loc", [null, [1, 809], [1, 1038]]]], ["content", "item.title", ["loc", [null, [1, 1038], [1, 1052]]]], ["inline", "timefmt", [["get", "item.created_date", ["loc", [null, [1, 1098], [1, 1115]]]]], [], ["loc", [null, [1, 1088], [1, 1117]]]], ["content", "item.text", ["loc", [null, [1, 1161], [1, 1174]]]]],
                locals: ["isChecked"],
                templates: [child0, child1, child2]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 268
                  },
                  "end": {
                    "line": 1,
                    "column": 1200
                  }
                },
                "moduleName": "htis/templates/container-side.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 646], [1, 650]]]]], [], []], "isNeedToCheckNew", false, "action", "goMessageTarget"], 0, null, ["loc", [null, [1, 619], [1, 1200]]]]],
              locals: ["item"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 226
                },
                "end": {
                  "line": 1,
                  "column": 1215
                }
              },
              "moduleName": "htis/templates/container-side.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel", [], ["pannelTitle", "通知中心", "isTopButtonNeeded", ["subexpr", "@mut", [["get", "messagesController.isTopButtonNeeded", ["loc", [null, [1, 319], [1, 355]]]]], [], []], "isToShowAll", ["subexpr", "@mut", [["get", "messagesController.isToShowAll", ["loc", [null, [1, 368], [1, 398]]]]], [], []], "rightButtonIcon", "glyphicon-triangle-left", "rightButtonAction", "exitSide", "isLeftButtonNeeded", false, "isRightButtonNeeded", true, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "messagesController.arrangedResult", ["loc", [null, [1, 552], [1, 585]]]]], [], []], "class", "panel-primary"], 0, null, ["loc", [null, [1, 268], [1, 1215]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1436
                    },
                    "end": {
                      "line": 1,
                      "column": 1819
                    }
                  },
                  "moduleName": "htis/templates/container-side.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "list-group-item");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "glyphicon glyphicon-user text-success pull-left");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "text-success");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "list-group-item");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "glyphicon glyphicon-education text-success pull-left");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "text-success");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
                  morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "sessionController.user.name", ["loc", [null, [1, 1596], [1, 1627]]]], ["content", "sessionController.user.role.name", ["loc", [null, [1, 1770], [1, 1806]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1819
                    },
                    "end": {
                      "line": 1,
                      "column": 1900
                    }
                  },
                  "moduleName": "htis/templates/container-side.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "list-group-item");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "text-muted");
                  var el3 = dom.createTextNode("您还没有登录");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2698
                        },
                        "end": {
                          "line": 1,
                          "column": 2806
                        }
                      },
                      "moduleName": "htis/templates/container-side.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "text-success");
                      var el2 = dom.createElement("span");
                      dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                      return morphs;
                    },
                    statements: [["content", "item.name", ["loc", [null, [1, 2786], [1, 2799]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2806
                        },
                        "end": {
                          "line": 1,
                          "column": 2859
                        }
                      },
                      "moduleName": "htis/templates/container-side.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "text-muted");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                      return morphs;
                    },
                    statements: [["content", "item.name", ["loc", [null, [1, 2839], [1, 2852]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2580
                      },
                      "end": {
                        "line": 1,
                        "column": 2866
                      }
                    },
                    "moduleName": "htis/templates/container-side.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 2704], [1, 2713]]]]], [], 0, 1, ["loc", [null, [1, 2698], [1, 2866]]]]],
                  locals: ["isChecked"],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2418
                    },
                    "end": {
                      "line": 1,
                      "column": 2886
                    }
                  },
                  "moduleName": "htis/templates/container-side.hbs"
                },
                arity: 2,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "radio-list-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 2607], [1, 2611]]]]], [], []], "contentValueKey", "value", "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 2646], [1, 2651]]]]], [], []], "action", "setRemoteDebugStatus"], 0, null, ["loc", [null, [1, 2580], [1, 2886]]]]],
                locals: ["item", "value"],
                templates: [child0]
              };
            })();
            var child3 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2942
                    },
                    "end": {
                      "line": 1,
                      "column": 3130
                    }
                  },
                  "moduleName": "htis/templates/container-side.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "text-muted");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "help-block text-warning");
                  var el2 = dom.createTextNode("调试完成后请务必刷新网页或重启APP以保证后续正常工作。");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                  return morphs;
                },
                statements: [["content", "applicationController.remoteDebugUrl", ["loc", [null, [1, 3013], [1, 3053]]]]],
                locals: [],
                templates: []
              };
            })();
            var child4 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3130
                      },
                      "end": {
                        "line": 1,
                        "column": 3254
                      }
                    },
                    "moduleName": "htis/templates/container-side.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "help-block text-warning");
                    var el2 = dom.createTextNode("调试完成后请务必刷新网页或重启APP以保证后续正常工作。");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3254
                      },
                      "end": {
                        "line": 1,
                        "column": 3441
                      }
                    },
                    "moduleName": "htis/templates/container-side.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "help-block text-muted");
                    var el2 = dom.createTextNode("请输入正确的远程调试电脑地址后点击启用按钮来调试，调试完成后请务必刷新网页或重启APP以保证后续正常工作。");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    return morphs;
                  },
                  statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "applicationController.remoteDebugUrl", ["loc", [null, [1, 3288], [1, 3324]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 3262], [1, 3347]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3130
                    },
                    "end": {
                      "line": 1,
                      "column": 3441
                    }
                  },
                  "moduleName": "htis/templates/container-side.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "applicationController.isDebuggapDebugging", ["loc", [null, [1, 3140], [1, 3181]]]]], [], 0, 1, ["loc", [null, [1, 3130], [1, 3441]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            var child5 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3460
                    },
                    "end": {
                      "line": 1,
                      "column": 3852
                    }
                  },
                  "moduleName": "htis/templates/container-side.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "list-group list-full");
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "list-group-item text-center");
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "glyphicon glyphicon-cloud-download split-right-6");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("同步数据");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "text-muted");
                  var el4 = dom.createTextNode("于[");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("]成功同步");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "list-group list-full");
                  var el2 = dom.createElement("button");
                  dom.setAttribute(el2, "class", "btn btn-danger btn-block");
                  var el3 = dom.createTextNode("退出系统");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1, 0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0, 2]), 1, 1);
                  morphs[1] = dom.createElementMorph(element0);
                  return morphs;
                },
                statements: [["content", "applicationController.serializedSyncToken", ["loc", [null, [1, 3670], [1, 3715]]]], ["element", "action", ["logout"], [], ["loc", [null, [1, 3780], [1, 3799]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1223
                  },
                  "end": {
                    "line": 1,
                    "column": 3859
                  }
                },
                "moduleName": "htis/templates/container-side.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "list-group list-full");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "list-group list-full");
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "list-group-item");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "list-group-item");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "list-group-item");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "list-group-item");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "list-group list-full");
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "list-group-item");
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "pull-left");
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "glyphicon glyphicon-blackboard split-right-6");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("远程调式");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "pull-right");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "list-group-item");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var element2 = dom.childAt(fragment, [2]);
                var morphs = new Array(8);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element1, [0]), 0, 0);
                morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(element1, [2]), 0, 0);
                morphs[4] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
                morphs[5] = dom.createMorphAt(dom.childAt(element2, [0, 1]), 0, 0);
                morphs[6] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
                morphs[7] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "sessionController.isLogined", ["loc", [null, [1, 1442], [1, 1469]]]]], [], 0, 1, ["loc", [null, [1, 1436], [1, 1907]]]], ["content", "applicationController.appShortTitle", ["loc", [null, [1, 1976], [1, 2015]]]], ["content", "applicationController.author", ["loc", [null, [1, 2050], [1, 2082]]]], ["content", "applicationController.copyright", ["loc", [null, [1, 2117], [1, 2152]]]], ["content", "applicationController.version", ["loc", [null, [1, 2187], [1, 2220]]]], ["block", "radio-list", [], ["content", ["subexpr", "@mut", [["get", "applicationController.remoteDebugList", ["loc", [null, [1, 2440], [1, 2477]]]]], [], []], "value", ["subexpr", "@mut", [["get", "applicationController.remoteDebugStatus", ["loc", [null, [1, 2484], [1, 2523]]]]], [], []], "contentValueKey", "value", "isEditing", true], 2, null, ["loc", [null, [1, 2418], [1, 2901]]]], ["block", "if", [["get", "applicationController.isWeinreDebugging", ["loc", [null, [1, 2948], [1, 2987]]]]], [], 3, 4, ["loc", [null, [1, 2942], [1, 3448]]]], ["block", "if", [["get", "sessionController.isLogined", ["loc", [null, [1, 3466], [1, 3493]]]]], [], 5, null, ["loc", [null, [1, 3460], [1, 3859]]]]],
              locals: [],
              templates: [child0, child1, child2, child3, child4, child5]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1215
                },
                "end": {
                  "line": 1,
                  "column": 3876
                }
              },
              "moduleName": "htis/templates/container-side.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "detail-panel", [], ["pannelTitle", "关于我们", "rightButtonIcon", "glyphicon-triangle-left", "rightButtonAction", "exitSide", "isLeftButtonNeeded", false, "isRightButtonNeeded", true, "class", "panel-primary"], 0, null, ["loc", [null, [1, 1223], [1, 3876]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 147
              },
              "end": {
                "line": 1,
                "column": 3883
              }
            },
            "moduleName": "htis/templates/container-side.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "applicationController.isBellActive", ["loc", [null, [1, 232], [1, 266]]]]], [], 0, 1, ["loc", [null, [1, 226], [1, 3883]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 99
            },
            "end": {
              "line": 1,
              "column": 3902
            }
          },
          "moduleName": "htis/templates/container-side.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 175], [1, 184]]]]], [], []], "isActive", true, "isBack", false, "isHide", false], 0, null, ["loc", [null, [1, 147], [1, 3902]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3927
          }
        },
        "moduleName": "htis/templates/container-side.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element4, 'class');
        morphs[1] = dom.createMorphAt(element4, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["container-side trans-all-05 ", ["subexpr", "unless", [["get", "applicationController.isSideActive", ["loc", [null, [1, 49], [1, 83]]]], "is-folded"], [], ["loc", [null, [1, 40], [1, 97]]]]]]], ["block", "container-wrap", [], ["isFull", true, "isBoxShadow", true], 0, null, ["loc", [null, [1, 99], [1, 3921]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/detail-fix", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 931
          }
        },
        "moduleName": "htis/templates/detail-fix.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "for", "creater");
        dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
        var el3 = dom.createTextNode("创建人");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "form-control-static");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "for", "created_date");
        dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
        var el3 = dom.createTextNode("创建时间");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "form-control-static");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "for", "modifier");
        dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
        var el3 = dom.createTextNode("修改人");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "form-control-static");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "for", "created_date");
        dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
        var el3 = dom.createTextNode("修改时间");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3, "class", "form-control-static");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 0]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 0]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 1, 0]), 0, 0);
        return morphs;
      },
      statements: [["content", "model.creater.name", ["loc", [null, [1, 188], [1, 210]]]], ["inline", "timefmt", [["get", "model.created_date", ["loc", [null, [1, 429], [1, 447]]]]], [], ["loc", [null, [1, 419], [1, 449]]]], ["content", "model.modifier.name", ["loc", [null, [1, 653], [1, 676]]]], ["inline", "timefmt", [["get", "model.modified_date", ["loc", [null, [1, 895], [1, 914]]]]], [], ["loc", [null, [1, 885], [1, 916]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/history", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1049
                  },
                  "end": {
                    "line": 1,
                    "column": 1125
                  }
                },
                "moduleName": "htis/templates/history.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1297
                  },
                  "end": {
                    "line": 1,
                    "column": 1375
                  }
                },
                "moduleName": "htis/templates/history.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 233
                },
                "end": {
                  "line": 1,
                  "column": 1404
                }
              },
              "moduleName": "htis/templates/history.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "panel");
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "panel-heading text-center");
              var el3 = dom.createElement("h3");
              dom.setAttribute(el3, "class", "panel-title");
              var el4 = dom.createElement("a");
              dom.setAttribute(el4, "title", "返回");
              dom.setAttribute(el4, "href", "javascript:void(0)");
              dom.setAttribute(el4, "class", "btn-home pull-left");
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-home");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "sr-only");
              var el6 = dom.createTextNode("返回");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              dom.setAttribute(el4, "title", "通知中心");
              dom.setAttribute(el4, "href", "javascript:void(0)");
              dom.setAttribute(el4, "class", "btn-bell pull-right");
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "bell-count");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-bell");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "sr-only");
              var el6 = dom.createTextNode("通知中心");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "panel-scroll");
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "list-group list-full");
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("明细");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("报表");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var element1 = dom.childAt(element0, [0, 0]);
              var element2 = dom.childAt(element1, [0]);
              var element3 = dom.childAt(element1, [1]);
              var element4 = dom.childAt(element0, [1, 0]);
              var element5 = dom.childAt(element4, [0]);
              var element6 = dom.childAt(element4, [1]);
              var morphs = new Array(10);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createElementMorph(element3);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
              morphs[3] = dom.createMorphAt(element1, 2, 2);
              morphs[4] = dom.createAttrMorph(element5, 'class');
              morphs[5] = dom.createElementMorph(element5);
              morphs[6] = dom.createMorphAt(element5, 2, 2);
              morphs[7] = dom.createAttrMorph(element6, 'class');
              morphs[8] = dom.createElementMorph(element6);
              morphs[9] = dom.createMorphAt(element6, 2, 2);
              return morphs;
            },
            statements: [["element", "action", ["goHome"], [], ["loc", [null, [1, 403], [1, 422]]]], ["element", "action", ["goBell"], [], ["loc", [null, [1, 571], [1, 590]]]], ["content", "messagesController.model.length", ["loc", [null, [1, 682], [1, 717]]]], ["content", "pannelTitle", ["loc", [null, [1, 806], [1, 821]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isBills", ["loc", [null, [1, 944], [1, 951]]]], "active"], [], ["loc", [null, [1, 939], [1, 962]]]]]]], ["element", "action", ["goBills"], [], ["loc", [null, [1, 895], [1, 915]]]], ["block", "if", [["get", "isBills", ["loc", [null, [1, 1055], [1, 1062]]]]], [], 0, null, ["loc", [null, [1, 1049], [1, 1132]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isReports", ["loc", [null, [1, 1190], [1, 1199]]]], "active"], [], ["loc", [null, [1, 1185], [1, 1210]]]]]]], ["element", "action", ["goReports"], [], ["loc", [null, [1, 1139], [1, 1161]]]], ["block", "if", [["get", "isReports", ["loc", [null, [1, 1303], [1, 1312]]]]], [], 1, null, ["loc", [null, [1, 1297], [1, 1382]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1423
                },
                "end": {
                  "line": 1,
                  "column": 1455
                }
              },
              "moduleName": "htis/templates/history.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "outlet", ["loc", [null, [1, 1445], [1, 1455]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 163
              },
              "end": {
                "line": 1,
                "column": 1462
              }
            },
            "moduleName": "htis/templates/history.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 261], [1, 270]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 280], [1, 288]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 296], [1, 302]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 310], [1, 316]]]]], [], []]], 0, null, ["loc", [null, [1, 233], [1, 1423]]]], ["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 1429], [1, 1443]]]]], [], 1, null, ["loc", [null, [1, 1423], [1, 1462]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1481
              },
              "end": {
                "line": 1,
                "column": 1516
              }
            },
            "moduleName": "htis/templates/history.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "outlet", ["loc", [null, [1, 1506], [1, 1516]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 146
            },
            "end": {
              "line": 1,
              "column": 1523
            }
          },
          "moduleName": "htis/templates/history.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isLeft", ["subexpr", "@mut", [["get", "equipment.isNotXs", ["loc", [null, [1, 188], [1, 205]]]]], [], []], "class", "container-history"], 0, null, ["loc", [null, [1, 163], [1, 1481]]]], ["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 1487], [1, 1504]]]]], [], 1, null, ["loc", [null, [1, 1481], [1, 1523]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1523
            },
            "end": {
              "line": 1,
              "column": 1563
            }
          },
          "moduleName": "htis/templates/history.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "none-powered", [], ["action", "goHome"], ["loc", [null, [1, 1531], [1, 1563]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1576
          }
        },
        "moduleName": "htis/templates/history.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "history");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element7, 'class');
        morphs[2] = dom.createMorphAt(element7, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main opacity09 trans-all-05 ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 96], [1, 130]]]], "is-folded"], [], ["loc", [null, [1, 91], [1, 144]]]]]]], ["block", "if", [["get", "isPowered", ["loc", [null, [1, 152], [1, 161]]]]], [], 0, 1, ["loc", [null, [1, 146], [1, 1570]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/history/bills", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 74
            }
          },
          "moduleName": "htis/templates/history/bills.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["history/navigable-pane-bills"], [], ["loc", [null, [1, 22], [1, 64]]]], ["content", "outlet", ["loc", [null, [1, 64], [1, 74]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 82
              },
              "end": {
                "line": 1,
                "column": 166
              }
            },
            "moduleName": "htis/templates/history/bills.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["history/navigable-pane-bills"], [], ["loc", [null, [1, 114], [1, 156]]]], ["content", "outlet", ["loc", [null, [1, 156], [1, 166]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 74
            },
            "end": {
              "line": 1,
              "column": 185
            }
          },
          "moduleName": "htis/templates/history/bills.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true], 0, null, ["loc", [null, [1, 82], [1, 185]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 192
          }
        },
        "moduleName": "htis/templates/history/bills.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 192]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/history/bills/bill", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 505
                  },
                  "end": {
                    "line": 1,
                    "column": 603
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-warning-sign text-danger pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 266
                },
                "end": {
                  "line": 1,
                  "column": 625
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "list-group-item form-group");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "id");
              dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
              var el3 = dom.createTextNode("单号");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
              var el3 = dom.createElement("p");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [0, 1, 0]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element2, 'class');
              morphs[1] = dom.createMorphAt(element2, 0, 0);
              morphs[2] = dom.createMorphAt(element2, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["form-control-static ", ["subexpr", "if", [["get", "model.is_lost", ["loc", [null, [1, 462], [1, 475]]]], "text-danger"], [], ["loc", [null, [1, 457], [1, 491]]]]]]], ["content", "model.id", ["loc", [null, [1, 493], [1, 505]]]], ["block", "if", [["get", "model.is_lost", ["loc", [null, [1, 511], [1, 524]]]]], [], 0, null, ["loc", [null, [1, 505], [1, 610]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1211
                  },
                  "end": {
                    "line": 1,
                    "column": 1309
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1097
                },
                "end": {
                  "line": 1,
                  "column": 1316
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "pick-up", [], ["id", "project", "value", ["subexpr", "@mut", [["get", "model.project.name", ["loc", [null, [1, 1143], [1, 1161]]]]], [], []], "isPicking", ["subexpr", "@mut", [["get", "isPickingProject", ["loc", [null, [1, 1172], [1, 1188]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 1114], [1, 1211]]]], ["block", "if", [["get", "model.errors.project", ["loc", [null, [1, 1217], [1, 1237]]]]], [], 0, null, ["loc", [null, [1, 1211], [1, 1316]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1316
                },
                "end": {
                  "line": 1,
                  "column": 1381
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.project.name", ["loc", [null, [1, 1355], [1, 1377]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1388
                },
                "end": {
                  "line": 1,
                  "column": 1488
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 1465], [1, 1482]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1843
                  },
                  "end": {
                    "line": 1,
                    "column": 1944
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1720
                },
                "end": {
                  "line": 1,
                  "column": 1951
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "pick-up", [], ["id", "department", "value", ["subexpr", "@mut", [["get", "model.department.name", ["loc", [null, [1, 1769], [1, 1790]]]]], [], []], "isPicking", ["subexpr", "@mut", [["get", "isPickingDepartment", ["loc", [null, [1, 1801], [1, 1820]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 1737], [1, 1843]]]], ["block", "if", [["get", "model.errors.department", ["loc", [null, [1, 1849], [1, 1872]]]]], [], 0, null, ["loc", [null, [1, 1843], [1, 1951]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1951
                },
                "end": {
                  "line": 1,
                  "column": 2019
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.department.name", ["loc", [null, [1, 1990], [1, 2015]]]]],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2026
                },
                "end": {
                  "line": 1,
                  "column": 2129
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2106], [1, 2123]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child7 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2531
                      },
                      "end": {
                        "line": 1,
                        "column": 2639
                      }
                    },
                    "moduleName": "htis/templates/history/bills/bill.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-success");
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 2619], [1, 2632]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2639
                      },
                      "end": {
                        "line": 1,
                        "column": 2692
                      }
                    },
                    "moduleName": "htis/templates/history/bills/bill.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-muted");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 2672], [1, 2685]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2451
                    },
                    "end": {
                      "line": 1,
                      "column": 2699
                    }
                  },
                  "moduleName": "htis/templates/history/bills/bill.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 2537], [1, 2546]]]]], [], 0, 1, ["loc", [null, [1, 2531], [1, 2699]]]]],
                locals: ["isChecked"],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2434
                  },
                  "end": {
                    "line": 1,
                    "column": 2719
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "radio-list-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 2478], [1, 2482]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 2493], [1, 2498]]]]], [], []], "action", "setOil"], 0, null, ["loc", [null, [1, 2451], [1, 2719]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2719
                  },
                  "end": {
                    "line": 1,
                    "column": 2780
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("p");
                dom.setAttribute(el1, "class", "form-control-static");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "model.oil.name", ["loc", [null, [1, 2758], [1, 2776]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2346
                },
                "end": {
                  "line": 1,
                  "column": 2787
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isEditing", ["loc", [null, [1, 2440], [1, 2449]]]]], [], 0, 1, ["loc", [null, [1, 2434], [1, 2787]]]]],
            locals: ["item", "value"],
            templates: [child0, child1]
          };
        })();
        var child8 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2802
                },
                "end": {
                  "line": 1,
                  "column": 2896
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child9 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2903
                },
                "end": {
                  "line": 1,
                  "column": 2999
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2976], [1, 2993]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child10 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3357
                  },
                  "end": {
                    "line": 1,
                    "column": 3454
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3222
                },
                "end": {
                  "line": 1,
                  "column": 3461
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "number-input", [], ["id", "volume", "value", ["subexpr", "@mut", [["get", "model.volume", ["loc", [null, [1, 3272], [1, 3284]]]]], [], []], "dot", 2, "isNullable", true, "placeholder", "输入数值，支持小数点后两位", "class", "form-control"], ["loc", [null, [1, 3239], [1, 3357]]]], ["block", "if", [["get", "model.errors.volume", ["loc", [null, [1, 3363], [1, 3382]]]]], [], 0, null, ["loc", [null, [1, 3357], [1, 3461]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child11 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3461
                },
                "end": {
                  "line": 1,
                  "column": 3520
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.volume", ["loc", [null, [1, 3500], [1, 3516]]]]],
            locals: [],
            templates: []
          };
        })();
        var child12 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3527
                },
                "end": {
                  "line": 1,
                  "column": 3626
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 3603], [1, 3620]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child13 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3988
                  },
                  "end": {
                    "line": 1,
                    "column": 4086
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3851
                },
                "end": {
                  "line": 1,
                  "column": 4093
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "number-input", [], ["id", "mileage", "value", ["subexpr", "@mut", [["get", "model.mileage", ["loc", [null, [1, 3902], [1, 3915]]]]], [], []], "dot", 2, "isNullable", true, "placeholder", "输入数值，支持小数点后两位", "class", "form-control"], ["loc", [null, [1, 3868], [1, 3988]]]], ["block", "if", [["get", "model.errors.mileage", ["loc", [null, [1, 3994], [1, 4014]]]]], [], 0, null, ["loc", [null, [1, 3988], [1, 4093]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child14 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4093
                },
                "end": {
                  "line": 1,
                  "column": 4153
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.mileage", ["loc", [null, [1, 4132], [1, 4149]]]]],
            locals: [],
            templates: []
          };
        })();
        var child15 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4160
                },
                "end": {
                  "line": 1,
                  "column": 4260
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 4237], [1, 4254]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child16 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4476
                },
                "end": {
                  "line": 1,
                  "column": 4508
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "model.rate", ["loc", [null, [1, 4494], [1, 4508]]]]],
            locals: [],
            templates: []
          };
        })();
        var child17 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4508
                },
                "end": {
                  "line": 1,
                  "column": 4611
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "margin-right");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "text-warning");
              var el2 = dom.createTextNode("[第一次加油油耗无法计算]");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.rate", ["loc", [null, [1, 4543], [1, 4557]]]]],
            locals: [],
            templates: []
          };
        })();
        var child18 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4983
                },
                "end": {
                  "line": 1,
                  "column": 5102
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "datetime-input", [], ["id", "time", "target", ["subexpr", "@mut", [["get", "model.time", ["loc", [null, [1, 5034], [1, 5044]]]]], [], []], "placeholder", "格式类似2016-06-03 12:23", "class", "form-control"], ["loc", [null, [1, 5000], [1, 5102]]]]],
            locals: [],
            templates: []
          };
        })();
        var child19 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 5102
                },
                "end": {
                  "line": 1,
                  "column": 5167
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["inline", "timefmt", [["get", "model.time", ["loc", [null, [1, 5151], [1, 5161]]]]], [], ["loc", [null, [1, 5141], [1, 5163]]]]],
            locals: [],
            templates: []
          };
        })();
        var child20 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 5174
                },
                "end": {
                  "line": 1,
                  "column": 5271
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 5248], [1, 5265]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child21 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 5517
                },
                "end": {
                  "line": 1,
                  "column": 5564
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 5540], [1, 5564]]]]],
            locals: [],
            templates: []
          };
        })();
        var child22 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 5653
                  },
                  "end": {
                    "line": 1,
                    "column": 5868
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-default btn-block");
                var el2 = dom.createTextNode("取消");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createElementMorph(element1);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["inline", "spin-button", [], ["action", "save", "isLoading", ["subexpr", "@mut", [["get", "model.isSaving", ["loc", [null, [1, 5708], [1, 5722]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "model.isUnSavable", ["loc", [null, [1, 5734], [1, 5751]]]]], [], []], "title", "保存", "class", "btn btn-info btn-block"], ["loc", [null, [1, 5670], [1, 5795]]]], ["element", "action", ["cancel"], [], ["loc", [null, [1, 5803], [1, 5822]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 5868
                  },
                  "end": {
                    "line": 1,
                    "column": 5944
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "btn btn-info btn-block");
                var el2 = dom.createTextNode("修改");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [0]);
                var morphs = new Array(1);
                morphs[0] = dom.createElementMorph(element0);
                return morphs;
              },
              statements: [["element", "action", ["edit"], [], ["loc", [null, [1, 5884], [1, 5901]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 5576
                },
                "end": {
                  "line": 1,
                  "column": 5957
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "list-group list-full");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["block", "if", [["get", "isEditing", ["loc", [null, [1, 5659], [1, 5668]]]]], [], 0, 1, ["loc", [null, [1, 5653], [1, 5951]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 5964
              }
            },
            "moduleName": "htis/templates/history/bills/bill.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "car");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("车辆");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "sub-title");
            var el6 = dom.createTextNode("[");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("]");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "project");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("所属项目");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "department");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("使用部门");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "oil");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("油品");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "volume");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("加油量");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "mileage");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("里程数");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "rate");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("油耗");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "oiler");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("加油工");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "time");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("加油时间");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "signature");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("签字");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [0]);
            var element4 = dom.childAt(element3, [1, 1, 0]);
            var element5 = dom.childAt(element3, [2]);
            var element6 = dom.childAt(element5, [1]);
            var element7 = dom.childAt(element3, [3]);
            var element8 = dom.childAt(element7, [1]);
            var element9 = dom.childAt(element3, [4]);
            var element10 = dom.childAt(element9, [1]);
            var element11 = dom.childAt(element3, [5]);
            var element12 = dom.childAt(element11, [1]);
            var element13 = dom.childAt(element3, [6]);
            var element14 = dom.childAt(element13, [1]);
            var element15 = dom.childAt(element3, [7, 1, 0]);
            var element16 = dom.childAt(element3, [9, 1]);
            var morphs = new Array(27);
            morphs[0] = dom.createMorphAt(element3, 0, 0);
            morphs[1] = dom.createMorphAt(element4, 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
            morphs[3] = dom.createAttrMorph(element5, 'class');
            morphs[4] = dom.createMorphAt(element6, 0, 0);
            morphs[5] = dom.createMorphAt(element6, 1, 1);
            morphs[6] = dom.createAttrMorph(element7, 'class');
            morphs[7] = dom.createMorphAt(element8, 0, 0);
            morphs[8] = dom.createMorphAt(element8, 1, 1);
            morphs[9] = dom.createAttrMorph(element9, 'class');
            morphs[10] = dom.createMorphAt(element10, 0, 0);
            morphs[11] = dom.createMorphAt(element10, 1, 1);
            morphs[12] = dom.createMorphAt(element10, 2, 2);
            morphs[13] = dom.createAttrMorph(element11, 'class');
            morphs[14] = dom.createMorphAt(element12, 0, 0);
            morphs[15] = dom.createMorphAt(element12, 1, 1);
            morphs[16] = dom.createAttrMorph(element13, 'class');
            morphs[17] = dom.createMorphAt(element14, 0, 0);
            morphs[18] = dom.createMorphAt(element14, 1, 1);
            morphs[19] = dom.createAttrMorph(element15, 'class');
            morphs[20] = dom.createMorphAt(element15, 0, 0);
            morphs[21] = dom.createMorphAt(dom.childAt(element3, [8, 1, 0]), 0, 0);
            morphs[22] = dom.createMorphAt(element16, 0, 0);
            morphs[23] = dom.createMorphAt(element16, 1, 1);
            morphs[24] = dom.createMorphAt(dom.childAt(element3, [10, 1, 0]), 0, 0);
            morphs[25] = dom.createMorphAt(element3, 11, 11);
            morphs[26] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "model.isNew", ["loc", [null, [1, 276], [1, 287]]]]], [], 0, null, ["loc", [null, [1, 266], [1, 636]]]], ["content", "model.car.number", ["loc", [null, [1, 806], [1, 826]]]], ["content", "model.car.vin", ["loc", [null, [1, 851], [1, 868]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.project.length", ["loc", [null, [1, 947], [1, 974]]]], "has-error"], [], ["loc", [null, [1, 942], [1, 988]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1103], [1, 1112]]]]], [], 1, 2, ["loc", [null, [1, 1097], [1, 1388]]]], ["block", "each", [["get", "model.errors.project", ["loc", [null, [1, 1396], [1, 1416]]]]], [], 3, null, ["loc", [null, [1, 1388], [1, 1497]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.department.length", ["loc", [null, [1, 1564], [1, 1594]]]], "has-error"], [], ["loc", [null, [1, 1559], [1, 1608]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1726], [1, 1735]]]]], [], 4, 5, ["loc", [null, [1, 1720], [1, 2026]]]], ["block", "each", [["get", "model.errors.department", ["loc", [null, [1, 2034], [1, 2057]]]]], [], 6, null, ["loc", [null, [1, 2026], [1, 2138]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.oils.length", ["loc", [null, [1, 2205], [1, 2229]]]], "has-error"], [], ["loc", [null, [1, 2200], [1, 2243]]]]]]], ["block", "radio-list", [], ["content", ["subexpr", "@mut", [["get", "arrangedOils", ["loc", [null, [1, 2368], [1, 2380]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.oil", ["loc", [null, [1, 2387], [1, 2396]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 2407], [1, 2416]]]]], [], []]], 7, null, ["loc", [null, [1, 2346], [1, 2802]]]], ["block", "if", [["get", "model.errors.oil", ["loc", [null, [1, 2808], [1, 2824]]]]], [], 8, null, ["loc", [null, [1, 2802], [1, 2903]]]], ["block", "each", [["get", "model.errors.oil", ["loc", [null, [1, 2911], [1, 2927]]]]], [], 9, null, ["loc", [null, [1, 2903], [1, 3008]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.volume.length", ["loc", [null, [1, 3075], [1, 3101]]]], "has-error"], [], ["loc", [null, [1, 3070], [1, 3115]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 3228], [1, 3237]]]]], [], 10, 11, ["loc", [null, [1, 3222], [1, 3527]]]], ["block", "each", [["get", "model.errors.volume", ["loc", [null, [1, 3535], [1, 3554]]]]], [], 12, null, ["loc", [null, [1, 3527], [1, 3635]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.mileage.length", ["loc", [null, [1, 3702], [1, 3729]]]], "has-error"], [], ["loc", [null, [1, 3697], [1, 3743]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 3857], [1, 3866]]]]], [], 13, 14, ["loc", [null, [1, 3851], [1, 4160]]]], ["block", "each", [["get", "model.errors.mileage", ["loc", [null, [1, 4168], [1, 4188]]]]], [], 15, null, ["loc", [null, [1, 4160], [1, 4269]]]], ["attribute", "class", ["concat", ["form-control-static text-", ["get", "model.rateColor", ["loc", [null, [1, 4457], [1, 4472]]]]]]], ["block", "if", [["get", "model.rate", ["loc", [null, [1, 4482], [1, 4492]]]]], [], 16, 17, ["loc", [null, [1, 4476], [1, 4618]]]], ["content", "model.oiler.name", ["loc", [null, [1, 4806], [1, 4826]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 4989], [1, 4998]]]]], [], 18, 19, ["loc", [null, [1, 4983], [1, 5174]]]], ["block", "each", [["get", "model.errors.time", ["loc", [null, [1, 5182], [1, 5199]]]]], [], 20, null, ["loc", [null, [1, 5174], [1, 5280]]]], ["inline", "base64-img", [["get", "model.signature.sign", ["loc", [null, [1, 5480], [1, 5500]]]]], [], ["loc", [null, [1, 5467], [1, 5502]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 5523], [1, 5538]]]]], [], 21, null, ["loc", [null, [1, 5517], [1, 5571]]]], ["block", "if", [["get", "sessionController.isBillLosePowered", ["loc", [null, [1, 5582], [1, 5617]]]]], [], 22, null, ["loc", [null, [1, 5576], [1, 5964]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19, child20, child21, child22]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 5990
            }
          },
          "moduleName": "htis/templates/history/bills/bill.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "standard-detail-panel", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 116], [1, 121]]]]], [], []], "pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 134], [1, 145]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 156], [1, 165]]]]], [], []], "isLeftButtonNeeded", true, "isRightButtonNeeded", false], 0, null, ["loc", [null, [1, 85], [1, 5990]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 6360
                    },
                    "end": {
                      "line": 1,
                      "column": 6445
                    }
                  },
                  "moduleName": "htis/templates/history/bills/bill.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 6276
                  },
                  "end": {
                    "line": 1,
                    "column": 6465
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 6366], [1, 6375]]]]], [], 0, null, ["loc", [null, [1, 6360], [1, 6452]]]], ["content", "item.name", ["loc", [null, [1, 6452], [1, 6465]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 6103
                },
                "end": {
                  "line": 1,
                  "column": 6485
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 6303], [1, 6307]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 6318], [1, 6323]]]]], [], []], "action", "setProject"], 0, null, ["loc", [null, [1, 6276], [1, 6485]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 6033
              },
              "end": {
                "line": 1,
                "column": 6500
              }
            },
            "moduleName": "htis/templates/history/bills/bill.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择项目", "leftButtonAction", "clearPop", "isRightButtonNeeded", false, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedProjects", ["loc", [null, [1, 6222], [1, 6238]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.project", ["loc", [null, [1, 6245], [1, 6258]]]]], [], []]], 0, null, ["loc", [null, [1, 6103], [1, 6500]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 6009
            },
            "end": {
              "line": 1,
              "column": 6516
            }
          },
          "moduleName": "htis/templates/history/bills/bill.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingProject", ["loc", [null, [1, 6058], [1, 6074]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 6084], [1, 6101]]]]], [], []]], 0, null, ["loc", [null, [1, 6033], [1, 6516]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 6889
                    },
                    "end": {
                      "line": 1,
                      "column": 6974
                    }
                  },
                  "moduleName": "htis/templates/history/bills/bill.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 6802
                  },
                  "end": {
                    "line": 1,
                    "column": 6994
                  }
                },
                "moduleName": "htis/templates/history/bills/bill.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 6895], [1, 6904]]]]], [], 0, null, ["loc", [null, [1, 6889], [1, 6981]]]], ["content", "item.name", ["loc", [null, [1, 6981], [1, 6994]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 6623
                },
                "end": {
                  "line": 1,
                  "column": 7014
                }
              },
              "moduleName": "htis/templates/history/bills/bill.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 6829], [1, 6833]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 6844], [1, 6849]]]]], [], []], "action", "setDepartment"], 0, null, ["loc", [null, [1, 6802], [1, 7014]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 6550
              },
              "end": {
                "line": 1,
                "column": 7029
              }
            },
            "moduleName": "htis/templates/history/bills/bill.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择部门", "leftButtonAction", "clearPop", "isRightButtonNeeded", false, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedDepartments", ["loc", [null, [1, 6742], [1, 6761]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.department", ["loc", [null, [1, 6768], [1, 6784]]]]], [], []]], 0, null, ["loc", [null, [1, 6623], [1, 7029]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 6523
            },
            "end": {
              "line": 1,
              "column": 7045
            }
          },
          "moduleName": "htis/templates/history/bills/bill.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingDepartment", ["loc", [null, [1, 6575], [1, 6594]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 6604], [1, 6621]]]]], [], []]], 0, null, ["loc", [null, [1, 6550], [1, 7045]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 7088
          }
        },
        "moduleName": "htis/templates/history/bills/bill.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 6009]]]], ["block", "if", [["get", "isPickingProject", ["loc", [null, [1, 6015], [1, 6031]]]]], [], 1, null, ["loc", [null, [1, 6009], [1, 6523]]]], ["block", "if", [["get", "isPickingDepartment", ["loc", [null, [1, 6529], [1, 6548]]]]], [], 2, null, ["loc", [null, [1, 6523], [1, 7052]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 7052], [1, 7078]]]], ["content", "outlet", ["loc", [null, [1, 7078], [1, 7088]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("htis/templates/history/bills/bill/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/history/bills/bill/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/history/bills/filter", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1446
                },
                "end": {
                  "line": 1,
                  "column": 1739
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "progress");
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "role", "progressbar");
              dom.setAttribute(el2, "aria-valuemin", "0");
              dom.setAttribute(el2, "aria-valuemax", "100");
              dom.setAttribute(el2, "class", "progress-bar progress-bar-success");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "sr-only");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("% Complete");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [0, 0]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element1, 'aria-valuenow');
              morphs[1] = dom.createAttrMorph(element1, 'style');
              morphs[2] = dom.createMorphAt(dom.childAt(element1, [0]), 0, 0);
              return morphs;
            },
            statements: [["attribute", "aria-valuenow", ["concat", [["get", "downloadedPercent", ["loc", [null, [1, 1528], [1, 1545]]]]]]], ["attribute", "style", ["concat", ["width: ", ["get", "downloadedPercent", ["loc", [null, [1, 1603], [1, 1620]]]], "%"]]], ["content", "downloadedPercent", ["loc", [null, [1, 1689], [1, 1710]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1739
                },
                "end": {
                  "line": 1,
                  "column": 1832
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-warning text-center");
              var el2 = dom.createTextNode("搜索到");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("个加油单，确定要导出吗？");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
              return morphs;
            },
            statements: [["content", "totalLength", ["loc", [null, [1, 1799], [1, 1814]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1925
                    },
                    "end": {
                      "line": 1,
                      "column": 1987
                    }
                  },
                  "moduleName": "htis/templates/history/bills/filter.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "error.message", ["loc", [null, [1, 1970], [1, 1987]]]]],
                locals: ["error"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1871
                  },
                  "end": {
                    "line": 1,
                    "column": 1996
                  }
                },
                "moduleName": "htis/templates/history/bills/filter.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "errors.server_side_error", ["loc", [null, [1, 1933], [1, 1957]]]]], [], 0, null, ["loc", [null, [1, 1925], [1, 1996]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1839
                },
                "end": {
                  "line": 1,
                  "column": 2012
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "alert-error", [], ["isCustomized", true, "action", "clearError"], 0, null, ["loc", [null, [1, 1871], [1, 2012]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1314
              },
              "end": {
                "line": 1,
                "column": 2249
              }
            },
            "moduleName": "htis/templates/history/bills/filter.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "list-group list-full");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "list-group-item list-full");
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-warning");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("button");
            dom.setAttribute(el4, "class", "btn btn-default btn-block");
            var el5 = dom.createElement("span");
            var el6 = dom.createTextNode("取消");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [0, 0, 0]);
            var element3 = dom.childAt(element2, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(element2, 0, 0);
            morphs[1] = dom.createMorphAt(element2, 1, 1);
            morphs[2] = dom.createMorphAt(element2, 2, 2);
            morphs[3] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [["block", "if", [["get", "isExporting", ["loc", [null, [1, 1452], [1, 1463]]]]], [], 0, 1, ["loc", [null, [1, 1446], [1, 1839]]]], ["block", "if", [["get", "errors.server_side_error", ["loc", [null, [1, 1845], [1, 1869]]]]], [], 2, null, ["loc", [null, [1, 1839], [1, 2019]]]], ["inline", "spin-button", [], ["action", "export", "isLoading", ["subexpr", "@mut", [["get", "isExporting", ["loc", [null, [1, 2059], [1, 2070]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isExporting", ["loc", [null, [1, 2082], [1, 2093]]]]], [], []], "title", "确定", "class", "btn btn-danger btn-block"], ["loc", [null, [1, 2019], [1, 2139]]]], ["element", "action", ["cancelExport"], [], ["loc", [null, [1, 2147], [1, 2172]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2291
                },
                "end": {
                  "line": 1,
                  "column": 2407
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger text-center");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2384], [1, 2401]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2572
                  },
                  "end": {
                    "line": 1,
                    "column": 2703
                  }
                },
                "moduleName": "htis/templates/history/bills/filter.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "spin-button", [], ["action", "reset", "isLoading", false, "isDisabled", false, "title", "重置", "class", "btn btn-default btn-block"], ["loc", [null, [1, 2595], [1, 2703]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2416
                },
                "end": {
                  "line": 1,
                  "column": 2714
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "spin-button", [], ["action", "search", "isLoading", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [1, 2492], [1, 2503]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [1, 2515], [1, 2526]]]]], [], []], "title", "开始搜索", "class", "btn btn-info btn-block"], ["loc", [null, [1, 2452], [1, 2572]]]], ["block", "unless", [["get", "isSearching", ["loc", [null, [1, 2582], [1, 2593]]]]], [], 0, null, ["loc", [null, [1, 2572], [1, 2714]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2757
                  },
                  "end": {
                    "line": 1,
                    "column": 2975
                  }
                },
                "moduleName": "htis/templates/history/bills/filter.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "list-group list-full");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["inline", "spin-button", [], ["action", "goExport", "isLoading", ["subexpr", "@mut", [["get", "isFetchingCountForExport", ["loc", [null, [1, 2856], [1, 2880]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isFetchingCountForExport", ["loc", [null, [1, 2892], [1, 2916]]]]], [], []], "title", "导出为EXCEL", "class", "btn btn-warning btn-block"], ["loc", [null, [1, 2814], [1, 2969]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2731
                },
                "end": {
                  "line": 1,
                  "column": 2986
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "unless", [["get", "isSearching", ["loc", [null, [1, 2767], [1, 2778]]]]], [], 0, null, ["loc", [null, [1, 2757], [1, 2986]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2249
              },
              "end": {
                "line": 1,
                "column": 2997
              }
            },
            "moduleName": "htis/templates/history/bills/filter.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "list-group list-full");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element0, 0, 0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            morphs[2] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "errors.server_side_error", ["loc", [null, [1, 2299], [1, 2323]]]]], [], 0, null, ["loc", [null, [1, 2291], [1, 2416]]]], ["block", "unless", [["get", "isFetchingCountForExport", ["loc", [null, [1, 2426], [1, 2450]]]]], [], 1, null, ["loc", [null, [1, 2416], [1, 2725]]]], ["block", "unless", [["get", "equipment.isXs", ["loc", [null, [1, 2741], [1, 2755]]]]], [], 2, null, ["loc", [null, [1, 2731], [1, 2997]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 3016
            }
          },
          "moduleName": "htis/templates/history/bills/filter.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading text-center");
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "title", "返回");
          dom.setAttribute(el4, "href", "javascript:void(0)");
          dom.setAttribute(el4, "class", "btn-back pull-left");
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "glyphicon glyphicon-arrow-left");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "class", "sr-only");
          var el6 = dom.createTextNode("返回");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-scroll");
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3, "class", "list-group list-full form-horizontal");
          var el4 = dom.createElement("li");
          dom.setAttribute(el4, "class", "list-group-item form-group has-feedback");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "project");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("所属项目");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-10 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4, "class", "list-group-item form-group has-feedback");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "department");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("使用部门");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-10 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4, "class", "list-group-item form-group has-feedback");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "startEndDate");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("起止时间");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-10 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [0]);
          var element5 = dom.childAt(element4, [0, 0]);
          var element6 = dom.childAt(element5, [0]);
          var element7 = dom.childAt(element4, [1]);
          var element8 = dom.childAt(element7, [0]);
          var element9 = dom.childAt(element8, [2, 1]);
          var morphs = new Array(7);
          morphs[0] = dom.createElementMorph(element6);
          morphs[1] = dom.createMorphAt(element5, 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element8, [0, 1]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element8, [1, 1]), 0, 0);
          morphs[4] = dom.createMorphAt(element9, 0, 0);
          morphs[5] = dom.createMorphAt(element9, 1, 1);
          morphs[6] = dom.createMorphAt(element7, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 170], [1, 189]]]], ["content", "pannelTitle", ["loc", [null, [1, 341], [1, 356]]]], ["inline", "pick-up", [], ["id", "project", "value", ["subexpr", "@mut", [["get", "project.name", ["loc", [null, [1, 630], [1, 642]]]]], [], []], "isPicking", ["subexpr", "@mut", [["get", "isPickingProject", ["loc", [null, [1, 653], [1, 669]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 601], [1, 692]]]], ["inline", "pick-up", [], ["id", "department", "value", ["subexpr", "@mut", [["get", "department.name", ["loc", [null, [1, 897], [1, 912]]]]], [], []], "isPicking", ["subexpr", "@mut", [["get", "isPickingDepartment", ["loc", [null, [1, 923], [1, 942]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 865], [1, 965]]]], ["inline", "date-picker-value", [], ["id", "startEndDate", "startDate", ["subexpr", "@mut", [["get", "startDate", ["loc", [null, [1, 1188], [1, 1197]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "endDate", ["loc", [null, [1, 1206], [1, 1213]]]]], [], []]], ["loc", [null, [1, 1140], [1, 1215]]]], ["inline", "date-picker", [], ["startDate", ["subexpr", "@mut", [["get", "startDate", ["loc", [null, [1, 1239], [1, 1248]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "endDate", ["loc", [null, [1, 1257], [1, 1264]]]]], [], []], "isResetNeeded", ["subexpr", "@mut", [["get", "isTimeResetNeeded", ["loc", [null, [1, 1279], [1, 1296]]]]], [], []]], ["loc", [null, [1, 1215], [1, 1298]]]], ["block", "if", [["get", "isConfirmingExport", ["loc", [null, [1, 1320], [1, 1338]]]]], [], 0, 1, ["loc", [null, [1, 1314], [1, 3004]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3424
                    },
                    "end": {
                      "line": 1,
                      "column": 3509
                    }
                  },
                  "moduleName": "htis/templates/history/bills/filter.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3340
                  },
                  "end": {
                    "line": 1,
                    "column": 3529
                  }
                },
                "moduleName": "htis/templates/history/bills/filter.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 3430], [1, 3439]]]]], [], 0, null, ["loc", [null, [1, 3424], [1, 3516]]]], ["content", "item.name", ["loc", [null, [1, 3516], [1, 3529]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3129
                },
                "end": {
                  "line": 1,
                  "column": 3549
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 3367], [1, 3371]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 3382], [1, 3387]]]]], [], []], "action", "setProject"], 0, null, ["loc", [null, [1, 3340], [1, 3549]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3059
              },
              "end": {
                "line": 1,
                "column": 3564
              }
            },
            "moduleName": "htis/templates/history/bills/filter.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择项目", "leftButtonAction", "clearPop", "rightButtonAction", "setProject", "rightButtonIcon", "glyphicon-ban-circle", "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedProjects", ["loc", [null, [1, 3292], [1, 3308]]]]], [], []], "value", ["subexpr", "@mut", [["get", "project", ["loc", [null, [1, 3315], [1, 3322]]]]], [], []]], 0, null, ["loc", [null, [1, 3129], [1, 3564]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 3035
            },
            "end": {
              "line": 1,
              "column": 3580
            }
          },
          "moduleName": "htis/templates/history/bills/filter.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingProject", ["loc", [null, [1, 3084], [1, 3100]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 3110], [1, 3127]]]]], [], []]], 0, null, ["loc", [null, [1, 3059], [1, 3580]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3994
                    },
                    "end": {
                      "line": 1,
                      "column": 4079
                    }
                  },
                  "moduleName": "htis/templates/history/bills/filter.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3907
                  },
                  "end": {
                    "line": 1,
                    "column": 4099
                  }
                },
                "moduleName": "htis/templates/history/bills/filter.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 4000], [1, 4009]]]]], [], 0, null, ["loc", [null, [1, 3994], [1, 4086]]]], ["content", "item.name", ["loc", [null, [1, 4086], [1, 4099]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3687
                },
                "end": {
                  "line": 1,
                  "column": 4119
                }
              },
              "moduleName": "htis/templates/history/bills/filter.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 3934], [1, 3938]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 3949], [1, 3954]]]]], [], []], "action", "setDepartment"], 0, null, ["loc", [null, [1, 3907], [1, 4119]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3614
              },
              "end": {
                "line": 1,
                "column": 4134
              }
            },
            "moduleName": "htis/templates/history/bills/filter.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择部门", "leftButtonAction", "clearPop", "rightButtonAction", "setDepartment", "rightButtonIcon", "glyphicon-ban-circle", "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedDepartments", ["loc", [null, [1, 3853], [1, 3872]]]]], [], []], "value", ["subexpr", "@mut", [["get", "department", ["loc", [null, [1, 3879], [1, 3889]]]]], [], []]], 0, null, ["loc", [null, [1, 3687], [1, 4134]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 3587
            },
            "end": {
              "line": 1,
              "column": 4150
            }
          },
          "moduleName": "htis/templates/history/bills/filter.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingDepartment", ["loc", [null, [1, 3639], [1, 3658]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 3668], [1, 3685]]]]], [], []]], 0, null, ["loc", [null, [1, 3614], [1, 4150]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 4157
          }
        },
        "moduleName": "htis/templates/history/bills/filter.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 3035]]]], ["block", "if", [["get", "isPickingProject", ["loc", [null, [1, 3041], [1, 3057]]]]], [], 1, null, ["loc", [null, [1, 3035], [1, 3587]]]], ["block", "if", [["get", "isPickingDepartment", ["loc", [null, [1, 3593], [1, 3612]]]]], [], 2, null, ["loc", [null, [1, 3587], [1, 4157]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("htis/templates/history/navigable-pane-bills", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 588
                  },
                  "end": {
                    "line": 1,
                    "column": 652
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "text-danger");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "item.id", ["loc", [null, [1, 634], [1, 645]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 652
                  },
                  "end": {
                    "line": 1,
                    "column": 671
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "item.id", ["loc", [null, [1, 660], [1, 671]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 678
                  },
                  "end": {
                    "line": 1,
                    "column": 822
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "split-right");
                var el2 = dom.createTextNode("|");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "sub-title");
                var el2 = dom.createTextNode("[");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("]");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
                return morphs;
              },
              statements: [["content", "item.car.number", ["loc", [null, [1, 738], [1, 757]]]], ["inline", "substr", [["get", "item.car.vin", ["loc", [null, [1, 791], [1, 803]]]]], ["start", -6], ["loc", [null, [1, 782], [1, 814]]]]],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1078
                  },
                  "end": {
                    "line": 1,
                    "column": 1212
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "pull-right split");
                var el2 = dom.createTextNode("|");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'class');
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["pull-right text-", ["get", "item.rateColor", ["loc", [null, [1, 1174], [1, 1188]]]]]]], ["content", "item.rate", ["loc", [null, [1, 1192], [1, 1205]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 504
                },
                "end": {
                  "line": 1,
                  "column": 1223
                }
              },
              "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-chevron-right pull-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "pull-right");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "pull-right split");
              var el2 = dom.createTextNode("|");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("/");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [5]);
              var morphs = new Array(7);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
              morphs[3] = dom.createAttrMorph(element1, 'class');
              morphs[4] = dom.createMorphAt(element1, 0, 0);
              morphs[5] = dom.createMorphAt(element1, 2, 2);
              morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "item.is_lost", ["loc", [null, [1, 594], [1, 606]]]]], [], 0, 1, ["loc", [null, [1, 588], [1, 678]]]], ["block", "unless", [["get", "equipment.isXs", ["loc", [null, [1, 688], [1, 702]]]]], [], 2, null, ["loc", [null, [1, 678], [1, 833]]]], ["inline", "timefmt", [["get", "item.time", ["loc", [null, [1, 932], [1, 941]]]]], [], ["loc", [null, [1, 922], [1, 943]]]], ["attribute", "class", ["concat", ["pull-right text-", ["get", "item.rateColor", ["loc", [null, [1, 1020], [1, 1034]]]]]]], ["content", "item.volume", ["loc", [null, [1, 1038], [1, 1053]]]], ["content", "item.oil.name", ["loc", [null, [1, 1054], [1, 1071]]]], ["block", "unless", [["get", "equipment.isXs", ["loc", [null, [1, 1088], [1, 1102]]]]], [], 3, null, ["loc", [null, [1, 1078], [1, 1223]]]]],
            locals: ["isChecked"],
            templates: [child0, child1, child2, child3]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 1243
              }
            },
            "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 531], [1, 535]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [1, 546], [1, 555]]]]], [], []], "action", "goItem"], 0, null, ["loc", [null, [1, 504], [1, 1243]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 1258
            }
          },
          "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "list-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 111], [1, 122]]]]], [], []], "isMoreButtonNeeded", ["subexpr", "@mut", [["get", "isMoreButtonNeeded", ["loc", [null, [1, 142], [1, 160]]]]], [], []], "isTopButtonNeeded", ["subexpr", "@mut", [["get", "isTopButtonNeeded", ["loc", [null, [1, 179], [1, 196]]]]], [], []], "isToShowAll", ["subexpr", "@mut", [["get", "isToShowAll", ["loc", [null, [1, 209], [1, 220]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 228], [1, 234]]]]], [], []], "isLeftButtonNeeded", ["subexpr", "@mut", [["get", "equipment.isXs", ["loc", [null, [1, 254], [1, 268]]]]], [], []], "isRightButtonNeeded", false, "isFilterButtonNeeded", true, "isFilterButtonLighted", ["subexpr", "@mut", [["get", "isFiltered", ["loc", [null, [1, 343], [1, 353]]]]], [], []], "filterText", ["subexpr", "@mut", [["get", "filterText", ["loc", [null, [1, 365], [1, 375]]]]], [], []], "searchKey", ["subexpr", "@mut", [["get", "searchKey", ["loc", [null, [1, 386], [1, 395]]]]], [], []], "searchPlaceholder", "输入单号搜索", "isEnterSearchable", true, "isSearching", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [1, 458], [1, 469]]]]], [], []], "content", ["subexpr", "@mut", [["get", "arrangedResult", ["loc", [null, [1, 478], [1, 492]]]]], [], []]], 0, null, ["loc", [null, [1, 85], [1, 1258]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1277
          }
        },
        "moduleName": "htis/templates/history/navigable-pane-bills.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 1277]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/history/navigable-pane-reports", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 167
              },
              "end": {
                "line": 1,
                "column": 363
              }
            },
            "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "title", "返回");
            dom.setAttribute(el1, "href", "javascript:void(0)");
            dom.setAttribute(el1, "class", "btn-back pull-left");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-arrow-left");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("返回");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element12 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element12);
            return morphs;
          },
          statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 192], [1, 211]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 591
              },
              "end": {
                "line": 1,
                "column": 1012
              }
            },
            "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "target", "_blank");
            dom.setAttribute(el1, "title", "打印");
            dom.setAttribute(el1, "href", "print.html");
            dom.setAttribute(el1, "class", "btn-print pull-right hidden-print hidden-xs margin-right");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-print");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("打印");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "spin-button", [], ["action", "export", "isIcon", true, "loadedIcon", "glyphicon-export", "isLoading", ["subexpr", "@mut", [["get", "isExporting", ["loc", [null, [1, 890], [1, 901]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isExporting", ["loc", [null, [1, 913], [1, 924]]]]], [], []], "title", "导出", "class", "btn-export pull-right margin-right is-blank hidden-print hidden-xs"], ["loc", [null, [1, 808], [1, 1012]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1105
              },
              "end": {
                "line": 1,
                "column": 1301
              }
            },
            "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "well well-full well-sm text-center");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-info-sign split-right text-warning");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "text-warning");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
            return morphs;
          },
          statements: [["content", "filterText", ["loc", [null, [1, 1274], [1, 1288]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1454
                },
                "end": {
                  "line": 1,
                  "column": 1531
                }
              },
              "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element5, 'colspan');
              morphs[1] = dom.createMorphAt(element5, 0, 0);
              return morphs;
            },
            statements: [["attribute", "colspan", ["concat", [["get", "departments.length", ["loc", [null, [1, 1492], [1, 1510]]]]]]], ["content", "oil.name", ["loc", [null, [1, 1514], [1, 1526]]]]],
            locals: ["oil"],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1611
                  },
                  "end": {
                    "line": 1,
                    "column": 1676
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("th");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "department.name", ["loc", [null, [1, 1652], [1, 1671]]]]],
              locals: ["department"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1588
                },
                "end": {
                  "line": 1,
                  "column": 1685
                }
              },
              "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "departments", ["loc", [null, [1, 1619], [1, 1630]]]]], [], 0, null, ["loc", [null, [1, 1611], [1, 1685]]]]],
            locals: ["oil"],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1694
                },
                "end": {
                  "line": 1,
                  "column": 1738
                }
              },
              "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "oil.name", ["loc", [null, [1, 1721], [1, 1733]]]]],
            locals: ["oil"],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1850
                    },
                    "end": {
                      "line": 1,
                      "column": 2036
                    }
                  },
                  "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("td");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element3, 'title');
                  morphs[1] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "title", ["concat", ["项目[", ["get", "project.name", ["loc", [null, [1, 1903], [1, 1915]]]], "]，油品[", ["get", "oil.name", ["loc", [null, [1, 1924], [1, 1932]]]], "]，部门[", ["get", "department.name", ["loc", [null, [1, 1941], [1, 1956]]]], "]"]]], ["inline", "report-compute", [["get", "model", ["loc", [null, [1, 1978], [1, 1983]]]]], ["project", ["subexpr", "@mut", [["get", "project", ["loc", [null, [1, 1992], [1, 1999]]]]], [], []], "oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 2004], [1, 2007]]]]], [], []], "department", ["subexpr", "@mut", [["get", "department", ["loc", [null, [1, 2019], [1, 2029]]]]], [], []]], ["loc", [null, [1, 1961], [1, 2031]]]]],
                locals: ["department"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1827
                  },
                  "end": {
                    "line": 1,
                    "column": 2045
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "departments", ["loc", [null, [1, 1858], [1, 1869]]]]], [], 0, null, ["loc", [null, [1, 1850], [1, 2045]]]]],
              locals: ["oil"],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2054
                  },
                  "end": {
                    "line": 1,
                    "column": 2180
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("td");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [0]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'title');
                morphs[1] = dom.createMorphAt(element2, 0, 0);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", ["项目[", ["get", "project.name", ["loc", [null, [1, 2093], [1, 2105]]]], "]，油品[", ["get", "oil.name", ["loc", [null, [1, 2114], [1, 2122]]]], "]"]]], ["inline", "report-compute", [["get", "model", ["loc", [null, [1, 2144], [1, 2149]]]]], ["project", ["subexpr", "@mut", [["get", "project", ["loc", [null, [1, 2158], [1, 2165]]]]], [], []], "oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 2170], [1, 2173]]]]], [], []]], ["loc", [null, [1, 2127], [1, 2175]]]]],
              locals: ["oil"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1767
                },
                "end": {
                  "line": 1,
                  "column": 2194
                }
              },
              "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("tr");
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [0]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(element4, [0]), 0, 0);
              morphs[1] = dom.createMorphAt(element4, 1, 1);
              morphs[2] = dom.createMorphAt(element4, 2, 2);
              return morphs;
            },
            statements: [["content", "project.name", ["loc", [null, [1, 1806], [1, 1822]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 1835], [1, 1839]]]]], [], 0, null, ["loc", [null, [1, 1827], [1, 2054]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2062], [1, 2066]]]]], [], 1, null, ["loc", [null, [1, 2054], [1, 2189]]]]],
            locals: ["project"],
            templates: [child0, child1]
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2258
                  },
                  "end": {
                    "line": 1,
                    "column": 2407
                  }
                },
                "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("th");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [0]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'title');
                morphs[1] = dom.createMorphAt(element1, 0, 0);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", ["油品[", ["get", "oil.name", ["loc", [null, [1, 2311], [1, 2319]]]], "]，部门[", ["get", "department.name", ["loc", [null, [1, 2328], [1, 2343]]]], "]"]]], ["inline", "report-compute", [["get", "model", ["loc", [null, [1, 2365], [1, 2370]]]]], ["oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 2375], [1, 2378]]]]], [], []], "department", ["subexpr", "@mut", [["get", "department", ["loc", [null, [1, 2390], [1, 2400]]]]], [], []]], ["loc", [null, [1, 2348], [1, 2402]]]]],
              locals: ["department"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2235
                },
                "end": {
                  "line": 1,
                  "column": 2416
                }
              },
              "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "departments", ["loc", [null, [1, 2266], [1, 2277]]]]], [], 0, null, ["loc", [null, [1, 2258], [1, 2416]]]]],
            locals: ["oil"],
            templates: [child0]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2425
                },
                "end": {
                  "line": 1,
                  "column": 2514
                }
              },
              "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("th");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'title');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", ["油品[", ["get", "oil.name", ["loc", [null, [1, 2464], [1, 2472]]]], "]"]]], ["inline", "report-compute", [["get", "model", ["loc", [null, [1, 2494], [1, 2499]]]]], ["oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 2504], [1, 2507]]]]], [], []]], ["loc", [null, [1, 2477], [1, 2509]]]]],
            locals: ["oil"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1308
              },
              "end": {
                "line": 1,
                "column": 2550
              }
            },
            "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "table-responsive reports-box");
            var el2 = dom.createElement("table");
            dom.setAttribute(el2, "class", "table table-bordered table2excel");
            var el3 = dom.createElement("thead");
            var el4 = dom.createElement("tr");
            var el5 = dom.createElement("th");
            dom.setAttribute(el5, "rowspan", "2");
            var el6 = dom.createTextNode("项目名称");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("th");
            var el6 = dom.createTextNode("开票数量");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("tr");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tbody");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tfoot");
            var el4 = dom.createElement("tr");
            var el5 = dom.createElement("th");
            var el6 = dom.createTextNode("合计数量");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [0, 0]);
            var element7 = dom.childAt(element6, [0]);
            var element8 = dom.childAt(element7, [0]);
            var element9 = dom.childAt(element8, [2]);
            var element10 = dom.childAt(element7, [1]);
            var element11 = dom.childAt(element6, [2, 0]);
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(element8, 1, 1);
            morphs[1] = dom.createAttrMorph(element9, 'colspan');
            morphs[2] = dom.createMorphAt(element10, 0, 0);
            morphs[3] = dom.createMorphAt(element10, 1, 1);
            morphs[4] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
            morphs[5] = dom.createMorphAt(element11, 1, 1);
            morphs[6] = dom.createMorphAt(element11, 2, 2);
            return morphs;
          },
          statements: [["block", "each", [["get", "oils", ["loc", [null, [1, 1462], [1, 1466]]]]], [], 0, null, ["loc", [null, [1, 1454], [1, 1540]]]], ["attribute", "colspan", ["concat", [["get", "oils.length", ["loc", [null, [1, 1555], [1, 1566]]]]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 1596], [1, 1600]]]]], [], 1, null, ["loc", [null, [1, 1588], [1, 1694]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 1702], [1, 1706]]]]], [], 2, null, ["loc", [null, [1, 1694], [1, 1747]]]], ["block", "each", [["get", "projects", ["loc", [null, [1, 1775], [1, 1783]]]]], [], 3, null, ["loc", [null, [1, 1767], [1, 2203]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2243], [1, 2247]]]]], [], 4, null, ["loc", [null, [1, 2235], [1, 2425]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2433], [1, 2437]]]]], [], 5, null, ["loc", [null, [1, 2425], [1, 2523]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5]
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2550
              },
              "end": {
                "line": 1,
                "column": 2668
              }
            },
            "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "empty-box");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-road");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "empty-title");
            var el3 = dom.createTextNode("没有找到数据");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 2693
            }
          },
          "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading text-center");
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "title", "筛选");
          dom.setAttribute(el4, "href", "javascript:void(0)");
          dom.setAttribute(el4, "class", "btn-back pull-right hidden-print");
          var el5 = dom.createElement("span");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "class", "sr-only");
          var el6 = dom.createTextNode("筛选");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-scroll");
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "list-group list-full");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element13 = dom.childAt(fragment, [0]);
          var element14 = dom.childAt(element13, [0, 0]);
          var element15 = dom.childAt(element14, [1]);
          var element16 = dom.childAt(element15, [0]);
          var element17 = dom.childAt(element13, [1, 0]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(element14, 0, 0);
          morphs[1] = dom.createElementMorph(element15);
          morphs[2] = dom.createAttrMorph(element16, 'class');
          morphs[3] = dom.createMorphAt(element14, 2, 2);
          morphs[4] = dom.createMorphAt(element14, 3, 3);
          morphs[5] = dom.createMorphAt(element17, 0, 0);
          morphs[6] = dom.createMorphAt(element17, 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 173], [1, 187]]]]], [], 0, null, ["loc", [null, [1, 167], [1, 370]]]], ["element", "action", ["goFilter"], [], ["loc", [null, [1, 373], [1, 394]]]], ["attribute", "class", ["concat", ["glyphicon glyphicon-filter ", ["subexpr", "if", [["get", "isFiltered", ["loc", [null, [1, 518], [1, 528]]]], "text-warning"], [], ["loc", [null, [1, 513], [1, 545]]]]]]], ["block", "if", [["get", "model.length", ["loc", [null, [1, 597], [1, 609]]]]], [], 1, null, ["loc", [null, [1, 591], [1, 1019]]]], ["content", "pannelTitle", ["loc", [null, [1, 1019], [1, 1034]]]], ["block", "if", [["get", "isFiltered", ["loc", [null, [1, 1111], [1, 1121]]]]], [], 2, null, ["loc", [null, [1, 1105], [1, 1308]]]], ["block", "if", [["get", "model.length", ["loc", [null, [1, 1314], [1, 1326]]]]], [], 3, 4, ["loc", [null, [1, 1308], [1, 2675]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2712
          }
        },
        "moduleName": "htis/templates/history/navigable-pane-reports.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 2712]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/history/reports", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 76
            }
          },
          "moduleName": "htis/templates/history/reports.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["history/navigable-pane-reports"], [], ["loc", [null, [1, 22], [1, 66]]]], ["content", "outlet", ["loc", [null, [1, 66], [1, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 84
              },
              "end": {
                "line": 1,
                "column": 192
              }
            },
            "moduleName": "htis/templates/history/reports.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["history/navigable-pane-reports"], [], ["loc", [null, [1, 138], [1, 182]]]], ["content", "outlet", ["loc", [null, [1, 182], [1, 192]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 76
            },
            "end": {
              "line": 1,
              "column": 211
            }
          },
          "moduleName": "htis/templates/history/reports.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true, "class", "print-content"], 0, null, ["loc", [null, [1, 84], [1, 211]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 218
          }
        },
        "moduleName": "htis/templates/history/reports.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 218]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/history/reports/filter", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1348
              },
              "end": {
                "line": 1,
                "column": 1464
              }
            },
            "moduleName": "htis/templates/history/reports/filter.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger text-center");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 1441], [1, 1458]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1593
              },
              "end": {
                "line": 1,
                "column": 1724
              }
            },
            "moduleName": "htis/templates/history/reports/filter.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "spin-button", [], ["action", "reset", "isLoading", false, "isDisabled", false, "title", "重置", "class", "btn btn-default btn-block"], ["loc", [null, [1, 1616], [1, 1724]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 1753
            }
          },
          "moduleName": "htis/templates/history/reports/filter.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading text-center");
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "title", "返回");
          dom.setAttribute(el4, "href", "javascript:void(0)");
          dom.setAttribute(el4, "class", "btn-back pull-left");
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "glyphicon glyphicon-arrow-left");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "class", "sr-only");
          var el6 = dom.createTextNode("返回");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-scroll");
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3, "class", "list-group list-full form-horizontal");
          var el4 = dom.createElement("li");
          dom.setAttribute(el4, "class", "list-group-item form-group has-feedback");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "project");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("所属项目");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-10 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4, "class", "list-group-item form-group has-feedback");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "department");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("使用部门");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-10 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          dom.setAttribute(el4, "class", "list-group-item form-group has-feedback");
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "for", "startEndDate");
          dom.setAttribute(el5, "class", "control-label col-md-2 col-sm-12");
          var el6 = dom.createTextNode("起止时间");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "col-md-10 col-sm-12");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "list-group list-full");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [0, 0]);
          var element2 = dom.childAt(element1, [0]);
          var element3 = dom.childAt(element0, [1]);
          var element4 = dom.childAt(element3, [0]);
          var element5 = dom.childAt(element4, [2, 1]);
          var element6 = dom.childAt(element3, [1]);
          var morphs = new Array(9);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element4, [0, 1]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element4, [1, 1]), 0, 0);
          morphs[4] = dom.createMorphAt(element5, 0, 0);
          morphs[5] = dom.createMorphAt(element5, 1, 1);
          morphs[6] = dom.createMorphAt(element6, 0, 0);
          morphs[7] = dom.createMorphAt(element6, 1, 1);
          morphs[8] = dom.createMorphAt(element6, 2, 2);
          return morphs;
        },
        statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 170], [1, 189]]]], ["content", "pannelTitle", ["loc", [null, [1, 341], [1, 356]]]], ["inline", "pick-up", [], ["id", "project", "value", ["subexpr", "@mut", [["get", "project.name", ["loc", [null, [1, 630], [1, 642]]]]], [], []], "isPicking", ["subexpr", "@mut", [["get", "isPickingProject", ["loc", [null, [1, 653], [1, 669]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 601], [1, 692]]]], ["inline", "pick-up", [], ["id", "department", "value", ["subexpr", "@mut", [["get", "department.name", ["loc", [null, [1, 897], [1, 912]]]]], [], []], "isPicking", ["subexpr", "@mut", [["get", "isPickingDepartment", ["loc", [null, [1, 923], [1, 942]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 865], [1, 965]]]], ["inline", "date-picker-value", [], ["id", "startEndDate", "startDate", ["subexpr", "@mut", [["get", "startDate", ["loc", [null, [1, 1188], [1, 1197]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "endDate", ["loc", [null, [1, 1206], [1, 1213]]]]], [], []]], ["loc", [null, [1, 1140], [1, 1215]]]], ["inline", "date-picker", [], ["startDate", ["subexpr", "@mut", [["get", "startDate", ["loc", [null, [1, 1239], [1, 1248]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "endDate", ["loc", [null, [1, 1257], [1, 1264]]]]], [], []], "isResetNeeded", ["subexpr", "@mut", [["get", "isTimeResetNeeded", ["loc", [null, [1, 1279], [1, 1296]]]]], [], []]], ["loc", [null, [1, 1215], [1, 1298]]]], ["block", "each", [["get", "errors.server_side_error", ["loc", [null, [1, 1356], [1, 1380]]]]], [], 0, null, ["loc", [null, [1, 1348], [1, 1473]]]], ["inline", "spin-button", [], ["action", "search", "isLoading", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [1, 1513], [1, 1524]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isUnSavable", ["loc", [null, [1, 1536], [1, 1547]]]]], [], []], "title", "开始搜索", "class", "btn btn-info btn-block"], ["loc", [null, [1, 1473], [1, 1593]]]], ["block", "unless", [["get", "isSearching", ["loc", [null, [1, 1603], [1, 1614]]]]], [], 1, null, ["loc", [null, [1, 1593], [1, 1735]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2161
                    },
                    "end": {
                      "line": 1,
                      "column": 2246
                    }
                  },
                  "moduleName": "htis/templates/history/reports/filter.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2077
                  },
                  "end": {
                    "line": 1,
                    "column": 2266
                  }
                },
                "moduleName": "htis/templates/history/reports/filter.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 2167], [1, 2176]]]]], [], 0, null, ["loc", [null, [1, 2161], [1, 2253]]]], ["content", "item.name", ["loc", [null, [1, 2253], [1, 2266]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1866
                },
                "end": {
                  "line": 1,
                  "column": 2286
                }
              },
              "moduleName": "htis/templates/history/reports/filter.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 2104], [1, 2108]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 2119], [1, 2124]]]]], [], []], "action", "setProject"], 0, null, ["loc", [null, [1, 2077], [1, 2286]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1796
              },
              "end": {
                "line": 1,
                "column": 2301
              }
            },
            "moduleName": "htis/templates/history/reports/filter.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择项目", "leftButtonAction", "clearPop", "rightButtonAction", "setProject", "rightButtonIcon", "glyphicon-ban-circle", "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedProjects", ["loc", [null, [1, 2029], [1, 2045]]]]], [], []], "value", ["subexpr", "@mut", [["get", "project", ["loc", [null, [1, 2052], [1, 2059]]]]], [], []]], 0, null, ["loc", [null, [1, 1866], [1, 2301]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1772
            },
            "end": {
              "line": 1,
              "column": 2317
            }
          },
          "moduleName": "htis/templates/history/reports/filter.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingProject", ["loc", [null, [1, 1821], [1, 1837]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 1847], [1, 1864]]]]], [], []]], 0, null, ["loc", [null, [1, 1796], [1, 2317]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2731
                    },
                    "end": {
                      "line": 1,
                      "column": 2816
                    }
                  },
                  "moduleName": "htis/templates/history/reports/filter.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2644
                  },
                  "end": {
                    "line": 1,
                    "column": 2836
                  }
                },
                "moduleName": "htis/templates/history/reports/filter.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 2737], [1, 2746]]]]], [], 0, null, ["loc", [null, [1, 2731], [1, 2823]]]], ["content", "item.name", ["loc", [null, [1, 2823], [1, 2836]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2424
                },
                "end": {
                  "line": 1,
                  "column": 2856
                }
              },
              "moduleName": "htis/templates/history/reports/filter.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 2671], [1, 2675]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 2686], [1, 2691]]]]], [], []], "action", "setDepartment"], 0, null, ["loc", [null, [1, 2644], [1, 2856]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2351
              },
              "end": {
                "line": 1,
                "column": 2871
              }
            },
            "moduleName": "htis/templates/history/reports/filter.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择部门", "leftButtonAction", "clearPop", "rightButtonAction", "setDepartment", "rightButtonIcon", "glyphicon-ban-circle", "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedDepartments", ["loc", [null, [1, 2590], [1, 2609]]]]], [], []], "value", ["subexpr", "@mut", [["get", "department", ["loc", [null, [1, 2616], [1, 2626]]]]], [], []]], 0, null, ["loc", [null, [1, 2424], [1, 2871]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2324
            },
            "end": {
              "line": 1,
              "column": 2887
            }
          },
          "moduleName": "htis/templates/history/reports/filter.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingDepartment", ["loc", [null, [1, 2376], [1, 2395]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 2405], [1, 2422]]]]], [], []]], 0, null, ["loc", [null, [1, 2351], [1, 2887]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2894
          }
        },
        "moduleName": "htis/templates/history/reports/filter.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 1772]]]], ["block", "if", [["get", "isPickingProject", ["loc", [null, [1, 1778], [1, 1794]]]]], [], 1, null, ["loc", [null, [1, 1772], [1, 2324]]]], ["block", "if", [["get", "isPickingDepartment", ["loc", [null, [1, 2330], [1, 2349]]]]], [], 2, null, ["loc", [null, [1, 2324], [1, 2894]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("htis/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 47
          }
        },
        "moduleName": "htis/templates/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading");
        var el2 = dom.createTextNode("Loading...");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 37], [1, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/login", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 876
            },
            "end": {
              "line": 1,
              "column": 982
            }
          },
          "moduleName": "htis/templates/login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 989
            },
            "end": {
              "line": 1,
              "column": 1175
            }
          },
          "moduleName": "htis/templates/login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "spin-button", [], ["action", "go", "isIcon", true, "isLoading", ["subexpr", "@mut", [["get", "model.isSaving", ["loc", [null, [1, 1063], [1, 1077]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "model.isUnSavable", ["loc", [null, [1, 1087], [1, 1104]]]]], [], []], "title", "登录", "class", "input-group-addin addin-large pull-right is-blank"], ["loc", [null, [1, 1015], [1, 1175]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1182
            },
            "end": {
              "line": 1,
              "column": 1292
            }
          },
          "moduleName": "htis/templates/login.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "help-block text-danger");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.message", ["loc", [null, [1, 1269], [1, 1286]]]]],
        locals: ["error"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1347
          }
        },
        "moduleName": "htis/templates/login.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "login");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "navigable-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "signin-wrap");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "role", "form");
        dom.setAttribute(el4, "class", "form-signin");
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5, "class", "form-signin-heading");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "visible-xs-inline");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "hidden-xs");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group");
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "for", "log_name");
        dom.setAttribute(el6, "class", "sr-only");
        var el7 = dom.createTextNode("用户");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "input-group");
        var el7 = dom.createElement("label");
        dom.setAttribute(el7, "for", "log_password");
        dom.setAttribute(el7, "class", "sr-only");
        var el8 = dom.createTextNode("密码");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [0, 0, 0]);
        var element2 = dom.childAt(element1, [0]);
        var element3 = dom.childAt(element1, [2]);
        var element4 = dom.childAt(element3, [0]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [0]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[5] = dom.createAttrMorph(element3, 'class');
        morphs[6] = dom.createMorphAt(element4, 1, 1);
        morphs[7] = dom.createMorphAt(element4, 2, 2);
        morphs[8] = dom.createMorphAt(element4, 3, 3);
        morphs[9] = dom.createMorphAt(element4, 4, 4);
        morphs[10] = dom.createMorphAt(element0, 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main opacity09 trans-all-05 ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 94], [1, 128]]]], "is-folded"], [], ["loc", [null, [1, 89], [1, 142]]]]]]], ["content", "applicationController.appShortTitle", ["loc", [null, [1, 303], [1, 342]]]], ["content", "applicationController.appTitle", ["loc", [null, [1, 373], [1, 407]]]], ["inline", "input", [], ["id", "log_name", "type", "text", "placeholder", "手机号或邮箱地址", "value", ["subexpr", "@mut", [["get", "model.log_name", ["loc", [null, [1, 554], [1, 568]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 491], [1, 591]]]], ["attribute", "class", ["concat", ["form-group ", ["subexpr", "if", [["get", "model.errors.messages.length", ["loc", [null, [1, 625], [1, 653]]]], "has-error has-feedback"], [], ["loc", [null, [1, 620], [1, 680]]]]]]], ["inline", "input", [], ["id", "log_password", "type", "password", "enter", "go", "value", ["subexpr", "@mut", [["get", "model.log_password", ["loc", [null, [1, 818], [1, 836]]]]], [], []], "placeholder", "密码", "class", "form-control"], ["loc", [null, [1, 759], [1, 876]]]], ["block", "if", [["get", "model.errors.messages.length", ["loc", [null, [1, 882], [1, 910]]]]], [], 0, null, ["loc", [null, [1, 876], [1, 989]]]], ["block", "if", [["get", "model.log_password", ["loc", [null, [1, 995], [1, 1013]]]]], [], 1, null, ["loc", [null, [1, 989], [1, 1182]]]], ["block", "each", [["get", "model.errors.server_side_error", ["loc", [null, [1, 1190], [1, 1220]]]]], [], 2, null, ["loc", [null, [1, 1182], [1, 1301]]]], ["content", "outlet", ["loc", [null, [1, 1331], [1, 1341]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("htis/templates/manage", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1028
                  },
                  "end": {
                    "line": 1,
                    "column": 1106
                  }
                },
                "moduleName": "htis/templates/manage.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1281
                  },
                  "end": {
                    "line": 1,
                    "column": 1360
                  }
                },
                "moduleName": "htis/templates/manage.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1541
                  },
                  "end": {
                    "line": 1,
                    "column": 1619
                  }
                },
                "moduleName": "htis/templates/manage.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1795
                  },
                  "end": {
                    "line": 1,
                    "column": 1874
                  }
                },
                "moduleName": "htis/templates/manage.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child4 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2055
                  },
                  "end": {
                    "line": 1,
                    "column": 2134
                  }
                },
                "moduleName": "htis/templates/manage.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child5 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2310
                  },
                  "end": {
                    "line": 1,
                    "column": 2389
                  }
                },
                "moduleName": "htis/templates/manage.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 206
                },
                "end": {
                  "line": 1,
                  "column": 2418
                }
              },
              "moduleName": "htis/templates/manage.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "panel");
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "panel-heading text-center");
              var el3 = dom.createElement("h3");
              dom.setAttribute(el3, "class", "panel-title");
              var el4 = dom.createElement("a");
              dom.setAttribute(el4, "title", "返回");
              dom.setAttribute(el4, "href", "javascript:void(0)");
              dom.setAttribute(el4, "class", "btn-home pull-left");
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-home");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "sr-only");
              var el6 = dom.createTextNode("返回");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              dom.setAttribute(el4, "title", "通知中心");
              dom.setAttribute(el4, "href", "javascript:void(0)");
              dom.setAttribute(el4, "class", "btn-bell pull-right");
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "bell-count");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-bell");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "sr-only");
              var el6 = dom.createTextNode("通知中心");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "panel-scroll");
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "list-group list-full");
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("搜索");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-search pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("待审核");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-time pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("待处理");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-warning-sign pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("可加油");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-inbox pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("已暂停");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-ban-circle pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("已闲置");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-cloud pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var element1 = dom.childAt(element0, [0, 0]);
              var element2 = dom.childAt(element1, [0]);
              var element3 = dom.childAt(element1, [1]);
              var element4 = dom.childAt(element0, [1, 0]);
              var element5 = dom.childAt(element4, [0]);
              var element6 = dom.childAt(element4, [1]);
              var element7 = dom.childAt(element4, [2]);
              var element8 = dom.childAt(element4, [3]);
              var element9 = dom.childAt(element4, [4]);
              var element10 = dom.childAt(element4, [5]);
              var morphs = new Array(22);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createElementMorph(element3);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
              morphs[3] = dom.createMorphAt(element1, 2, 2);
              morphs[4] = dom.createAttrMorph(element5, 'class');
              morphs[5] = dom.createElementMorph(element5);
              morphs[6] = dom.createMorphAt(element5, 2, 2);
              morphs[7] = dom.createAttrMorph(element6, 'class');
              morphs[8] = dom.createElementMorph(element6);
              morphs[9] = dom.createMorphAt(element6, 2, 2);
              morphs[10] = dom.createAttrMorph(element7, 'class');
              morphs[11] = dom.createElementMorph(element7);
              morphs[12] = dom.createMorphAt(element7, 2, 2);
              morphs[13] = dom.createAttrMorph(element8, 'class');
              morphs[14] = dom.createElementMorph(element8);
              morphs[15] = dom.createMorphAt(element8, 2, 2);
              morphs[16] = dom.createAttrMorph(element9, 'class');
              morphs[17] = dom.createElementMorph(element9);
              morphs[18] = dom.createMorphAt(element9, 2, 2);
              morphs[19] = dom.createAttrMorph(element10, 'class');
              morphs[20] = dom.createElementMorph(element10);
              morphs[21] = dom.createMorphAt(element10, 2, 2);
              return morphs;
            },
            statements: [["element", "action", ["goHome"], [], ["loc", [null, [1, 376], [1, 395]]]], ["element", "action", ["goBell"], [], ["loc", [null, [1, 544], [1, 563]]]], ["content", "messagesController.model.length", ["loc", [null, [1, 655], [1, 690]]]], ["content", "pannelTitle", ["loc", [null, [1, 779], [1, 794]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isSearchs", ["loc", [null, [1, 919], [1, 928]]]], "active"], [], ["loc", [null, [1, 914], [1, 939]]]]]]], ["element", "action", ["goSearchs"], [], ["loc", [null, [1, 868], [1, 890]]]], ["block", "if", [["get", "isSearchs", ["loc", [null, [1, 1034], [1, 1043]]]]], [], 0, null, ["loc", [null, [1, 1028], [1, 1113]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isPendings", ["loc", [null, [1, 1172], [1, 1182]]]], "active"], [], ["loc", [null, [1, 1167], [1, 1193]]]]]]], ["element", "action", ["goPendings"], [], ["loc", [null, [1, 1120], [1, 1143]]]], ["block", "if", [["get", "isPendings", ["loc", [null, [1, 1287], [1, 1297]]]]], [], 1, null, ["loc", [null, [1, 1281], [1, 1367]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isUnuseds", ["loc", [null, [1, 1425], [1, 1434]]]], "active"], [], ["loc", [null, [1, 1420], [1, 1445]]]]]]], ["element", "action", ["goUnuseds"], [], ["loc", [null, [1, 1374], [1, 1396]]]], ["block", "if", [["get", "isUnuseds", ["loc", [null, [1, 1547], [1, 1556]]]]], [], 2, null, ["loc", [null, [1, 1541], [1, 1626]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isReleases", ["loc", [null, [1, 1685], [1, 1695]]]], "active"], [], ["loc", [null, [1, 1680], [1, 1706]]]]]]], ["element", "action", ["goReleases"], [], ["loc", [null, [1, 1633], [1, 1656]]]], ["block", "if", [["get", "isReleases", ["loc", [null, [1, 1801], [1, 1811]]]]], [], 3, null, ["loc", [null, [1, 1795], [1, 1881]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isDisables", ["loc", [null, [1, 1940], [1, 1950]]]], "active"], [], ["loc", [null, [1, 1935], [1, 1961]]]]]]], ["element", "action", ["goDisables"], [], ["loc", [null, [1, 1888], [1, 1911]]]], ["block", "if", [["get", "isDisables", ["loc", [null, [1, 2061], [1, 2071]]]]], [], 4, null, ["loc", [null, [1, 2055], [1, 2141]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isArchives", ["loc", [null, [1, 2200], [1, 2210]]]], "active"], [], ["loc", [null, [1, 2195], [1, 2221]]]]]]], ["element", "action", ["goArchives"], [], ["loc", [null, [1, 2148], [1, 2171]]]], ["block", "if", [["get", "isArchives", ["loc", [null, [1, 2316], [1, 2326]]]]], [], 5, null, ["loc", [null, [1, 2310], [1, 2396]]]]],
            locals: [],
            templates: [child0, child1, child2, child3, child4, child5]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2437
                },
                "end": {
                  "line": 1,
                  "column": 2469
                }
              },
              "moduleName": "htis/templates/manage.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "outlet", ["loc", [null, [1, 2459], [1, 2469]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 162
              },
              "end": {
                "line": 1,
                "column": 2476
              }
            },
            "moduleName": "htis/templates/manage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 234], [1, 243]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 253], [1, 261]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 269], [1, 275]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 283], [1, 289]]]]], [], []]], 0, null, ["loc", [null, [1, 206], [1, 2437]]]], ["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 2443], [1, 2457]]]]], [], 1, null, ["loc", [null, [1, 2437], [1, 2476]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2495
              },
              "end": {
                "line": 1,
                "column": 2530
              }
            },
            "moduleName": "htis/templates/manage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "outlet", ["loc", [null, [1, 2520], [1, 2530]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 145
            },
            "end": {
              "line": 1,
              "column": 2537
            }
          },
          "moduleName": "htis/templates/manage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isLeft", ["subexpr", "@mut", [["get", "equipment.isNotXs", ["loc", [null, [1, 187], [1, 204]]]]], [], []]], 0, null, ["loc", [null, [1, 162], [1, 2495]]]], ["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 2501], [1, 2518]]]]], [], 1, null, ["loc", [null, [1, 2495], [1, 2537]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2537
            },
            "end": {
              "line": 1,
              "column": 2577
            }
          },
          "moduleName": "htis/templates/manage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "none-powered", [], ["action", "goHome"], ["loc", [null, [1, 2545], [1, 2577]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2590
          }
        },
        "moduleName": "htis/templates/manage.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "manage");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element11, 'class');
        morphs[2] = dom.createMorphAt(element11, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main opacity09 trans-all-05 ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 95], [1, 129]]]], "is-folded"], [], ["loc", [null, [1, 90], [1, 143]]]]]]], ["block", "if", [["get", "isPowered", ["loc", [null, [1, 151], [1, 160]]]]], [], 0, 1, ["loc", [null, [1, 145], [1, 2584]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/archives", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "htis/templates/manage/archives.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 22], [1, 62]]]], ["content", "outlet", ["loc", [null, [1, 62], [1, 72]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 80
              },
              "end": {
                "line": 1,
                "column": 153
              }
            },
            "moduleName": "htis/templates/manage/archives.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 113], [1, 153]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 72
            },
            "end": {
              "line": 1,
              "column": 182
            }
          },
          "moduleName": "htis/templates/manage/archives.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isCenter", true], 0, null, ["loc", [null, [1, 80], [1, 172]]]], ["content", "outlet", ["loc", [null, [1, 172], [1, 182]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 189
          }
        },
        "moduleName": "htis/templates/manage/archives.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 189]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/archives/archive", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 71
            }
          },
          "moduleName": "htis/templates/manage/archives/archive.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 22], [1, 61]]]], ["content", "outlet", ["loc", [null, [1, 61], [1, 71]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 79
              },
              "end": {
                "line": 1,
                "column": 163
              }
            },
            "moduleName": "htis/templates/manage/archives/archive.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 124], [1, 163]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "htis/templates/manage/archives/archive.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true, "isMulti", true], 0, null, ["loc", [null, [1, 79], [1, 182]]]], ["content", "outlet", ["loc", [null, [1, 182], [1, 192]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 199
          }
        },
        "moduleName": "htis/templates/manage/archives/archive.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 199]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/archives/archive/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/archives/archive/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/archives/archive/restore", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/archives/archive/restore.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/archives/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 42
            }
          },
          "moduleName": "htis/templates/manage/archives/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "default-index", ["loc", [null, [1, 25], [1, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "htis/templates/manage/archives/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 49]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/cars", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/cars.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/cars/car", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/cars/car.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/cars/car/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/cars/car/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/cars/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/cars/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/disables", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "htis/templates/manage/disables.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 22], [1, 62]]]], ["content", "outlet", ["loc", [null, [1, 62], [1, 72]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 80
              },
              "end": {
                "line": 1,
                "column": 153
              }
            },
            "moduleName": "htis/templates/manage/disables.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 113], [1, 153]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 72
            },
            "end": {
              "line": 1,
              "column": 182
            }
          },
          "moduleName": "htis/templates/manage/disables.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isCenter", true], 0, null, ["loc", [null, [1, 80], [1, 172]]]], ["content", "outlet", ["loc", [null, [1, 172], [1, 182]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 189
          }
        },
        "moduleName": "htis/templates/manage/disables.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 189]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/disables/disable", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 71
            }
          },
          "moduleName": "htis/templates/manage/disables/disable.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 22], [1, 61]]]], ["content", "outlet", ["loc", [null, [1, 61], [1, 71]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 79
              },
              "end": {
                "line": 1,
                "column": 163
              }
            },
            "moduleName": "htis/templates/manage/disables/disable.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 124], [1, 163]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "htis/templates/manage/disables/disable.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true, "isMulti", true], 0, null, ["loc", [null, [1, 79], [1, 182]]]], ["content", "outlet", ["loc", [null, [1, 182], [1, 192]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 199
          }
        },
        "moduleName": "htis/templates/manage/disables/disable.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 199]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/disables/disable/archive", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/disables/disable/archive.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/disables/disable/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/disables/disable/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/disables/disable/newinstance", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/disables/disable/newinstance.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/disables/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 42
            }
          },
          "moduleName": "htis/templates/manage/disables/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "default-index", ["loc", [null, [1, 25], [1, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "htis/templates/manage/disables/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 49]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/instance-list",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":370},"end":{"line":1,"column":475}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"title","待审核");dom.setAttribute(el1,"class","glyphicon glyphicon-time text-warning pull-right");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":482},"end":{"line":1,"column":589}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"title","可加油");dom.setAttribute(el1,"class","glyphicon glyphicon-inbox text-success pull-right");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":589},"end":{"line":1,"column":687}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"title","待处理");dom.setAttribute(el1,"class","glyphicon glyphicon-warning-sign text-warning pull-right");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":694},"end":{"line":1,"column":807}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"title","已暂停");dom.setAttribute(el1,"class","glyphicon glyphicon-ban-circle text-danger pull-right");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":818},"end":{"line":1,"column":926}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"title","已结束/归档");dom.setAttribute(el1,"class","glyphicon glyphicon-cloud text-muted pull-right");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child5=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":1366},"end":{"line":1,"column":1442}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","item.project.name",["loc",[null,[1,1415],[1,1436]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":1223},"end":{"line":1,"column":1453}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,1376],[1,1383]]]]],[],0,null,["loc",[null,[1,1366],[1,1453]]]]],locals:["isEqual"],templates:[child0]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":1585},"end":{"line":1,"column":1691}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":1698},"end":{"line":1,"column":1806}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,1783],[1,1800]]]]],locals:["error"],templates:[]};})();var child3=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":2195},"end":{"line":1,"column":2274}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","item.department.name",["loc",[null,[1,2244],[1,2268]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":2046},"end":{"line":1,"column":2285}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,2205],[1,2212]]]]],[],0,null,["loc",[null,[1,2195],[1,2285]]]]],locals:["isEqual"],templates:[child0]};})();var child4=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":2426},"end":{"line":1,"column":2535}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child5=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":2542},"end":{"line":1,"column":2653}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,2630],[1,2647]]]]],locals:["error"],templates:[]};})();var child6=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":3036},"end":{"line":1,"column":3109}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","item.user_name",["loc",[null,[1,3085],[1,3103]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":2890},"end":{"line":1,"column":3120}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,3046],[1,3053]]]]],[],0,null,["loc",[null,[1,3036],[1,3120]]]]],locals:["isEqual"],templates:[child0]};})();var child7=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":3226},"end":{"line":1,"column":3334}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child8=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":3341},"end":{"line":1,"column":3451}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,3428],[1,3445]]]]],locals:["error"],templates:[]};})();var child9=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":3811},"end":{"line":1,"column":3907}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["inline","checkbox-list-value",[],["content",["subexpr","@mut",[["get","item.oils",["loc",[null,[1,3890],[1,3899]]]]],[],[]]],["loc",[null,[1,3860],[1,3901]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":3676},"end":{"line":1,"column":3918}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,3821],[1,3828]]]]],[],0,null,["loc",[null,[1,3811],[1,3918]]]]],locals:["isEqual"],templates:[child0]};})();var child10=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":4133},"end":{"line":1,"column":4213}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-eye-open text-success");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":4213},"end":{"line":1,"column":4284}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-eye-close text-danger");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":4023},"end":{"line":1,"column":4304}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isChecked",["loc",[null,[1,4139],[1,4148]]]]],[],0,1,["loc",[null,[1,4133],[1,4291]]]],["content","item.name",["loc",[null,[1,4291],[1,4304]]]]],locals:["isChecked"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":3935},"end":{"line":1,"column":4327}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:2,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","checkbox-list-item",[],["value",["subexpr","@mut",[["get","item",["loc",[null,[1,4051],[1,4055]]]]],[],[]],"compareto",["subexpr","@mut",[["get","selection",["loc",[null,[1,4066],[1,4075]]]]],[],[]],"isEditing",true,"action","checkOilForTrace"],0,null,["loc",[null,[1,4023],[1,4327]]]]],locals:["item","selection"],templates:[child0]};})();var child11=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":4345},"end":{"line":1,"column":4448}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child12=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":4455},"end":{"line":1,"column":4560}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,4537],[1,4554]]]]],locals:["error"],templates:[]};})();var child13=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":4925},"end":{"line":1,"column":4993}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","item.goal",["loc",[null,[1,4974],[1,4987]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":4788},"end":{"line":1,"column":5004}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,4935],[1,4942]]]]],[],0,null,["loc",[null,[1,4925],[1,5004]]]]],locals:["isEqual"],templates:[child0]};})();var child14=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":5112},"end":{"line":1,"column":5215}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child15=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":5222},"end":{"line":1,"column":5327}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,5304],[1,5321]]]]],locals:["error"],templates:[]};})();var child16=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":5731},"end":{"line":1,"column":5843}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","del text-warning margin-right");var el2=dom.createTextNode("起：");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),1,1);return morphs;},statements:[["inline","timefmt",[["get","item.start_date",["loc",[null,[1,5806],[1,5821]]]],"yyyy-MM-dd"],[],["loc",[null,[1,5796],[1,5836]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":5567},"end":{"line":1,"column":5854}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,5741],[1,5748]]]]],[],0,null,["loc",[null,[1,5731],[1,5854]]]]],locals:["isEqual"],templates:[child0]};})();var child17=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":6031},"end":{"line":1,"column":6128}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","del text-warning");var el2=dom.createTextNode("止：");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),1,1);return morphs;},statements:[["inline","timefmt",[["get","item.end_date",["loc",[null,[1,6093],[1,6106]]]],"yyyy-MM-dd"],[],["loc",[null,[1,6083],[1,6121]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":5871},"end":{"line":1,"column":6139}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,6041],[1,6048]]]]],[],0,null,["loc",[null,[1,6031],[1,6139]]]]],locals:["isEqual"],templates:[child0]};})();var child18=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":6346},"end":{"line":1,"column":6455}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child19=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":6462},"end":{"line":1,"column":6573}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,6550],[1,6567]]]]],locals:["error"],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":986},"end":{"line":1,"column":6593}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"for","project");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("所属项目");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"for","department");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("使用部门");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"for","user_name");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("使用人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"for","oil");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("油品");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"for","goal");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("实验目的");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");var el2=dom.createElement("label");dom.setAttribute(el2,"for","start_date");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("起止时间");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element48=dom.childAt(fragment,[0]);var element49=dom.childAt(element48,[1]);var element50=dom.childAt(fragment,[1]);var element51=dom.childAt(element50,[1]);var element52=dom.childAt(fragment,[2]);var element53=dom.childAt(element52,[1]);var element54=dom.childAt(fragment,[3]);var element55=dom.childAt(element54,[1]);var element56=dom.childAt(fragment,[4]);var element57=dom.childAt(element56,[1]);var element58=dom.childAt(fragment,[5]);var element59=dom.childAt(element58,[1]);var morphs=new Array(32);morphs[0] = dom.createAttrMorph(element48,'class');morphs[1] = dom.createMorphAt(element49,0,0);morphs[2] = dom.createMorphAt(element49,1,1);morphs[3] = dom.createMorphAt(element49,2,2);morphs[4] = dom.createMorphAt(element49,3,3);morphs[5] = dom.createAttrMorph(element50,'class');morphs[6] = dom.createMorphAt(element51,0,0);morphs[7] = dom.createMorphAt(element51,1,1);morphs[8] = dom.createMorphAt(element51,2,2);morphs[9] = dom.createMorphAt(element51,3,3);morphs[10] = dom.createAttrMorph(element52,'class');morphs[11] = dom.createMorphAt(element53,0,0);morphs[12] = dom.createMorphAt(element53,1,1);morphs[13] = dom.createMorphAt(element53,2,2);morphs[14] = dom.createMorphAt(element53,3,3);morphs[15] = dom.createAttrMorph(element54,'class');morphs[16] = dom.createMorphAt(element55,0,0);morphs[17] = dom.createMorphAt(element55,1,1);morphs[18] = dom.createMorphAt(element55,2,2);morphs[19] = dom.createMorphAt(element55,3,3);morphs[20] = dom.createAttrMorph(element56,'class');morphs[21] = dom.createMorphAt(element57,0,0);morphs[22] = dom.createMorphAt(element57,1,1);morphs[23] = dom.createMorphAt(element57,2,2);morphs[24] = dom.createMorphAt(element57,3,3);morphs[25] = dom.createAttrMorph(element58,'class');morphs[26] = dom.createMorphAt(element59,0,0);morphs[27] = dom.createMorphAt(element59,1,1);morphs[28] = dom.createMorphAt(element59,2,2);morphs[29] = dom.createMorphAt(element59,3,3);morphs[30] = dom.createMorphAt(element59,4,4);morphs[31] = dom.createMorphAt(element59,5,5);return morphs;},statements:[["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingTrace.errors.project.length",["loc",[null,[1,1065],[1,1100]]]],"has-error"],[],["loc",[null,[1,1060],[1,1114]]]]]]],["block","compare-item",[],["isChangeTagable",true,"changeTag","所属项目","changeTags",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,1288],[1,1298]]]]],[],[]],"content",["subexpr","@mut",[["get","item.project",["loc",[null,[1,1307],[1,1319]]]]],[],[]],"compareto",["subexpr","@mut",[["get","creatingTrace.project",["loc",[null,[1,1330],[1,1351]]]]],[],[]]],0,null,["loc",[null,[1,1223],[1,1470]]]],["inline","pick-up",[],["id","project_t","value",["subexpr","@mut",[["get","creatingTrace.project.name",["loc",[null,[1,1501],[1,1527]]]]],[],[]],"isPicking",["subexpr","@mut",[["get","isPickingProjectForTrace",["loc",[null,[1,1538],[1,1562]]]]],[],[]],"class","form-control"],["loc",[null,[1,1470],[1,1585]]]],["block","if",[["get","creatingTrace.errors.project",["loc",[null,[1,1591],[1,1619]]]]],[],1,null,["loc",[null,[1,1585],[1,1698]]]],["block","each",[["get","creatingTrace.errors.project",["loc",[null,[1,1706],[1,1734]]]]],[],2,null,["loc",[null,[1,1698],[1,1815]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingTrace.errors.department.length",["loc",[null,[1,1882],[1,1920]]]],"has-error"],[],["loc",[null,[1,1877],[1,1934]]]]]]],["block","compare-item",[],["isChangeTagable",true,"changeTag","使用部门","changeTags",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,2111],[1,2121]]]]],[],[]],"content",["subexpr","@mut",[["get","item.department",["loc",[null,[1,2130],[1,2145]]]]],[],[]],"compareto",["subexpr","@mut",[["get","creatingTrace.department",["loc",[null,[1,2156],[1,2180]]]]],[],[]]],3,null,["loc",[null,[1,2046],[1,2302]]]],["inline","pick-up",[],["id","department_t","value",["subexpr","@mut",[["get","creatingTrace.department.name",["loc",[null,[1,2336],[1,2365]]]]],[],[]],"isPicking",["subexpr","@mut",[["get","isPickingDepartmentForTrace",["loc",[null,[1,2376],[1,2403]]]]],[],[]],"class","form-control"],["loc",[null,[1,2302],[1,2426]]]],["block","if",[["get","creatingTrace.errors.department",["loc",[null,[1,2432],[1,2463]]]]],[],4,null,["loc",[null,[1,2426],[1,2542]]]],["block","each",[["get","creatingTrace.errors.department",["loc",[null,[1,2550],[1,2581]]]]],[],5,null,["loc",[null,[1,2542],[1,2662]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingTrace.errors.user_name.length",["loc",[null,[1,2729],[1,2766]]]],"has-error"],[],["loc",[null,[1,2724],[1,2780]]]]]]],["block","compare-item",[],["isChangeTagable",true,"changeTag","使用人","changeTags",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,2954],[1,2964]]]]],[],[]],"content",["subexpr","@mut",[["get","item.user_name",["loc",[null,[1,2973],[1,2987]]]]],[],[]],"compareto",["subexpr","@mut",[["get","creatingTrace.user_name",["loc",[null,[1,2998],[1,3021]]]]],[],[]]],6,null,["loc",[null,[1,2890],[1,3137]]]],["inline","input",[],["id","user_name_t","type","text","value",["subexpr","@mut",[["get","creatingTrace.user_name",["loc",[null,[1,3180],[1,3203]]]]],[],[]],"class","form-control"],["loc",[null,[1,3137],[1,3226]]]],["block","if",[["get","creatingTrace.errors.user_name",["loc",[null,[1,3232],[1,3262]]]]],[],7,null,["loc",[null,[1,3226],[1,3341]]]],["block","each",[["get","creatingTrace.errors.user_name",["loc",[null,[1,3349],[1,3379]]]]],[],8,null,["loc",[null,[1,3341],[1,3460]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingTrace.errors.oils.length",["loc",[null,[1,3527],[1,3559]]]],"has-error"],[],["loc",[null,[1,3522],[1,3573]]]]]]],["block","compare-item",[],["isChangeTagable",true,"changeTag","油品","changeTags",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,3739],[1,3749]]]]],[],[]],"content",["subexpr","@mut",[["get","creatingTrace.oils",["loc",[null,[1,3758],[1,3776]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.oils",["loc",[null,[1,3787],[1,3796]]]]],[],[]]],9,null,["loc",[null,[1,3676],[1,3935]]]],["block","checkbox-list",[],["content",["subexpr","@mut",[["get","arrangedOils",["loc",[null,[1,3960],[1,3972]]]]],[],[]],"selection",["subexpr","@mut",[["get","creatingTrace.oils",["loc",[null,[1,3983],[1,4001]]]]],[],[]]],10,null,["loc",[null,[1,3935],[1,4345]]]],["block","if",[["get","creatingTrace.errors.oils",["loc",[null,[1,4351],[1,4376]]]]],[],11,null,["loc",[null,[1,4345],[1,4455]]]],["block","each",[["get","creatingTrace.errors.oils",["loc",[null,[1,4463],[1,4488]]]]],[],12,null,["loc",[null,[1,4455],[1,4569]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingTrace.errors.goal.length",["loc",[null,[1,4636],[1,4668]]]],"has-error"],[],["loc",[null,[1,4631],[1,4682]]]]]]],["block","compare-item",[],["isChangeTagable",true,"changeTag","实验目的","changeTags",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,4853],[1,4863]]]]],[],[]],"content",["subexpr","@mut",[["get","creatingTrace.goal",["loc",[null,[1,4872],[1,4890]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.goal",["loc",[null,[1,4901],[1,4910]]]]],[],[]]],13,null,["loc",[null,[1,4788],[1,5021]]]],["inline","textarea",[],["id","goal_t","type","text","rows","4","value",["subexpr","@mut",[["get","creatingTrace.goal",["loc",[null,[1,5071],[1,5089]]]]],[],[]],"class","form-control"],["loc",[null,[1,5021],[1,5112]]]],["block","if",[["get","creatingTrace.errors.goal",["loc",[null,[1,5118],[1,5143]]]]],[],14,null,["loc",[null,[1,5112],[1,5222]]]],["block","each",[["get","creatingTrace.errors.goal",["loc",[null,[1,5230],[1,5255]]]]],[],15,null,["loc",[null,[1,5222],[1,5336]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingTrace.errors.start_date.length",["loc",[null,[1,5403],[1,5441]]]],"has-error"],[],["loc",[null,[1,5398],[1,5455]]]]]]],["block","compare-item",[],["isChangeTagable",true,"changeTag","起始时间","changeTags",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,5632],[1,5642]]]]],[],[]],"tagName","span","content",["subexpr","@mut",[["get","creatingTrace.start_date",["loc",[null,[1,5666],[1,5690]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.start_date",["loc",[null,[1,5701],[1,5716]]]]],[],[]]],16,null,["loc",[null,[1,5567],[1,5871]]]],["block","compare-item",[],["isChangeTagable",true,"changeTag","终止时间","changeTags",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,5936],[1,5946]]]]],[],[]],"tagName","span","content",["subexpr","@mut",[["get","creatingTrace.end_date",["loc",[null,[1,5970],[1,5992]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.end_date",["loc",[null,[1,6003],[1,6016]]]]],[],[]]],17,null,["loc",[null,[1,5871],[1,6156]]]],["inline","date-picker-value",[],["id","instance_dates_t","startDate",["subexpr","@mut",[["get","creatingTrace.start_date",["loc",[null,[1,6208],[1,6232]]]]],[],[]],"endDate",["subexpr","@mut",[["get","creatingTrace.end_date",["loc",[null,[1,6241],[1,6263]]]]],[],[]]],["loc",[null,[1,6156],[1,6265]]]],["inline","date-picker",[],["startDate",["subexpr","@mut",[["get","creatingTrace.start_date",["loc",[null,[1,6289],[1,6313]]]]],[],[]],"endDate",["subexpr","@mut",[["get","creatingTrace.end_date",["loc",[null,[1,6322],[1,6344]]]]],[],[]]],["loc",[null,[1,6265],[1,6346]]]],["block","if",[["get","creatingTrace.errors.start_date",["loc",[null,[1,6352],[1,6383]]]]],[],18,null,["loc",[null,[1,6346],[1,6462]]]],["block","each",[["get","creatingTrace.errors.start_date",["loc",[null,[1,6470],[1,6501]]]]],[],19,null,["loc",[null,[1,6462],[1,6582]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11,child12,child13,child14,child15,child16,child17,child18,child19]};})();var child6=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7073},"end":{"line":1,"column":7109}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.project.name",["loc",[null,[1,7088],[1,7109]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7109},"end":{"line":1,"column":7235}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-muted");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["content","item.project.name",["loc",[null,[1,7145],[1,7166]]]],["content","item.lastTrace.project.name",["loc",[null,[1,7198],[1,7229]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":6989},"end":{"line":1,"column":7242}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEqual",["loc",[null,[1,7079],[1,7086]]]]],[],0,1,["loc",[null,[1,7073],[1,7242]]]]],locals:["isEqual"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":6966},"end":{"line":1,"column":7259}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","compare-item",[],["content",["subexpr","@mut",[["get","item.project",["loc",[null,[1,7013],[1,7025]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.project",["loc",[null,[1,7036],[1,7058]]]]],[],[]]],0,null,["loc",[null,[1,6989],[1,7259]]]]],locals:[],templates:[child0]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7259},"end":{"line":1,"column":7288}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.project.name",["loc",[null,[1,7267],[1,7288]]]]],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7586},"end":{"line":1,"column":7625}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.department.name",["loc",[null,[1,7601],[1,7625]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7625},"end":{"line":1,"column":7757}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-muted");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["content","item.department.name",["loc",[null,[1,7661],[1,7685]]]],["content","item.lastTrace.department.name",["loc",[null,[1,7717],[1,7751]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7496},"end":{"line":1,"column":7764}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEqual",["loc",[null,[1,7592],[1,7599]]]]],[],0,1,["loc",[null,[1,7586],[1,7764]]]]],locals:["isEqual"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7473},"end":{"line":1,"column":7781}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","compare-item",[],["content",["subexpr","@mut",[["get","item.department",["loc",[null,[1,7520],[1,7535]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.department",["loc",[null,[1,7546],[1,7571]]]]],[],[]]],0,null,["loc",[null,[1,7496],[1,7781]]]]],locals:[],templates:[child0]};})();var child3=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7781},"end":{"line":1,"column":7813}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.department.name",["loc",[null,[1,7789],[1,7813]]]]],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8108},"end":{"line":1,"column":8141}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.user_name",["loc",[null,[1,8123],[1,8141]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8141},"end":{"line":1,"column":8261}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-muted");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["content","item.user_name",["loc",[null,[1,8177],[1,8195]]]],["content","item.lastTrace.user_name",["loc",[null,[1,8227],[1,8255]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8020},"end":{"line":1,"column":8268}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEqual",["loc",[null,[1,8114],[1,8121]]]]],[],0,1,["loc",[null,[1,8108],[1,8268]]]]],locals:["isEqual"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":7997},"end":{"line":1,"column":8285}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","compare-item",[],["content",["subexpr","@mut",[["get","item.user_name",["loc",[null,[1,8044],[1,8058]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.user_name",["loc",[null,[1,8069],[1,8093]]]]],[],[]]],0,null,["loc",[null,[1,8020],[1,8285]]]]],locals:[],templates:[child0]};})();var child5=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8285},"end":{"line":1,"column":8311}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.user_name",["loc",[null,[1,8293],[1,8311]]]]],locals:[],templates:[]};})();var child6=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8595},"end":{"line":1,"column":8651}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","checkbox-list-value",[],["content",["subexpr","@mut",[["get","item.oils",["loc",[null,[1,8640],[1,8649]]]]],[],[]]],["loc",[null,[1,8610],[1,8651]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8651},"end":{"line":1,"column":8817}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-muted");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["inline","checkbox-list-value",[],["content",["subexpr","@mut",[["get","item.oils",["loc",[null,[1,8717],[1,8726]]]]],[],[]]],["loc",[null,[1,8687],[1,8728]]]],["inline","checkbox-list-value",[],["content",["subexpr","@mut",[["get","item.lastTrace.oils",["loc",[null,[1,8790],[1,8809]]]]],[],[]]],["loc",[null,[1,8760],[1,8811]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8517},"end":{"line":1,"column":8824}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEqual",["loc",[null,[1,8601],[1,8608]]]]],[],0,1,["loc",[null,[1,8595],[1,8824]]]]],locals:["isEqual"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8494},"end":{"line":1,"column":8841}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","compare-item",[],["content",["subexpr","@mut",[["get","item.oils",["loc",[null,[1,8541],[1,8550]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.oils",["loc",[null,[1,8561],[1,8580]]]]],[],[]]],0,null,["loc",[null,[1,8517],[1,8841]]]]],locals:[],templates:[child0]};})();var child7=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":8841},"end":{"line":1,"column":8890}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","checkbox-list-value",[],["content",["subexpr","@mut",[["get","item.oils",["loc",[null,[1,8879],[1,8888]]]]],[],[]]],["loc",[null,[1,8849],[1,8890]]]]],locals:[],templates:[]};})();var child8=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9176},"end":{"line":1,"column":9204}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.goal",["loc",[null,[1,9191],[1,9204]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9204},"end":{"line":1,"column":9314}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","del text-muted");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["content","item.goal",["loc",[null,[1,9240],[1,9253]]]],["content","item.lastTrace.goal",["loc",[null,[1,9285],[1,9308]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9098},"end":{"line":1,"column":9321}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEqual",["loc",[null,[1,9182],[1,9189]]]]],[],0,1,["loc",[null,[1,9176],[1,9321]]]]],locals:["isEqual"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9075},"end":{"line":1,"column":9338}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","compare-item",[],["content",["subexpr","@mut",[["get","item.goal",["loc",[null,[1,9122],[1,9131]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.goal",["loc",[null,[1,9142],[1,9161]]]]],[],[]]],0,null,["loc",[null,[1,9098],[1,9338]]]]],locals:[],templates:[child0]};})();var child9=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9338},"end":{"line":1,"column":9359}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","item.goal",["loc",[null,[1,9346],[1,9359]]]]],locals:[],templates:[]};})();var child10=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9672},"end":{"line":1,"column":9782}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","del text-muted margin-right");var el2=dom.createTextNode("起：");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),1,1);return morphs;},statements:[["inline","timefmt",[["get","item.start_date",["loc",[null,[1,9745],[1,9760]]]],"yyyy-MM-dd"],[],["loc",[null,[1,9735],[1,9775]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9567},"end":{"line":1,"column":9793}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,9682],[1,9689]]]]],[],0,null,["loc",[null,[1,9672],[1,9793]]]]],locals:["isEqual"],templates:[child0]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9911},"end":{"line":1,"column":10006}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","del text-muted");var el2=dom.createTextNode("止：");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),1,1);return morphs;},statements:[["inline","timefmt",[["get","item.end_date",["loc",[null,[1,9971],[1,9984]]]],"yyyy-MM-dd"],[],["loc",[null,[1,9961],[1,9999]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9810},"end":{"line":1,"column":10017}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isEqual",["loc",[null,[1,9921],[1,9928]]]]],[],0,null,["loc",[null,[1,9911],[1,10017]]]]],locals:["isEqual"],templates:[child0]};})();var child2=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":10170},"end":{"line":1,"column":10235}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","timefmt",[["get","item.lastTrace.start_date",["loc",[null,[1,10195],[1,10220]]]],"yyyy-MM-dd"],[],["loc",[null,[1,10185],[1,10235]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":10235},"end":{"line":1,"column":10327}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["inline","timefmt",[["get","item.lastTrace.start_date",["loc",[null,[1,10280],[1,10305]]]],"yyyy-MM-dd"],[],["loc",[null,[1,10270],[1,10320]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":10065},"end":{"line":1,"column":10334}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEqual",["loc",[null,[1,10176],[1,10183]]]]],[],0,1,["loc",[null,[1,10170],[1,10334]]]]],locals:["isEqual"],templates:[child0,child1]};})();var child3=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":10503},"end":{"line":1,"column":10566}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","timefmt",[["get","item.lastTrace.end_date",["loc",[null,[1,10528],[1,10551]]]],"yyyy-MM-dd"],[],["loc",[null,[1,10518],[1,10566]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":10566},"end":{"line":1,"column":10656}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["inline","timefmt",[["get","item.lastTrace.end_date",["loc",[null,[1,10611],[1,10634]]]],"yyyy-MM-dd"],[],["loc",[null,[1,10601],[1,10649]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":10402},"end":{"line":1,"column":10663}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEqual",["loc",[null,[1,10509],[1,10516]]]]],[],0,1,["loc",[null,[1,10503],[1,10663]]]]],locals:["isEqual"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":9544},"end":{"line":1,"column":10686}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","date-picker-value");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","glyphicon glyphicon-arrow-right");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element47=dom.childAt(fragment,[2]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[2] = dom.createMorphAt(element47,0,0);morphs[3] = dom.createMorphAt(element47,2,2);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","compare-item",[],["tagName","span","content",["subexpr","@mut",[["get","item.start_date",["loc",[null,[1,9606],[1,9621]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.start_date",["loc",[null,[1,9632],[1,9657]]]]],[],[]]],0,null,["loc",[null,[1,9567],[1,9810]]]],["block","compare-item",[],["tagName","span","content",["subexpr","@mut",[["get","item.end_date",["loc",[null,[1,9849],[1,9862]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.end_date",["loc",[null,[1,9873],[1,9896]]]]],[],[]]],1,null,["loc",[null,[1,9810],[1,10034]]]],["block","compare-item",[],["tagName","span","content",["subexpr","@mut",[["get","item.start_date",["loc",[null,[1,10104],[1,10119]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.start_date",["loc",[null,[1,10130],[1,10155]]]]],[],[]]],2,null,["loc",[null,[1,10065],[1,10351]]]],["block","compare-item",[],["tagName","span","content",["subexpr","@mut",[["get","item.end_date",["loc",[null,[1,10441],[1,10454]]]]],[],[]],"compareto",["subexpr","@mut",[["get","item.lastTrace.end_date",["loc",[null,[1,10465],[1,10488]]]]],[],[]]],3,null,["loc",[null,[1,10402],[1,10680]]]]],locals:[],templates:[child0,child1,child2,child3]};})();var child11=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":10686},"end":{"line":1,"column":10763}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","date-picker-value",[],["startDate",["subexpr","@mut",[["get","item.start_date",["loc",[null,[1,10724],[1,10739]]]]],[],[]],"endDate",["subexpr","@mut",[["get","item.end_date",["loc",[null,[1,10748],[1,10761]]]]],[],[]]],["loc",[null,[1,10694],[1,10763]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":6593},"end":{"line":1,"column":11817}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group has-feedback");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("系统编号");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("所属项目");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("使用部门");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("使用人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("油品");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("实验目的");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("起止时间");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"for","bill_count");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("加油单");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-10 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createTextNode("该申请单目前有");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("个加油单");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("创建人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-8 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("创建时间");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-8 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("修改人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-8 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("li");dom.setAttribute(el1,"class","list-group-item form-group");var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label col-md-2 col-sm-12");var el3=dom.createTextNode("修改时间");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","col-md-8 col-sm-12");var el3=dom.createElement("p");dom.setAttribute(el3,"class","form-control-static");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(12);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0,1,0]),0,0);morphs[1] = dom.createMorphAt(dom.childAt(fragment,[1,1,0]),0,0);morphs[2] = dom.createMorphAt(dom.childAt(fragment,[2,1,0]),0,0);morphs[3] = dom.createMorphAt(dom.childAt(fragment,[3,1,0]),0,0);morphs[4] = dom.createMorphAt(dom.childAt(fragment,[4,1,0]),0,0);morphs[5] = dom.createMorphAt(dom.childAt(fragment,[5,1,0]),0,0);morphs[6] = dom.createMorphAt(dom.childAt(fragment,[6,1,0]),0,0);morphs[7] = dom.createMorphAt(dom.childAt(fragment,[7,1,0]),1,1);morphs[8] = dom.createMorphAt(dom.childAt(fragment,[8,1,0]),0,0);morphs[9] = dom.createMorphAt(dom.childAt(fragment,[9,1,0]),0,0);morphs[10] = dom.createMorphAt(dom.childAt(fragment,[10,1,0]),0,0);morphs[11] = dom.createMorphAt(dom.childAt(fragment,[11,1,0]),0,0);return morphs;},statements:[["content","item.id",["loc",[null,[1,6777],[1,6788]]]],["block","if",[["get","item.is_pending",["loc",[null,[1,6972],[1,6987]]]]],[],0,1,["loc",[null,[1,6966],[1,7295]]]],["block","if",[["get","item.is_pending",["loc",[null,[1,7479],[1,7494]]]]],[],2,3,["loc",[null,[1,7473],[1,7820]]]],["block","if",[["get","item.is_pending",["loc",[null,[1,8003],[1,8018]]]]],[],4,5,["loc",[null,[1,7997],[1,8318]]]],["block","if",[["get","item.is_pending",["loc",[null,[1,8500],[1,8515]]]]],[],6,7,["loc",[null,[1,8494],[1,8897]]]],["block","if",[["get","item.is_pending",["loc",[null,[1,9081],[1,9096]]]]],[],8,9,["loc",[null,[1,9075],[1,9366]]]],["block","if",[["get","item.is_pending",["loc",[null,[1,9550],[1,9565]]]]],[],10,11,["loc",[null,[1,9544],[1,10770]]]],["content","item.bill_count",["loc",[null,[1,10971],[1,10990]]]],["content","item.creater.name",["loc",[null,[1,11170],[1,11191]]]],["inline","timefmt",[["get","item.created_date",["loc",[null,[1,11378],[1,11395]]]]],[],["loc",[null,[1,11368],[1,11397]]]],["content","item.modifier.name",["loc",[null,[1,11573],[1,11595]]]],["inline","timefmt",[["get","item.modified_date",["loc",[null,[1,11782],[1,11800]]]]],[],["loc",[null,[1,11772],[1,11802]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11]};})();var child7=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":11829},"end":{"line":1,"column":11868}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","instance-mail",[["get","item",["loc",[null,[1,11862],[1,11866]]]]],[],["loc",[null,[1,11846],[1,11868]]]]],locals:[],templates:[]};})();var child8=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":11936},"end":{"line":1,"column":11971}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("Loading...");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":11979},"end":{"line":1,"column":12054}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","trace-list-item",[],["content",["subexpr","@mut",[["get","trace",["loc",[null,[1,12047],[1,12052]]]]],[],[]]],["loc",[null,[1,12021],[1,12054]]]]],locals:["trace"],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":11971},"end":{"line":1,"column":12063}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","item.sortedTracesDesc",["loc",[null,[1,11987],[1,12008]]]]],[],0,null,["loc",[null,[1,11979],[1,12063]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":11875},"end":{"line":1,"column":12075}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("ul");dom.setAttribute(el1,"class","trace-list list-group");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["block","if",[["get","isSearchingTraces",["loc",[null,[1,11942],[1,11959]]]]],[],0,1,["loc",[null,[1,11936],[1,12070]]]]],locals:[],templates:[child0,child1]};})();var child9=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12120},"end":{"line":1,"column":12272}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning text-center");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-cloud left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("该申请单已结束");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child10=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12420},"end":{"line":1,"column":12474}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("核准后该车辆将允许加油，您可以通过中止操作来撤销本次审核，确定要继续吗？");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12474},"end":{"line":1,"column":12505}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("将驳回给申请人，该操作不可撤销，确定要继续吗？");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12518},"end":{"line":1,"column":12619}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","checkingModel",["loc",[null,[1,12584],[1,12597]]]]],[],[]],"action","clearError"],["loc",[null,[1,12564],[1,12619]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12320},"end":{"line":1,"column":12896}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block text-warning text-center");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element45=dom.childAt(fragment,[0]);var element46=dom.childAt(element45,[3]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(element45,[0]),0,0);morphs[1] = dom.createMorphAt(element45,1,1);morphs[2] = dom.createMorphAt(element45,2,2);morphs[3] = dom.createElementMorph(element46);return morphs;},statements:[["block","if",[["get","isApproved",["loc",[null,[1,12426],[1,12436]]]]],[],0,1,["loc",[null,[1,12420],[1,12512]]]],["block","if",[["get","checkingModel.errors.server_side_error",["loc",[null,[1,12524],[1,12562]]]]],[],2,null,["loc",[null,[1,12518],[1,12626]]]],["inline","spin-button",[],["action","saveCheckingModel","isLoading",["subexpr","@mut",[["get","checkingModel.isSaving",["loc",[null,[1,12677],[1,12699]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","checkingModel.isUnSavable",["loc",[null,[1,12711],[1,12736]]]]],[],[]],"title","确定","class","btn btn-sm btn-danger btn-block"],["loc",[null,[1,12626],[1,12789]]]],["element","action",["cancelChecking"],[],["loc",[null,[1,12797],[1,12824]]]]],locals:[],templates:[child0,child1,child2]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13177},"end":{"line":1,"column":13281}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","text-success");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-ok");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),1,1);return morphs;},statements:[["content","item.name",["loc",[null,[1,13261],[1,13274]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13281},"end":{"line":1,"column":13383}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","text-danger");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-remove");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),1,1);return morphs;},statements:[["content","item.name",["loc",[null,[1,13363],[1,13376]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13160},"end":{"line":1,"column":13390}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","value",["loc",[null,[1,13183],[1,13188]]]]],[],0,1,["loc",[null,[1,13177],[1,13390]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13390},"end":{"line":1,"column":13443}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","text-muted");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","item.name",["loc",[null,[1,13423],[1,13436]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13049},"end":{"line":1,"column":13450}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isChecked",["loc",[null,[1,13166],[1,13175]]]]],[],0,1,["loc",[null,[1,13160],[1,13450]]]]],locals:["isChecked"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12904},"end":{"line":1,"column":13470}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:2,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","radio-list-item",[],["content",["subexpr","@mut",[["get","item",["loc",[null,[1,13076],[1,13080]]]]],[],[]],"contentValueKey","value","compareto",["subexpr","@mut",[["get","value",["loc",[null,[1,13115],[1,13120]]]]],[],[]],"action","setIsApproved"],0,null,["loc",[null,[1,13049],[1,13470]]]]],locals:["item","value"],templates:[child0]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13636},"end":{"line":1,"column":13664}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("您可以捎句话给申请人");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13664},"end":{"line":1,"column":13679}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("请输入驳回理由");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12896},"end":{"line":1,"column":13853}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group-item form-group input-border-box");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element44=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(element44,0,0);morphs[2] = dom.createMorphAt(dom.childAt(element44,[1]),0,0);morphs[3] = dom.createMorphAt(fragment,2,2,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","radio-list",[],["content",["subexpr","@mut",[["get","checkRadioList",["loc",[null,[1,12926],[1,12940]]]]],[],[]],"value",["subexpr","@mut",[["get","isApproved",["loc",[null,[1,12947],[1,12957]]]]],[],[]],"contentValueKey","value","isEditing",true,"class","btn-block check-radio-list"],0,null,["loc",[null,[1,12904],[1,13485]]]],["inline","textarea",[],["type","text","value",["subexpr","@mut",[["get","checkText",["loc",[null,[1,13571],[1,13580]]]]],[],[]],"rows","4","class","form-control"],["loc",[null,[1,13542],[1,13612]]]],["block","if",[["get","isApproved",["loc",[null,[1,13642],[1,13652]]]]],[],1,2,["loc",[null,[1,13636],[1,13686]]]],["inline","spin-button",[],["action","checkInstance","isLoading",false,"isDisabled",["subexpr","@mut",[["get","isUnCheckable",["loc",[null,[1,13762],[1,13775]]]]],[],[]],"title","提交","titleIcon","glyphicon-send","class","btn btn-sm btn-block btn-info"],["loc",[null,[1,13698],[1,13853]]]]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12303},"end":{"line":1,"column":13860}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isChecking",["loc",[null,[1,12326],[1,12336]]]]],[],0,1,["loc",[null,[1,12320],[1,13860]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":14196},"end":{"line":1,"column":14303}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","recapturingTrace",["loc",[null,[1,14265],[1,14281]]]]],[],[]],"action","clearError"],["loc",[null,[1,14245],[1,14303]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13868},"end":{"line":1,"column":14597}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group-item form-group input-border-box");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block");var el3=dom.createTextNode("您可以捎句话给审核人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block text-warning text-center");var el3=dom.createTextNode("取回后申请单需要重新提交审核，该操作无法撤销，确定要继续吗？");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element42=dom.childAt(fragment,[1]);var element43=dom.childAt(element42,[3]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(element42,1,1);morphs[2] = dom.createMorphAt(element42,2,2);morphs[3] = dom.createElementMorph(element43);return morphs;},statements:[["inline","textarea",[],["type","text","value",["subexpr","@mut",[["get","recapturingTrace.end_info",["loc",[null,[1,13975],[1,14000]]]]],[],[]],"rows","4","class","form-control"],["loc",[null,[1,13946],[1,14032]]]],["block","if",[["get","recapturingTrace.errors.server_side_error",["loc",[null,[1,14202],[1,14243]]]]],[],0,null,["loc",[null,[1,14196],[1,14310]]]],["inline","spin-button",[],["action","saveRecapturingTrace","isLoading",["subexpr","@mut",[["get","recapturingTrace.isSaving",["loc",[null,[1,14364],[1,14389]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","recapturingTrace.isUnSavable",["loc",[null,[1,14401],[1,14429]]]]],[],[]],"title","确定","class","btn btn-sm btn-danger btn-block"],["loc",[null,[1,14310],[1,14482]]]],["element","action",["cancelRecapturingTrace"],[],["loc",[null,[1,14490],[1,14525]]]]],locals:[],templates:[child0]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":14597},"end":{"line":1,"column":14761}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-info btn-sm btn-block");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-adjust left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("取回");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element41=dom.childAt(fragment,[0]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element41);return morphs;},statements:[["element","action",["recaptureTrace"],[],["loc",[null,[1,14613],[1,14640]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":13860},"end":{"line":1,"column":14768}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isRecapturing",["loc",[null,[1,13874],[1,13887]]]]],[],0,1,["loc",[null,[1,13868],[1,14768]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12280},"end":{"line":1,"column":14775}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isChecker",["loc",[null,[1,12309],[1,12318]]]]],[],0,1,["loc",[null,[1,12303],[1,14775]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":15123},"end":{"line":1,"column":15224}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","abortingModel",["loc",[null,[1,15189],[1,15202]]]]],[],[]],"action","clearError"],["loc",[null,[1,15169],[1,15224]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":14800},"end":{"line":1,"column":15501}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group-item form-group input-border-box");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block");var el3=dom.createTextNode("您可以捎句话给申请人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block text-warning text-center");var el3=dom.createTextNode("中止后该申请单将不能加油，且该操作不可撤销，确定要继续吗？");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element39=dom.childAt(fragment,[1]);var element40=dom.childAt(element39,[3]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(element39,1,1);morphs[2] = dom.createMorphAt(element39,2,2);morphs[3] = dom.createElementMorph(element40);return morphs;},statements:[["inline","textarea",[],["type","text","value",["subexpr","@mut",[["get","abortingModel.start_info",["loc",[null,[1,14904],[1,14928]]]]],[],[]],"rows","4","class","form-control"],["loc",[null,[1,14875],[1,14960]]]],["block","if",[["get","abortingModel.errors.server_side_error",["loc",[null,[1,15129],[1,15167]]]]],[],0,null,["loc",[null,[1,15123],[1,15231]]]],["inline","spin-button",[],["action","saveAbortingModel","isLoading",["subexpr","@mut",[["get","abortingModel.isSaving",["loc",[null,[1,15282],[1,15304]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","abortingModel.isUnSavable",["loc",[null,[1,15316],[1,15341]]]]],[],[]],"title","确定","class","btn btn-sm btn-danger btn-block"],["loc",[null,[1,15231],[1,15394]]]],["element","action",["cancelAborting"],[],["loc",[null,[1,15402],[1,15429]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":15664},"end":{"line":1,"column":15773}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","archivingInstance",["loc",[null,[1,15734],[1,15751]]]]],[],[]],"action","clearError"],["loc",[null,[1,15714],[1,15773]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":15561},"end":{"line":1,"column":15955}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-warning text-center");var el2=dom.createTextNode("结束后该申请单将不可见，且该操作无法撤销，确定要继续吗？");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","archivingInstance.errors.server_side_error",["loc",[null,[1,15670],[1,15712]]]]],[],0,null,["loc",[null,[1,15664],[1,15780]]]],["inline","spin-button",[],["action","saveArchivingInstance","isLoading",["subexpr","@mut",[["get","archivingInstance.isSaving",["loc",[null,[1,15835],[1,15861]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","archivingInstance.isUnSavable",["loc",[null,[1,15873],[1,15902]]]]],[],[]],"title","确定","class","btn btn-sm btn-danger btn-block"],["loc",[null,[1,15780],[1,15955]]]]],locals:[],templates:[child0]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":15955},"end":{"line":1,"column":16057}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-warning text-center");var el2=dom.createTextNode("该申请单不能结束，只有未发布/已暂停的申请单及可加油但已过期的申请单允许结束？");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":15509},"end":{"line":1,"column":16180}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element37=dom.childAt(fragment,[0]);var element38=dom.childAt(element37,[1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(element37,0,0);morphs[1] = dom.createElementMorph(element38);return morphs;},statements:[["block","if",[["get","isArchivable",["loc",[null,[1,15567],[1,15579]]]]],[],0,1,["loc",[null,[1,15561],[1,16064]]]],["element","action",["cancelArchivingInstance"],[],["loc",[null,[1,16072],[1,16108]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":16188},"end":{"line":1,"column":16367}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-info btn-sm btn-block");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-adjust left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("中止");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element35=dom.childAt(fragment,[0]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element35);return morphs;},statements:[["element","action",["abortInstance"],[],["loc",[null,[1,16220],[1,16246]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":16180},"end":{"line":1,"column":16540}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-warning btn-sm btn-block");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-cloud-upload left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("结束");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element36=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createElementMorph(element36);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","if",[["get","item.isAbortable",["loc",[null,[1,16194],[1,16210]]]]],[],0,null,["loc",[null,[1,16188],[1,16374]]]],["element","action",["archiveInstance"],[],["loc",[null,[1,16382],[1,16410]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":15501},"end":{"line":1,"column":16547}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isArchiving",["loc",[null,[1,15515],[1,15526]]]]],[],0,1,["loc",[null,[1,15509],[1,16547]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":14783},"end":{"line":1,"column":16554}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isAborting",["loc",[null,[1,14806],[1,14816]]]]],[],0,1,["loc",[null,[1,14800],[1,16554]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":16868},"end":{"line":1,"column":16945}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-warning-sign");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":16806},"end":{"line":1,"column":17084}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("label");dom.setAttribute(el2,"class","control-label");var el3=dom.createTextNode("已修改字段：");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element32=dom.childAt(fragment,[0]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(element32,0,0);morphs[1] = dom.createMorphAt(dom.childAt(element32,[2]),0,0);return morphs;},statements:[["block","if",[["get","isRecheckNeeded",["loc",[null,[1,16874],[1,16889]]]]],[],0,null,["loc",[null,[1,16868],[1,16952]]]],["inline","checkbox-list-value",[],["tagName","span","content",["subexpr","@mut",[["get","changeTags",["loc",[null,[1,17045],[1,17055]]]]],[],[]],"isObject",false],["loc",[null,[1,17000],[1,17072]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17141},"end":{"line":1,"column":17204}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("该申请单可加油，如果修改了敏感信息将需要重新提交审核，且提交后不影响可加油版本");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17204},"end":{"line":1,"column":17226}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("该申请单未发布，需要提交审核");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17084},"end":{"line":1,"column":17239}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-warning text-center");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["block","if",[["get","item.is_released",["loc",[null,[1,17147],[1,17163]]]]],[],0,1,["loc",[null,[1,17141],[1,17233]]]]],locals:[],templates:[child0,child1]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17246},"end":{"line":1,"column":17347}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","creatingTrace",["loc",[null,[1,17312],[1,17325]]]]],[],[]],"action","clearError"],["loc",[null,[1,17292],[1,17347]]]]],locals:[],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17354},"end":{"line":1,"column":17535}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","spin-button",[],["action","saveNewTrace","isLoading",["subexpr","@mut",[["get","creatingTrace.isSaving",["loc",[null,[1,17423],[1,17445]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","creatingTrace.isUnSavable",["loc",[null,[1,17457],[1,17482]]]]],[],[]],"title","提交","class","btn btn-sm btn-block btn-danger"],["loc",[null,[1,17377],[1,17535]]]]],locals:[],templates:[]};})();var child4=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17535},"end":{"line":1,"column":17698}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","spin-button",[],["action","saveNewTrace","isLoading",["subexpr","@mut",[["get","creatingTrace.isSaving",["loc",[null,[1,17589],[1,17611]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","isCreatingTraceUnSavable",["loc",[null,[1,17623],[1,17647]]]]],[],[]],"title","保存","class","btn btn-sm btn-block btn-info"],["loc",[null,[1,17543],[1,17698]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":16562},"end":{"line":1,"column":17817}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group-item form-group input-border-box");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block");var el3=dom.createTextNode("您可以捎句话给审核人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element33=dom.childAt(fragment,[1]);var element34=dom.childAt(element33,[3]);var morphs=new Array(5);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(element33,0,0);morphs[2] = dom.createMorphAt(element33,1,1);morphs[3] = dom.createMorphAt(element33,2,2);morphs[4] = dom.createElementMorph(element34);return morphs;},statements:[["inline","textarea",[],["type","text","value",["subexpr","@mut",[["get","creatingTrace.start_info",["loc",[null,[1,16671],[1,16695]]]]],[],[]],"rows","4","class","form-control"],["loc",[null,[1,16642],[1,16727]]]],["block","if",[["get","changeTags.length",["loc",[null,[1,16812],[1,16829]]]]],[],0,1,["loc",[null,[1,16806],[1,17246]]]],["block","if",[["get","creatingTrace.errors.server_side_error",["loc",[null,[1,17252],[1,17290]]]]],[],2,null,["loc",[null,[1,17246],[1,17354]]]],["block","if",[["get","isRecheckNeeded",["loc",[null,[1,17360],[1,17375]]]]],[],3,4,["loc",[null,[1,17354],[1,17705]]]],["element","action",["cancelCreatingTrace"],[],["loc",[null,[1,17713],[1,17745]]]]],locals:[],templates:[child0,child1,child2,child3,child4]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17980},"end":{"line":1,"column":18089}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","archivingInstance",["loc",[null,[1,18050],[1,18067]]]]],[],[]],"action","clearError"],["loc",[null,[1,18030],[1,18089]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17877},"end":{"line":1,"column":18271}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-warning text-center");var el2=dom.createTextNode("结束后该申请单将不可见，且该操作无法撤销，确定要继续吗？");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","archivingInstance.errors.server_side_error",["loc",[null,[1,17986],[1,18028]]]]],[],0,null,["loc",[null,[1,17980],[1,18096]]]],["inline","spin-button",[],["action","saveArchivingInstance","isLoading",["subexpr","@mut",[["get","archivingInstance.isSaving",["loc",[null,[1,18151],[1,18177]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","archivingInstance.isUnSavable",["loc",[null,[1,18189],[1,18218]]]]],[],[]],"title","确定","class","btn btn-sm btn-danger btn-block"],["loc",[null,[1,18096],[1,18271]]]]],locals:[],templates:[child0]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":18271},"end":{"line":1,"column":18373}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-warning text-center");var el2=dom.createTextNode("该申请单不能结束，只有未发布/已暂停的申请单及可加油但已过期的申请单允许结束？");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17825},"end":{"line":1,"column":18496}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element30=dom.childAt(fragment,[0]);var element31=dom.childAt(element30,[1]);var morphs=new Array(2);morphs[0] = dom.createMorphAt(element30,0,0);morphs[1] = dom.createElementMorph(element31);return morphs;},statements:[["block","if",[["get","isArchivable",["loc",[null,[1,17883],[1,17895]]]]],[],0,1,["loc",[null,[1,17877],[1,18380]]]],["element","action",["cancelArchivingInstance"],[],["loc",[null,[1,18388],[1,18424]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":18834},"end":{"line":1,"column":18939}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","forbiddingModel",["loc",[null,[1,18902],[1,18917]]]]],[],[]],"action","clearError"],["loc",[null,[1,18882],[1,18939]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":18504},"end":{"line":1,"column":19224}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group-item form-group input-border-box");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block");var el3=dom.createTextNode("您可以捎句话给审核人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block text-warning text-center");var el3=dom.createTextNode("暂停后该申请单将无法加油，您可以随时恢复该申请单，确定要继续吗？");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element28=dom.childAt(fragment,[1]);var element29=dom.childAt(element28,[3]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(element28,1,1);morphs[2] = dom.createMorphAt(element28,2,2);morphs[3] = dom.createElementMorph(element29);return morphs;},statements:[["inline","textarea",[],["type","text","value",["subexpr","@mut",[["get","forbiddingModel.start_info",["loc",[null,[1,18610],[1,18636]]]]],[],[]],"rows","4","class","form-control"],["loc",[null,[1,18581],[1,18668]]]],["block","if",[["get","forbiddingModel.errors.server_side_error",["loc",[null,[1,18840],[1,18880]]]]],[],0,null,["loc",[null,[1,18834],[1,18946]]]],["inline","spin-button",[],["action","saveForbiddingModel","isLoading",["subexpr","@mut",[["get","forbiddingModel.isSaving",["loc",[null,[1,18999],[1,19023]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","forbiddingModel.isUnSavable",["loc",[null,[1,19035],[1,19062]]]]],[],[]],"title","确定","class","btn btn-sm btn-danger btn-block"],["loc",[null,[1,18946],[1,19115]]]],["element","action",["cancelForbidding"],[],["loc",[null,[1,19123],[1,19152]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":19552},"end":{"line":1,"column":19653}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","enablingModel",["loc",[null,[1,19618],[1,19631]]]]],[],[]],"action","clearError"],["loc",[null,[1,19598],[1,19653]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":19232},"end":{"line":1,"column":19930}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group-item form-group input-border-box");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block");var el3=dom.createTextNode("您可以捎句话给审核人");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");var el2=dom.createElement("div");dom.setAttribute(el2,"class","help-block text-warning text-center");var el3=dom.createTextNode("恢复后该申请单如果可加油将允许加油， 确定要继续吗？");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");var el4=dom.createTextNode("取消");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1]);var element27=dom.childAt(element26,[3]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);morphs[1] = dom.createMorphAt(element26,1,1);morphs[2] = dom.createMorphAt(element26,2,2);morphs[3] = dom.createElementMorph(element27);return morphs;},statements:[["inline","textarea",[],["type","text","value",["subexpr","@mut",[["get","enablingModel.start_info",["loc",[null,[1,19336],[1,19360]]]]],[],[]],"rows","4","class","form-control"],["loc",[null,[1,19307],[1,19392]]]],["block","if",[["get","enablingModel.errors.server_side_error",["loc",[null,[1,19558],[1,19596]]]]],[],0,null,["loc",[null,[1,19552],[1,19660]]]],["inline","spin-button",[],["action","saveEnablingModel","isLoading",["subexpr","@mut",[["get","enablingModel.isSaving",["loc",[null,[1,19711],[1,19733]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","enablingModel.isUnSavable",["loc",[null,[1,19745],[1,19770]]]]],[],[]],"title","确定","class","btn btn-sm btn-danger btn-block"],["loc",[null,[1,19660],[1,19823]]]],["element","action",["cancelEnabling"],[],["loc",[null,[1,19831],[1,19858]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":19938},"end":{"line":1,"column":20123}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-info btn-sm btn-block");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-ban-circle left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("暂停");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element23=dom.childAt(fragment,[0]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element23);return morphs;},statements:[["element","action",["forbidInstance"],[],["loc",[null,[1,19971],[1,19998]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":20130},"end":{"line":1,"column":20313}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-info btn-sm btn-block");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-ok-sign left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("恢复");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element22=dom.childAt(fragment,[0]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element22);return morphs;},statements:[["element","action",["enableInstance"],[],["loc",[null,[1,20164],[1,20191]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":19930},"end":{"line":1,"column":20644}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-info btn-sm btn-block");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-edit left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("修改");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","btn btn-warning btn-sm btn-block");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-cloud-upload left-icon");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createTextNode("结束");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element24=dom.childAt(fragment,[2]);var element25=dom.childAt(fragment,[3]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[2] = dom.createElementMorph(element24);morphs[3] = dom.createElementMorph(element25);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","if",[["get","item.isForbidable",["loc",[null,[1,19944],[1,19961]]]]],[],0,null,["loc",[null,[1,19938],[1,20130]]]],["block","unless",[["get","item.is_enable",["loc",[null,[1,20140],[1,20154]]]]],[],1,null,["loc",[null,[1,20130],[1,20324]]]],["element","action",["createNewTrace"],[],["loc",[null,[1,20332],[1,20359]]]],["element","action",["archiveInstance"],[],["loc",[null,[1,20486],[1,20514]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":19224},"end":{"line":1,"column":20651}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isEnabling",["loc",[null,[1,19238],[1,19248]]]]],[],0,1,["loc",[null,[1,19232],[1,20651]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":18496},"end":{"line":1,"column":20658}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isForbidding",["loc",[null,[1,18510],[1,18522]]]]],[],0,1,["loc",[null,[1,18504],[1,20658]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":17817},"end":{"line":1,"column":20665}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isArchiving",["loc",[null,[1,17831],[1,17842]]]]],[],0,1,["loc",[null,[1,17825],[1,20665]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":16554},"end":{"line":1,"column":20672}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isCreatingTrace",["loc",[null,[1,16568],[1,16583]]]]],[],0,1,["loc",[null,[1,16562],[1,20672]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":14775},"end":{"line":1,"column":20679}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isChecker",["loc",[null,[1,14789],[1,14798]]]]],[],0,1,["loc",[null,[1,14783],[1,20679]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":12272},"end":{"line":1,"column":20686}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","item.is_pending",["loc",[null,[1,12286],[1,12301]]]]],[],0,1,["loc",[null,[1,12280],[1,20686]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":235},"end":{"line":1,"column":20862}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("a");dom.setAttribute(el1,"class","is-child-node-title");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-tags pull-left");dom.appendChild(el1,el2);var el2=dom.createTextNode("申请单详情");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("ul");dom.setAttribute(el1,"class","list-group list-full form-horizontal");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group list-full");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-sm btn-block");var el3=dom.createElement("span");dom.setAttribute(el3,"class","glyphicon glyphicon-triangle-top left-icon");dom.appendChild(el2,el3);var el3=dom.createElement("span");var el4=dom.createTextNode("折叠");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element60=dom.childAt(fragment,[0]);var element61=dom.childAt(fragment,[4]);var element62=dom.childAt(element61,[1]);var morphs=new Array(10);morphs[0] = dom.createElementMorph(element60);morphs[1] = dom.createMorphAt(element60,2,2);morphs[2] = dom.createMorphAt(element60,3,3);morphs[3] = dom.createMorphAt(element60,4,4);morphs[4] = dom.createMorphAt(element60,5,5);morphs[5] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);morphs[6] = dom.createMorphAt(fragment,2,2,contextualElement);morphs[7] = dom.createMorphAt(fragment,3,3,contextualElement);morphs[8] = dom.createMorphAt(element61,0,0);morphs[9] = dom.createElementMorph(element62);return morphs;},statements:[["element","action",["fodeInstance"],[],["loc",[null,[1,255],[1,280]]]],["block","if",[["get","item.is_pending",["loc",[null,[1,376],[1,391]]]]],[],0,null,["loc",[null,[1,370],[1,482]]]],["block","if",[["get","item.is_released",["loc",[null,[1,488],[1,504]]]]],[],1,2,["loc",[null,[1,482],[1,694]]]],["block","unless",[["get","item.is_enable",["loc",[null,[1,704],[1,718]]]]],[],3,null,["loc",[null,[1,694],[1,818]]]],["block","if",[["get","item.is_archived",["loc",[null,[1,824],[1,840]]]]],[],4,null,["loc",[null,[1,818],[1,933]]]],["block","if",[["get","isCreatingTrace",["loc",[null,[1,992],[1,1007]]]]],[],5,6,["loc",[null,[1,986],[1,11824]]]],["block","if",[["get","isChecker",["loc",[null,[1,11835],[1,11844]]]]],[],7,null,["loc",[null,[1,11829],[1,11875]]]],["block","unless",[["get","isCreatingTrace",["loc",[null,[1,11885],[1,11900]]]]],[],8,null,["loc",[null,[1,11875],[1,12086]]]],["block","if",[["get","item.is_archived",["loc",[null,[1,12126],[1,12142]]]]],[],9,10,["loc",[null,[1,12120],[1,20693]]]],["element","action",["fodeInstance"],[],["loc",[null,[1,20701],[1,20726]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21008},"end":{"line":1,"column":21091}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-cloud text-danger");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21235},"end":{"line":1,"column":21335}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","pull-right glyphicon glyphicon-cloud-upload text-danger");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21335},"end":{"line":1,"column":21441}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","pull-right glyphicon glyphicon-cloud-upload text-warning");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21335},"end":{"line":1,"column":21441}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","item.isFinishing",["loc",[null,[1,21345],[1,21361]]]]],[],0,null,["loc",[null,[1,21335],[1,21441]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":20870},"end":{"line":1,"column":21454}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");var el2=dom.createElement("div");dom.setAttribute(el2,"class","glyphicon glyphicon-tag pull-left");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","clearfix");var el2=dom.createElement("div");dom.setAttribute(el2,"class","pull-left sub-tip xs");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element20=dom.childAt(fragment,[0]);var element21=dom.childAt(fragment,[1]);var morphs=new Array(5);morphs[0] = dom.createMorphAt(element20,1,1);morphs[1] = dom.createMorphAt(element20,2,2);morphs[2] = dom.createMorphAt(element20,3,3);morphs[3] = dom.createMorphAt(dom.childAt(element21,[0]),0,0);morphs[4] = dom.createMorphAt(element21,1,1);return morphs;},statements:[["content","item.project.name",["loc",[null,[1,20950],[1,20971]]]],["inline","status-icon",[["get","item.lastTrace.status",["loc",[null,[1,20985],[1,21006]]]]],[],["loc",[null,[1,20971],[1,21008]]]],["block","if",[["get","item.is_archived",["loc",[null,[1,21014],[1,21030]]]]],[],0,null,["loc",[null,[1,21008],[1,21098]]]],["inline","date-picker-value",[],["startDate",["subexpr","@mut",[["get","item.start_date",["loc",[null,[1,21190],[1,21205]]]]],[],[]],"endDate",["subexpr","@mut",[["get","item.end_date",["loc",[null,[1,21214],[1,21227]]]]],[],[]]],["loc",[null,[1,21160],[1,21229]]]],["block","if",[["get","item.isFinished",["loc",[null,[1,21241],[1,21256]]]]],[],1,2,["loc",[null,[1,21235],[1,21448]]]]],locals:[],templates:[child0,child1,child2]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21618},"end":{"line":1,"column":21681}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","status-icon",[["get","item.lastTrace.status",["loc",[null,[1,21658],[1,21679]]]]],[],["loc",[null,[1,21644],[1,21681]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21681},"end":{"line":1,"column":21765}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","status-icon glyphicon glyphicon-question-sign text-muted");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21772},"end":{"line":1,"column":21855}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-cloud text-danger");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22001},"end":{"line":1,"column":22111}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","pull-right glyphicon glyphicon-cloud-upload left-icon text-danger");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22111},"end":{"line":1,"column":22227}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","pull-right glyphicon glyphicon-cloud-upload left-icon text-warning");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22111},"end":{"line":1,"column":22227}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","item.isFinishing",["loc",[null,[1,22121],[1,22137]]]]],[],0,null,["loc",[null,[1,22111],[1,22227]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":21454},"end":{"line":1,"column":22240}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","pull-left");var el2=dom.createElement("span");dom.setAttribute(el2,"class","glyphicon glyphicon-tag pull-left");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("span");dom.setAttribute(el2,"class","sub-title");var el3=dom.createTextNode("[");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("]");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","pull-right");var el2=dom.createElement("span");dom.setAttribute(el2,"class","pull-right sub-tip");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element18=dom.childAt(fragment,[0]);var element19=dom.childAt(fragment,[1]);var morphs=new Array(6);morphs[0] = dom.createMorphAt(element18,1,1);morphs[1] = dom.createMorphAt(dom.childAt(element18,[2]),1,1);morphs[2] = dom.createMorphAt(element18,3,3);morphs[3] = dom.createMorphAt(element18,4,4);morphs[4] = dom.createMorphAt(dom.childAt(element19,[0]),0,0);morphs[5] = dom.createMorphAt(element19,1,1);return morphs;},statements:[["content","item.project.name",["loc",[null,[1,21540],[1,21561]]]],["content","item.department.name",["loc",[null,[1,21586],[1,21610]]]],["block","if",[["get","item.traces.length",["loc",[null,[1,21624],[1,21642]]]]],[],0,1,["loc",[null,[1,21618],[1,21772]]]],["block","if",[["get","item.is_archived",["loc",[null,[1,21778],[1,21794]]]]],[],2,null,["loc",[null,[1,21772],[1,21862]]]],["inline","date-picker-value",[],["startDate",["subexpr","@mut",[["get","item.start_date",["loc",[null,[1,21955],[1,21970]]]]],[],[]],"endDate",["subexpr","@mut",[["get","item.end_date",["loc",[null,[1,21979],[1,21992]]]]],[],[]]],["loc",[null,[1,21925],[1,21994]]]],["block","if",[["get","item.isFinished",["loc",[null,[1,22007],[1,22022]]]]],[],3,4,["loc",[null,[1,22001],[1,22234]]]]],locals:[],templates:[child0,child1,child2,child3,child4]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":20862},"end":{"line":1,"column":22247}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","equipment.isXs",["loc",[null,[1,20876],[1,20890]]]]],[],0,1,["loc",[null,[1,20870],[1,22247]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":97},"end":{"line":1,"column":22254}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isChecked",["loc",[null,[1,241],[1,250]]]]],[],0,1,["loc",[null,[1,235],[1,22254]]]]],locals:["isChecked"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":63},"end":{"line":1,"column":22274}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-panel-item",[],["tagName","div","content",["subexpr","@mut",[["get","item",["loc",[null,[1,138],[1,142]]]]],[],[]],"compareto",["subexpr","@mut",[["get","selection",["loc",[null,[1,153],[1,162]]]]],[],[]],"action","unfodeInstance","class","instance-item clearboth"],0,null,["loc",[null,[1,97],[1,22274]]]]],locals:["item"],templates:[child0]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":34},"end":{"line":1,"column":22283}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","arrangedResult",["loc",[null,[1,71],[1,85]]]]],[],0,null,["loc",[null,[1,63],[1,22283]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22291},"end":{"line":1,"column":22423}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","empty-box");var el2=dom.createElement("div");dom.setAttribute(el2,"class","glyphicon glyphicon-road");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","empty-title");var el3=dom.createTextNode("申请单为空");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22283},"end":{"line":1,"column":22434}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isSearching",["loc",[null,[1,22301],[1,22312]]]]],[],0,null,["loc",[null,[1,22291],[1,22434]]]]],locals:[],templates:[child0]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22441},"end":{"line":1,"column":22569}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger text-center");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,22546],[1,22563]]]]],locals:["error"],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22578},"end":{"line":1,"column":22716}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","empty-box");var el2=dom.createElement("div");dom.setAttribute(el2,"class","glyphicon glyphicon-hourglass");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","empty-title");var el3=dom.createTextNode("Loading...");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22724},"end":{"line":1,"column":22963}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("button");dom.setAttribute(el1,"type","button");dom.setAttribute(el1,"title","切换全部显示");dom.setAttribute(el1,"class","btn btn-default btn-xs btn-block");var el2=dom.createElement("span");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element16=dom.childAt(fragment,[0]);var element17=dom.childAt(element16,[0]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element16);morphs[1] = dom.createAttrMorph(element17,'class');return morphs;},statements:[["element","action",["toggleToShowAll"],[],["loc",[null,[1,22757],[1,22785]]]],["attribute","class",["concat",["glyphicon ",["subexpr","if",[["get","isToShowAll",["loc",[null,[1,22884],[1,22895]]]],"glyphicon-chevron-up","glyphicon-chevron-down"],[],["loc",[null,[1,22879],[1,22945]]]]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22970},"end":{"line":1,"column":23172}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","spin-button",[],["action","fetchNext","isIcon",true,"loadedIcon","glyphicon-chevron-down","isLoading",["subexpr","@mut",[["get","isSearching",["loc",[null,[1,23087],[1,23098]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","isSearching",["loc",[null,[1,23110],[1,23121]]]]],[],[]],"title","更多","class","btn btn-info btn-xs btn-block"],["loc",[null,[1,22996],[1,23172]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":22716},"end":{"line":1,"column":23179}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isTopButtonNeeded",["loc",[null,[1,22730],[1,22747]]]]],[],0,null,["loc",[null,[1,22724],[1,22970]]]],["block","if",[["get","isMoreButtonNeeded",["loc",[null,[1,22976],[1,22994]]]]],[],1,null,["loc",[null,[1,22970],[1,23179]]]]],locals:[],templates:[child0,child1]};})();var child5=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":23764},"end":{"line":1,"column":23873}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":23880},"end":{"line":1,"column":23991}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,23968],[1,23985]]]]],locals:["error"],templates:[]};})();var child2=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":24362},"end":{"line":1,"column":24474}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":24481},"end":{"line":1,"column":24595}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,24572],[1,24589]]]]],locals:["error"],templates:[]};})();var child4=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":24925},"end":{"line":1,"column":25036}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child5=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":25043},"end":{"line":1,"column":25156}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,25133],[1,25150]]]]],locals:["error"],templates:[]};})();var child6=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":25588},"end":{"line":1,"column":25668}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-eye-open text-success");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":25668},"end":{"line":1,"column":25739}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-eye-close text-danger");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":25475},"end":{"line":1,"column":25759}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","isChecked",["loc",[null,[1,25594],[1,25603]]]]],[],0,1,["loc",[null,[1,25588],[1,25746]]]],["content","item.name",["loc",[null,[1,25746],[1,25759]]]]],locals:["isChecked"],templates:[child0,child1]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":25384},"end":{"line":1,"column":25782}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:2,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","checkbox-list-item",[],["value",["subexpr","@mut",[["get","item",["loc",[null,[1,25503],[1,25507]]]]],[],[]],"compareto",["subexpr","@mut",[["get","selection",["loc",[null,[1,25518],[1,25527]]]]],[],[]],"isEditing",true,"action","checkOilForInstance"],0,null,["loc",[null,[1,25475],[1,25782]]]]],locals:["item","selection"],templates:[child0]};})();var child7=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":25800},"end":{"line":1,"column":25906}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child8=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":25913},"end":{"line":1,"column":26021}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,25998],[1,26015]]]]],locals:["error"],templates:[]};})();var child9=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":26344},"end":{"line":1,"column":26450}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child10=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":26457},"end":{"line":1,"column":26565}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,26542],[1,26559]]]]],locals:["error"],templates:[]};})();var child11=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":27008},"end":{"line":1,"column":27120}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("span");dom.setAttribute(el1,"class","glyphicon glyphicon-remove form-control-feedback");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child12=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":27127},"end":{"line":1,"column":27241}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","help-block text-danger");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[0]),0,0);return morphs;},statements:[["content","error.message",["loc",[null,[1,27218],[1,27235]]]]],locals:["error"],templates:[]};})();var child13=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":27491},"end":{"line":1,"column":27598}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["inline","alert-error",[],["model",["subexpr","@mut",[["get","creatingInstance",["loc",[null,[1,27560],[1,27576]]]]],[],[]],"action","clearError"],["loc",[null,[1,27540],[1,27598]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":23192},"end":{"line":1,"column":27842}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group list-full is-child-node-title");var el2=dom.createElement("div");dom.setAttribute(el2,"class","list-group-item");var el3=dom.createElement("span");dom.setAttribute(el3,"class","glyphicon glyphicon-subtitles pull-left");dom.appendChild(el2,el3);var el3=dom.createTextNode("新建申请单");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("ul");dom.setAttribute(el1,"class","list-group list-full form-horizontal");var el2=dom.createElement("li");var el3=dom.createElement("label");dom.setAttribute(el3,"for","project");dom.setAttribute(el3,"class","control-label col-md-2 col-sm-12");var el4=dom.createTextNode("所属项目");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","col-md-10 col-sm-12");var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createElement("label");dom.setAttribute(el3,"for","department");dom.setAttribute(el3,"class","control-label col-md-2 col-sm-12");var el4=dom.createTextNode("使用部门");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","col-md-10 col-sm-12");var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createElement("label");dom.setAttribute(el3,"for","user_name");dom.setAttribute(el3,"class","control-label col-md-2 col-sm-12");var el4=dom.createTextNode("使用人");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","col-md-10 col-sm-12");var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createElement("label");dom.setAttribute(el3,"for","oil");dom.setAttribute(el3,"class","control-label col-md-2 col-sm-12");var el4=dom.createTextNode("油品");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","col-md-10 col-sm-12");var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createElement("label");dom.setAttribute(el3,"for","goal");dom.setAttribute(el3,"class","control-label col-md-2 col-sm-12");var el4=dom.createTextNode("实验目的");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","col-md-10 col-sm-12");var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createElement("li");var el3=dom.createElement("label");dom.setAttribute(el3,"for","start_date");dom.setAttribute(el3,"class","control-label col-md-2 col-sm-12");var el4=dom.createTextNode("起止时间");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","col-md-10 col-sm-12");var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group list-full");var el2=dom.createElement("div");dom.setAttribute(el2,"class","list-group-item form-group input-border-box");var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","help-block");var el4=dom.createTextNode("您可以捎句话给审核人");dom.appendChild(el3,el4);dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-default btn-block");var el3=dom.createTextNode("取消");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element1=dom.childAt(fragment,[1]);var element2=dom.childAt(element1,[0]);var element3=dom.childAt(element2,[1]);var element4=dom.childAt(element1,[1]);var element5=dom.childAt(element4,[1]);var element6=dom.childAt(element1,[2]);var element7=dom.childAt(element6,[1]);var element8=dom.childAt(element1,[3]);var element9=dom.childAt(element8,[1]);var element10=dom.childAt(element1,[4]);var element11=dom.childAt(element10,[1]);var element12=dom.childAt(element1,[5]);var element13=dom.childAt(element12,[1]);var element14=dom.childAt(fragment,[2]);var element15=dom.childAt(element14,[3]);var morphs=new Array(29);morphs[0] = dom.createAttrMorph(element2,'class');morphs[1] = dom.createMorphAt(element3,0,0);morphs[2] = dom.createMorphAt(element3,1,1);morphs[3] = dom.createMorphAt(element3,2,2);morphs[4] = dom.createAttrMorph(element4,'class');morphs[5] = dom.createMorphAt(element5,0,0);morphs[6] = dom.createMorphAt(element5,1,1);morphs[7] = dom.createMorphAt(element5,2,2);morphs[8] = dom.createAttrMorph(element6,'class');morphs[9] = dom.createMorphAt(element7,0,0);morphs[10] = dom.createMorphAt(element7,1,1);morphs[11] = dom.createMorphAt(element7,2,2);morphs[12] = dom.createAttrMorph(element8,'class');morphs[13] = dom.createMorphAt(element9,0,0);morphs[14] = dom.createMorphAt(element9,1,1);morphs[15] = dom.createMorphAt(element9,2,2);morphs[16] = dom.createAttrMorph(element10,'class');morphs[17] = dom.createMorphAt(element11,0,0);morphs[18] = dom.createMorphAt(element11,1,1);morphs[19] = dom.createMorphAt(element11,2,2);morphs[20] = dom.createAttrMorph(element12,'class');morphs[21] = dom.createMorphAt(element13,0,0);morphs[22] = dom.createMorphAt(element13,1,1);morphs[23] = dom.createMorphAt(element13,2,2);morphs[24] = dom.createMorphAt(element13,3,3);morphs[25] = dom.createMorphAt(dom.childAt(element14,[0]),0,0);morphs[26] = dom.createMorphAt(element14,1,1);morphs[27] = dom.createMorphAt(element14,2,2);morphs[28] = dom.createElementMorph(element15);return morphs;},statements:[["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingInstance.errors.project.length",["loc",[null,[1,23484],[1,23522]]]],"has-error"],[],["loc",[null,[1,23479],[1,23536]]]]]]],["inline","pick-up",[],["id","project","value",["subexpr","@mut",[["get","creatingInstance.project.name",["loc",[null,[1,23674],[1,23703]]]]],[],[]],"isPicking",["subexpr","@mut",[["get","isPickingProjectForInstance",["loc",[null,[1,23714],[1,23741]]]]],[],[]],"class","form-control"],["loc",[null,[1,23645],[1,23764]]]],["block","if",[["get","creatingInstance.errors.project",["loc",[null,[1,23770],[1,23801]]]]],[],0,null,["loc",[null,[1,23764],[1,23880]]]],["block","each",[["get","creatingInstance.errors.project",["loc",[null,[1,23888],[1,23919]]]]],[],1,null,["loc",[null,[1,23880],[1,24000]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingInstance.errors.department.length",["loc",[null,[1,24067],[1,24108]]]],"has-error"],[],["loc",[null,[1,24062],[1,24122]]]]]]],["inline","pick-up",[],["id","department","value",["subexpr","@mut",[["get","creatingInstance.department.name",["loc",[null,[1,24266],[1,24298]]]]],[],[]],"isPicking",["subexpr","@mut",[["get","isPickingDepartmentForInstance",["loc",[null,[1,24309],[1,24339]]]]],[],[]],"class","form-control"],["loc",[null,[1,24234],[1,24362]]]],["block","if",[["get","creatingInstance.errors.department",["loc",[null,[1,24368],[1,24402]]]]],[],2,null,["loc",[null,[1,24362],[1,24481]]]],["block","each",[["get","creatingInstance.errors.department",["loc",[null,[1,24489],[1,24523]]]]],[],3,null,["loc",[null,[1,24481],[1,24604]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingInstance.errors.user_name.length",["loc",[null,[1,24671],[1,24711]]]],"has-error"],[],["loc",[null,[1,24666],[1,24725]]]]]]],["inline","input",[],["id","user_name","type","text","value",["subexpr","@mut",[["get","creatingInstance.user_name",["loc",[null,[1,24876],[1,24902]]]]],[],[]],"class","form-control"],["loc",[null,[1,24835],[1,24925]]]],["block","if",[["get","creatingInstance.errors.user_name",["loc",[null,[1,24931],[1,24964]]]]],[],4,null,["loc",[null,[1,24925],[1,25043]]]],["block","each",[["get","creatingInstance.errors.user_name",["loc",[null,[1,25051],[1,25084]]]]],[],5,null,["loc",[null,[1,25043],[1,25165]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingInstance.errors.oils.length",["loc",[null,[1,25232],[1,25267]]]],"has-error"],[],["loc",[null,[1,25227],[1,25281]]]]]]],["block","checkbox-list",[],["content",["subexpr","@mut",[["get","arrangedOils",["loc",[null,[1,25409],[1,25421]]]]],[],[]],"selection",["subexpr","@mut",[["get","creatingInstance.oils",["loc",[null,[1,25432],[1,25453]]]]],[],[]]],6,null,["loc",[null,[1,25384],[1,25800]]]],["block","if",[["get","creatingInstance.errors.oils",["loc",[null,[1,25806],[1,25834]]]]],[],7,null,["loc",[null,[1,25800],[1,25913]]]],["block","each",[["get","creatingInstance.errors.oils",["loc",[null,[1,25921],[1,25949]]]]],[],8,null,["loc",[null,[1,25913],[1,26030]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingInstance.errors.goal.length",["loc",[null,[1,26097],[1,26132]]]],"has-error"],[],["loc",[null,[1,26092],[1,26146]]]]]]],["inline","textarea",[],["id","goal","type","text","rows","4","value",["subexpr","@mut",[["get","creatingInstance.goal",["loc",[null,[1,26300],[1,26321]]]]],[],[]],"class","form-control"],["loc",[null,[1,26252],[1,26344]]]],["block","if",[["get","creatingInstance.errors.goal",["loc",[null,[1,26350],[1,26378]]]]],[],9,null,["loc",[null,[1,26344],[1,26457]]]],["block","each",[["get","creatingInstance.errors.goal",["loc",[null,[1,26465],[1,26493]]]]],[],10,null,["loc",[null,[1,26457],[1,26574]]]],["attribute","class",["concat",["list-group-item form-group has-feedback ",["subexpr","if",[["get","creatingInstance.errors.start_date.length",["loc",[null,[1,26641],[1,26682]]]],"has-error"],[],["loc",[null,[1,26636],[1,26696]]]]]]],["inline","date-picker-value",[],["id","instance_dates","startDate",["subexpr","@mut",[["get","creatingInstance.start_date",["loc",[null,[1,26858],[1,26885]]]]],[],[]],"endDate",["subexpr","@mut",[["get","creatingInstance.end_date",["loc",[null,[1,26894],[1,26919]]]]],[],[]]],["loc",[null,[1,26808],[1,26921]]]],["inline","date-picker",[],["startDate",["subexpr","@mut",[["get","creatingInstance.start_date",["loc",[null,[1,26945],[1,26972]]]]],[],[]],"endDate",["subexpr","@mut",[["get","creatingInstance.end_date",["loc",[null,[1,26981],[1,27006]]]]],[],[]]],["loc",[null,[1,26921],[1,27008]]]],["block","if",[["get","creatingInstance.errors.start_date",["loc",[null,[1,27014],[1,27048]]]]],[],11,null,["loc",[null,[1,27008],[1,27127]]]],["block","each",[["get","creatingInstance.errors.start_date",["loc",[null,[1,27135],[1,27169]]]]],[],12,null,["loc",[null,[1,27127],[1,27250]]]],["inline","textarea",[],["type","text","value",["subexpr","@mut",[["get","creatingInstance.start_info",["loc",[null,[1,27386],[1,27413]]]]],[],[]],"rows","4","class","form-control"],["loc",[null,[1,27357],[1,27445]]]],["block","if",[["get","creatingInstance.errors.server_side_error",["loc",[null,[1,27497],[1,27538]]]]],[],13,null,["loc",[null,[1,27491],[1,27605]]]],["inline","spin-button",[],["action","saveNewInstance","isLoading",["subexpr","@mut",[["get","creatingInstance.isSaving",["loc",[null,[1,27654],[1,27679]]]]],[],[]],"isDisabled",["subexpr","@mut",[["get","creatingInstance.isUnSavable",["loc",[null,[1,27691],[1,27719]]]]],[],[]],"title","保存","class","btn btn-info btn-block"],["loc",[null,[1,27605],[1,27763]]]],["element","action",["goBack"],[],["loc",[null,[1,27771],[1,27790]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11,child12,child13]};})();var child6=(function(){var child0=(function(){var child0=(function(){return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":27871},"end":{"line":1,"column":28020}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group list-full");var el2=dom.createElement("button");dom.setAttribute(el2,"class","btn btn-info btn-block");var el3=dom.createTextNode("新建申请单");dom.appendChild(el2,el3);dom.appendChild(el1,el2);dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[0,0]);var morphs=new Array(1);morphs[0] = dom.createElementMorph(element0);return morphs;},statements:[["element","action",["goNewInstance"],[],["loc",[null,[1,27942],[1,27968]]]]],locals:[],templates:[]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":27850},"end":{"line":1,"column":28031}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","model.is_archived",["loc",[null,[1,27881],[1,27898]]]]],[],0,null,["loc",[null,[1,27871],[1,28031]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":27842},"end":{"line":1,"column":28042}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","isChecker",["loc",[null,[1,27860],[1,27869]]]]],[],0,null,["loc",[null,[1,27850],[1,28042]]]]],locals:[],templates:[child0]};})();return {meta:{"revision":"Ember@1.13.11","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":1,"column":28049}},"moduleName":"htis/templates/manage/instance-list.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","list-group list-full");var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element63=dom.childAt(fragment,[0]);var morphs=new Array(4);morphs[0] = dom.createMorphAt(element63,0,0);morphs[1] = dom.createMorphAt(element63,1,1);morphs[2] = dom.createMorphAt(element63,2,2);morphs[3] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","arrangedResult.length",["loc",[null,[1,40],[1,61]]]]],[],0,1,["loc",[null,[1,34],[1,22441]]]],["block","each",[["get","errorsForInstances.server_side_error",["loc",[null,[1,22449],[1,22485]]]]],[],2,null,["loc",[null,[1,22441],[1,22578]]]],["block","if",[["get","isSearching",["loc",[null,[1,22584],[1,22595]]]]],[],3,4,["loc",[null,[1,22578],[1,23186]]]],["block","if",[["get","isCreatingInstance",["loc",[null,[1,23198],[1,23216]]]]],[],5,6,["loc",[null,[1,23192],[1,28049]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6]};})());});
define("htis/templates/manage/instance-pop", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 395
                    },
                    "end": {
                      "line": 1,
                      "column": 480
                    }
                  },
                  "moduleName": "htis/templates/manage/instance-pop.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 300
                  },
                  "end": {
                    "line": 1,
                    "column": 500
                  }
                },
                "moduleName": "htis/templates/manage/instance-pop.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 401], [1, 410]]]]], [], 0, null, ["loc", [null, [1, 395], [1, 487]]]], ["content", "item.name", ["loc", [null, [1, 487], [1, 500]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 116
                },
                "end": {
                  "line": 1,
                  "column": 520
                }
              },
              "moduleName": "htis/templates/manage/instance-pop.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 327], [1, 331]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 342], [1, 347]]]]], [], []], "action", "setProjectForInstance"], 0, null, ["loc", [null, [1, 300], [1, 520]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 35
              },
              "end": {
                "line": 1,
                "column": 535
              }
            },
            "moduleName": "htis/templates/manage/instance-pop.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择项目", "leftButtonAction", "clearPop", "isRightButtonNeeded", false, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedProjects", ["loc", [null, [1, 235], [1, 251]]]]], [], []], "value", ["subexpr", "@mut", [["get", "creatingInstance.project", ["loc", [null, [1, 258], [1, 282]]]]], [], []]], 0, null, ["loc", [null, [1, 116], [1, 535]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 551
            }
          },
          "moduleName": "htis/templates/manage/instance-pop.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingProjectForInstance", ["loc", [null, [1, 60], [1, 87]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 97], [1, 114]]]]], [], []]], 0, null, ["loc", [null, [1, 35], [1, 551]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 968
                    },
                    "end": {
                      "line": 1,
                      "column": 1053
                    }
                  },
                  "moduleName": "htis/templates/manage/instance-pop.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 870
                  },
                  "end": {
                    "line": 1,
                    "column": 1073
                  }
                },
                "moduleName": "htis/templates/manage/instance-pop.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 974], [1, 983]]]]], [], 0, null, ["loc", [null, [1, 968], [1, 1060]]]], ["content", "item.name", ["loc", [null, [1, 1060], [1, 1073]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 680
                },
                "end": {
                  "line": 1,
                  "column": 1093
                }
              },
              "moduleName": "htis/templates/manage/instance-pop.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 897], [1, 901]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 912], [1, 917]]]]], [], []], "action", "setDepartmentForInstance"], 0, null, ["loc", [null, [1, 870], [1, 1093]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 596
              },
              "end": {
                "line": 1,
                "column": 1108
              }
            },
            "moduleName": "htis/templates/manage/instance-pop.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择部门", "leftButtonAction", "clearPop", "isRightButtonNeeded", false, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedDepartments", ["loc", [null, [1, 799], [1, 818]]]]], [], []], "value", ["subexpr", "@mut", [["get", "creatingInstance.department", ["loc", [null, [1, 825], [1, 852]]]]], [], []]], 0, null, ["loc", [null, [1, 680], [1, 1108]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 558
            },
            "end": {
              "line": 1,
              "column": 1124
            }
          },
          "moduleName": "htis/templates/manage/instance-pop.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingDepartmentForInstance", ["loc", [null, [1, 621], [1, 651]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 661], [1, 678]]]]], [], []]], 0, null, ["loc", [null, [1, 596], [1, 1124]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1514
                    },
                    "end": {
                      "line": 1,
                      "column": 1599
                    }
                  },
                  "moduleName": "htis/templates/manage/instance-pop.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1422
                  },
                  "end": {
                    "line": 1,
                    "column": 1619
                  }
                },
                "moduleName": "htis/templates/manage/instance-pop.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 1520], [1, 1529]]]]], [], 0, null, ["loc", [null, [1, 1514], [1, 1606]]]], ["content", "item.name", ["loc", [null, [1, 1606], [1, 1619]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1241
                },
                "end": {
                  "line": 1,
                  "column": 1639
                }
              },
              "moduleName": "htis/templates/manage/instance-pop.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 1449], [1, 1453]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 1464], [1, 1469]]]]], [], []], "action", "setProjectForTrace"], 0, null, ["loc", [null, [1, 1422], [1, 1639]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1163
              },
              "end": {
                "line": 1,
                "column": 1654
              }
            },
            "moduleName": "htis/templates/manage/instance-pop.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择项目", "leftButtonAction", "clearPop", "isRightButtonNeeded", false, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedProjects", ["loc", [null, [1, 1360], [1, 1376]]]]], [], []], "value", ["subexpr", "@mut", [["get", "creatingTrace.project", ["loc", [null, [1, 1383], [1, 1404]]]]], [], []]], 0, null, ["loc", [null, [1, 1241], [1, 1654]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1131
            },
            "end": {
              "line": 1,
              "column": 1670
            }
          },
          "moduleName": "htis/templates/manage/instance-pop.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingProjectForTrace", ["loc", [null, [1, 1188], [1, 1212]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 1222], [1, 1239]]]]], [], []]], 0, null, ["loc", [null, [1, 1163], [1, 1670]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2075
                    },
                    "end": {
                      "line": 1,
                      "column": 2160
                    }
                  },
                  "moduleName": "htis/templates/manage/instance-pop.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1980
                  },
                  "end": {
                    "line": 1,
                    "column": 2180
                  }
                },
                "moduleName": "htis/templates/manage/instance-pop.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 2081], [1, 2090]]]]], [], 0, null, ["loc", [null, [1, 2075], [1, 2167]]]], ["content", "item.name", ["loc", [null, [1, 2167], [1, 2180]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1793
                },
                "end": {
                  "line": 1,
                  "column": 2200
                }
              },
              "moduleName": "htis/templates/manage/instance-pop.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 2007], [1, 2011]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 2022], [1, 2027]]]]], [], []], "action", "setDepartmentForTrace"], 0, null, ["loc", [null, [1, 1980], [1, 2200]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1712
              },
              "end": {
                "line": 1,
                "column": 2215
              }
            },
            "moduleName": "htis/templates/manage/instance-pop.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择部门", "leftButtonAction", "clearPop", "isRightButtonNeeded", false, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedDepartments", ["loc", [null, [1, 1912], [1, 1931]]]]], [], []], "value", ["subexpr", "@mut", [["get", "creatingTrace.department", ["loc", [null, [1, 1938], [1, 1962]]]]], [], []]], 0, null, ["loc", [null, [1, 1793], [1, 2215]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1677
            },
            "end": {
              "line": 1,
              "column": 2231
            }
          },
          "moduleName": "htis/templates/manage/instance-pop.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPickingDepartmentForTrace", ["loc", [null, [1, 1737], [1, 1764]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 1774], [1, 1791]]]]], [], []]], 0, null, ["loc", [null, [1, 1712], [1, 2231]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2238
          }
        },
        "moduleName": "htis/templates/manage/instance-pop.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isPickingProjectForInstance", ["loc", [null, [1, 6], [1, 33]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 558]]]], ["block", "if", [["get", "isPickingDepartmentForInstance", ["loc", [null, [1, 564], [1, 594]]]]], [], 1, null, ["loc", [null, [1, 558], [1, 1131]]]], ["block", "if", [["get", "isPickingProjectForTrace", ["loc", [null, [1, 1137], [1, 1161]]]]], [], 2, null, ["loc", [null, [1, 1131], [1, 1677]]]], ["block", "if", [["get", "isPickingDepartmentForTrace", ["loc", [null, [1, 1683], [1, 1710]]]]], [], 3, null, ["loc", [null, [1, 1677], [1, 2238]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("htis/templates/manage/navigable-pane-car", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 334
                  },
                  "end": {
                    "line": 1,
                    "column": 414
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("基本信息");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: ["isFolded"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 259
                },
                "end": {
                  "line": 1,
                  "column": 436
                }
              },
              "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "list-group list-full is-child-node-title");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["block", "fold-button", [], ["isFolded", ["subexpr", "@mut", [["get", "isBaseFolded", ["loc", [null, [1, 358], [1, 370]]]]], [], []], "class", "list-group-item"], 0, null, ["loc", [null, [1, 334], [1, 430]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 639
                    },
                    "end": {
                      "line": 1,
                      "column": 738
                    }
                  },
                  "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "alert-error", [], ["model", ["subexpr", "@mut", [["get", "archivingCar", ["loc", [null, [1, 704], [1, 716]]]]], [], []], "action", "clearError"], ["loc", [null, [1, 684], [1, 738]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 471
                  },
                  "end": {
                    "line": 1,
                    "column": 1010
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "list-group");
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "alert alert-warning");
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "help-block text-warning text-center");
                var el4 = dom.createTextNode("闲置后该车辆将不可见，您可以在已闲置列表中找回该车辆，确定要继续吗？");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("button");
                dom.setAttribute(el3, "class", "btn btn-default btn-sm btn-block");
                var el4 = dom.createElement("span");
                var el5 = dom.createTextNode("取消");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element17 = dom.childAt(fragment, [0, 0]);
                var element18 = dom.childAt(element17, [3]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(element17, 1, 1);
                morphs[1] = dom.createMorphAt(element17, 2, 2);
                morphs[2] = dom.createElementMorph(element18);
                return morphs;
              },
              statements: [["block", "if", [["get", "archivingCar.errors.server_side_error", ["loc", [null, [1, 645], [1, 682]]]]], [], 0, null, ["loc", [null, [1, 639], [1, 745]]]], ["inline", "spin-button", [], ["action", "saveArchivingCar", "isLoading", ["subexpr", "@mut", [["get", "archivingCar.isSaving", ["loc", [null, [1, 795], [1, 816]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "archivingCar.isUnSavable", ["loc", [null, [1, 828], [1, 852]]]]], [], []], "title", "确定", "class", "btn btn-sm btn-danger btn-block"], ["loc", [null, [1, 745], [1, 905]]]], ["element", "action", ["goBack"], [], ["loc", [null, [1, 913], [1, 932]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1187
                      },
                      "end": {
                        "line": 1,
                        "column": 1286
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "alert-error", [], ["model", ["subexpr", "@mut", [["get", "restoringCar", ["loc", [null, [1, 1252], [1, 1264]]]]], [], []], "action", "clearError"], ["loc", [null, [1, 1232], [1, 1286]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1018
                    },
                    "end": {
                      "line": 1,
                      "column": 1558
                    }
                  },
                  "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "list-group");
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "alert alert-warning");
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "help-block text-warning text-center");
                  var el4 = dom.createTextNode("还原后该车辆将重新可用，您可以在待处理列表中找到该车辆，确定要继续吗？");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("button");
                  dom.setAttribute(el3, "class", "btn btn-default btn-sm btn-block");
                  var el4 = dom.createElement("span");
                  var el5 = dom.createTextNode("取消");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element15 = dom.childAt(fragment, [0, 0]);
                  var element16 = dom.childAt(element15, [3]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(element15, 1, 1);
                  morphs[1] = dom.createMorphAt(element15, 2, 2);
                  morphs[2] = dom.createElementMorph(element16);
                  return morphs;
                },
                statements: [["block", "if", [["get", "restoringCar.errors.server_side_error", ["loc", [null, [1, 1193], [1, 1230]]]]], [], 0, null, ["loc", [null, [1, 1187], [1, 1293]]]], ["inline", "spin-button", [], ["action", "saveRestoringCar", "isLoading", ["subexpr", "@mut", [["get", "restoringCar.isSaving", ["loc", [null, [1, 1343], [1, 1364]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "restoringCar.isUnSavable", ["loc", [null, [1, 1376], [1, 1400]]]]], [], []], "title", "确定", "class", "btn btn-sm btn-danger btn-block"], ["loc", [null, [1, 1293], [1, 1453]]]], ["element", "action", ["goBack"], [], ["loc", [null, [1, 1461], [1, 1480]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1615
                      },
                      "end": {
                        "line": 1,
                        "column": 1854
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("li");
                    dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
                    var el2 = dom.createElement("label");
                    dom.setAttribute(el2, "for", "number");
                    dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
                    var el3 = dom.createTextNode("系统编号");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("div");
                    dom.setAttribute(el2, "class", "col-md-10 col-sm-12");
                    var el3 = dom.createElement("p");
                    dom.setAttribute(el3, "class", "form-control-static");
                    var el4 = dom.createComment("");
                    dom.appendChild(el3, el4);
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "model.id", ["loc", [null, [1, 1827], [1, 1839]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2159
                        },
                        "end": {
                          "line": 1,
                          "column": 2256
                        }
                      },
                      "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2069
                      },
                      "end": {
                        "line": 1,
                        "column": 2263
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "input", [], ["id", "number", "type", "text", "value", ["subexpr", "@mut", [["get", "model.number", ["loc", [null, [1, 2124], [1, 2136]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 2086], [1, 2159]]]], ["block", "if", [["get", "model.errors.number", ["loc", [null, [1, 2165], [1, 2184]]]]], [], 0, null, ["loc", [null, [1, 2159], [1, 2263]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2263
                      },
                      "end": {
                        "line": 1,
                        "column": 2322
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("p");
                    dom.setAttribute(el1, "class", "form-control-static");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "model.number", ["loc", [null, [1, 2302], [1, 2318]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child3 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2329
                      },
                      "end": {
                        "line": 1,
                        "column": 2428
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "help-block text-danger");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "error.message", ["loc", [null, [1, 2405], [1, 2422]]]]],
                  locals: ["error"],
                  templates: []
                };
              })();
              var child4 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2729
                        },
                        "end": {
                          "line": 1,
                          "column": 2823
                        }
                      },
                      "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2645
                      },
                      "end": {
                        "line": 1,
                        "column": 2830
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "input", [], ["id", "vin", "type", "text", "value", ["subexpr", "@mut", [["get", "model.vin", ["loc", [null, [1, 2697], [1, 2706]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 2662], [1, 2729]]]], ["block", "if", [["get", "model.errors.vin", ["loc", [null, [1, 2735], [1, 2751]]]]], [], 0, null, ["loc", [null, [1, 2729], [1, 2830]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child5 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2830
                      },
                      "end": {
                        "line": 1,
                        "column": 2886
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("p");
                    dom.setAttribute(el1, "class", "form-control-static");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "model.vin", ["loc", [null, [1, 2869], [1, 2882]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child6 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2893
                      },
                      "end": {
                        "line": 1,
                        "column": 2989
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "help-block text-danger");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "error.message", ["loc", [null, [1, 2966], [1, 2983]]]]],
                  locals: ["error"],
                  templates: []
                };
              })();
              var child7 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 3297
                        },
                        "end": {
                          "line": 1,
                          "column": 3393
                        }
                      },
                      "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3209
                      },
                      "end": {
                        "line": 1,
                        "column": 3400
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "input", [], ["id", "model", "type", "text", "value", ["subexpr", "@mut", [["get", "model.model", ["loc", [null, [1, 3263], [1, 3274]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 3226], [1, 3297]]]], ["block", "if", [["get", "model.errors.model", ["loc", [null, [1, 3303], [1, 3321]]]]], [], 0, null, ["loc", [null, [1, 3297], [1, 3400]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child8 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3400
                      },
                      "end": {
                        "line": 1,
                        "column": 3458
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("p");
                    dom.setAttribute(el1, "class", "form-control-static");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "model.model", ["loc", [null, [1, 3439], [1, 3454]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child9 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3465
                      },
                      "end": {
                        "line": 1,
                        "column": 3563
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "help-block text-danger");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "error.message", ["loc", [null, [1, 3540], [1, 3557]]]]],
                  locals: ["error"],
                  templates: []
                };
              })();
              var child10 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4258
                      },
                      "end": {
                        "line": 1,
                        "column": 4306
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["content", "model.last_mileage", ["loc", [null, [1, 4284], [1, 4306]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child11 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4306
                      },
                      "end": {
                        "line": 1,
                        "column": 4315
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("无");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child12 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4531
                      },
                      "end": {
                        "line": 1,
                        "column": 4602
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("[");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("]");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    return morphs;
                  },
                  statements: [["content", "model.last_volume", ["loc", [null, [1, 4556], [1, 4577]]]], ["content", "model.last_oil.name", ["loc", [null, [1, 4578], [1, 4601]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child13 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4602
                      },
                      "end": {
                        "line": 1,
                        "column": 4611
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("无");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child14 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4825
                      },
                      "end": {
                        "line": 1,
                        "column": 4913
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element5 = dom.childAt(fragment, [0]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element5, 'class');
                    morphs[1] = dom.createMorphAt(element5, 0, 0);
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["text-", ["get", "model.rateColor", ["loc", [null, [1, 4868], [1, 4883]]]]]]], ["content", "model.last_rate", ["loc", [null, [1, 4887], [1, 4906]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child15 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4913
                      },
                      "end": {
                        "line": 1,
                        "column": 4922
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("无");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child16 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 5288
                        },
                        "end": {
                          "line": 1,
                          "column": 5390
                        }
                      },
                      "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 5156
                      },
                      "end": {
                        "line": 1,
                        "column": 5397
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "textarea", [], ["id", "description", "type", "text", "rows", "4", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [1, 5228], [1, 5245]]]]], [], []], "placeholder", "请输入备注", "class", "form-control"], ["loc", [null, [1, 5173], [1, 5288]]]], ["block", "if", [["get", "model.errors.description", ["loc", [null, [1, 5294], [1, 5318]]]]], [], 0, null, ["loc", [null, [1, 5288], [1, 5397]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child17 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 5397
                      },
                      "end": {
                        "line": 1,
                        "column": 5461
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("p");
                    dom.setAttribute(el1, "class", "form-control-static");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "model.description", ["loc", [null, [1, 5436], [1, 5457]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child18 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 5468
                      },
                      "end": {
                        "line": 1,
                        "column": 5572
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "help-block text-danger");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "error.message", ["loc", [null, [1, 5549], [1, 5566]]]]],
                  locals: ["error"],
                  templates: []
                };
              })();
              var child19 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 5592
                      },
                      "end": {
                        "line": 1,
                        "column": 5639
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 5615], [1, 5639]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child20 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 5668
                        },
                        "end": {
                          "line": 1,
                          "column": 5860
                        }
                      },
                      "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("div");
                      dom.setAttribute(el1, "class", "list-group list-full");
                      var el2 = dom.createElement("div");
                      dom.setAttribute(el2, "class", "alert alert-warning text-center");
                      var el3 = dom.createElement("span");
                      dom.setAttribute(el3, "class", "glyphicon glyphicon-cloud left-icon");
                      dom.appendChild(el2, el3);
                      var el3 = dom.createElement("span");
                      var el4 = dom.createTextNode("该车辆已闲置");
                      dom.appendChild(el3, el4);
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 5651
                      },
                      "end": {
                        "line": 1,
                        "column": 5867
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "model.is_archived", ["loc", [null, [1, 5674], [1, 5691]]]]], [], 0, null, ["loc", [null, [1, 5668], [1, 5867]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child21 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 5875
                        },
                        "end": {
                          "line": 1,
                          "column": 6017
                        }
                      },
                      "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("div");
                      dom.setAttribute(el1, "class", "list-group list-full");
                      var el2 = dom.createElement("button");
                      dom.setAttribute(el2, "class", "btn btn-info btn-block");
                      var el3 = dom.createTextNode("闲置");
                      dom.appendChild(el2, el3);
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element4 = dom.childAt(fragment, [0, 0]);
                      var morphs = new Array(1);
                      morphs[0] = dom.createElementMorph(element4);
                      return morphs;
                    },
                    statements: [["element", "action", ["goCarArchive"], [], ["loc", [null, [1, 5943], [1, 5968]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "revision": "Ember@1.13.11",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 1,
                            "column": 6025
                          },
                          "end": {
                            "line": 1,
                            "column": 6179
                          }
                        },
                        "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                      },
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createElement("div");
                        dom.setAttribute(el1, "class", "list-group list-full");
                        var el2 = dom.createElement("button");
                        dom.setAttribute(el2, "class", "btn btn-warning btn-block");
                        var el3 = dom.createTextNode("该车辆已闲置，点击可还原");
                        dom.appendChild(el2, el3);
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var element3 = dom.childAt(fragment, [0, 0]);
                        var morphs = new Array(1);
                        morphs[0] = dom.createElementMorph(element3);
                        return morphs;
                      },
                      statements: [["element", "action", ["goCarRestore"], [], ["loc", [null, [1, 6092], [1, 6117]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 6017
                        },
                        "end": {
                          "line": 1,
                          "column": 6186
                        }
                      },
                      "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "if", [["get", "model.is_archived", ["loc", [null, [1, 6031], [1, 6048]]]]], [], 0, null, ["loc", [null, [1, 6025], [1, 6186]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 5867
                      },
                      "end": {
                        "line": 1,
                        "column": 6193
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "model.isArchivable", ["loc", [null, [1, 5881], [1, 5899]]]]], [], 0, 1, ["loc", [null, [1, 5875], [1, 6193]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1558
                    },
                    "end": {
                      "line": 1,
                      "column": 6200
                    }
                  },
                  "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("ul");
                  dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "number");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("内部编号");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "vin");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("VIN");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "model");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("车型");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "instance_count");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("申请单");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createElement("p");
                  dom.setAttribute(el4, "class", "form-control-static");
                  var el5 = dom.createTextNode("该车辆目前有");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("个申请单");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "bill_count");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("加油单");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createElement("p");
                  dom.setAttribute(el4, "class", "form-control-static");
                  var el5 = dom.createTextNode("该车辆目前有");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("个加油单");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "last_mileage");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("里程");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createElement("p");
                  dom.setAttribute(el4, "class", "form-control-static");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "last_volume");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("最近加油");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createElement("p");
                  dom.setAttribute(el4, "class", "form-control-static");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "last_rate");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("最近油耗");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createElement("p");
                  dom.setAttribute(el4, "class", "form-control-static");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("li");
                  var el3 = dom.createElement("label");
                  dom.setAttribute(el3, "for", "description");
                  dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
                  var el4 = dom.createTextNode("备注");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "col-md-10 col-sm-12");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element6 = dom.childAt(fragment, [0]);
                  var element7 = dom.childAt(element6, [1]);
                  var element8 = dom.childAt(element7, [1]);
                  var element9 = dom.childAt(element6, [2]);
                  var element10 = dom.childAt(element9, [1]);
                  var element11 = dom.childAt(element6, [3]);
                  var element12 = dom.childAt(element11, [1]);
                  var element13 = dom.childAt(element6, [9]);
                  var element14 = dom.childAt(element13, [1]);
                  var morphs = new Array(20);
                  morphs[0] = dom.createMorphAt(element6, 0, 0);
                  morphs[1] = dom.createAttrMorph(element7, 'class');
                  morphs[2] = dom.createMorphAt(element8, 0, 0);
                  morphs[3] = dom.createMorphAt(element8, 1, 1);
                  morphs[4] = dom.createAttrMorph(element9, 'class');
                  morphs[5] = dom.createMorphAt(element10, 0, 0);
                  morphs[6] = dom.createMorphAt(element10, 1, 1);
                  morphs[7] = dom.createAttrMorph(element11, 'class');
                  morphs[8] = dom.createMorphAt(element12, 0, 0);
                  morphs[9] = dom.createMorphAt(element12, 1, 1);
                  morphs[10] = dom.createMorphAt(dom.childAt(element6, [4, 1, 0]), 1, 1);
                  morphs[11] = dom.createMorphAt(dom.childAt(element6, [5, 1, 0]), 1, 1);
                  morphs[12] = dom.createMorphAt(dom.childAt(element6, [6, 1, 0]), 0, 0);
                  morphs[13] = dom.createMorphAt(dom.childAt(element6, [7, 1, 0]), 0, 0);
                  morphs[14] = dom.createMorphAt(dom.childAt(element6, [8, 1, 0]), 0, 0);
                  morphs[15] = dom.createAttrMorph(element13, 'class');
                  morphs[16] = dom.createMorphAt(element14, 0, 0);
                  morphs[17] = dom.createMorphAt(element14, 1, 1);
                  morphs[18] = dom.createMorphAt(element6, 10, 10);
                  morphs[19] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "unless", [["get", "model.isNew", ["loc", [null, [1, 1625], [1, 1636]]]]], [], 0, null, ["loc", [null, [1, 1615], [1, 1865]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.number.length", ["loc", [null, [1, 1921], [1, 1947]]]], "has-error"], [], ["loc", [null, [1, 1916], [1, 1961]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 2075], [1, 2084]]]]], [], 1, 2, ["loc", [null, [1, 2069], [1, 2329]]]], ["block", "each", [["get", "model.errors.number", ["loc", [null, [1, 2337], [1, 2356]]]]], [], 3, null, ["loc", [null, [1, 2329], [1, 2437]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.vin.length", ["loc", [null, [1, 2504], [1, 2527]]]], "has-error"], [], ["loc", [null, [1, 2499], [1, 2541]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 2651], [1, 2660]]]]], [], 4, 5, ["loc", [null, [1, 2645], [1, 2893]]]], ["block", "each", [["get", "model.errors.vin", ["loc", [null, [1, 2901], [1, 2917]]]]], [], 6, null, ["loc", [null, [1, 2893], [1, 2998]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.model.length", ["loc", [null, [1, 3065], [1, 3090]]]], "has-error"], [], ["loc", [null, [1, 3060], [1, 3104]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 3215], [1, 3224]]]]], [], 7, 8, ["loc", [null, [1, 3209], [1, 3465]]]], ["block", "each", [["get", "model.errors.model", ["loc", [null, [1, 3473], [1, 3491]]]]], [], 9, null, ["loc", [null, [1, 3465], [1, 3572]]]], ["content", "model.instance_count", ["loc", [null, [1, 3785], [1, 3809]]]], ["content", "model.bill_count", ["loc", [null, [1, 4026], [1, 4046]]]], ["block", "if", [["get", "model.last_mileage", ["loc", [null, [1, 4264], [1, 4282]]]]], [], 10, 11, ["loc", [null, [1, 4258], [1, 4322]]]], ["block", "if", [["get", "model.last_volume", ["loc", [null, [1, 4537], [1, 4554]]]]], [], 12, 13, ["loc", [null, [1, 4531], [1, 4618]]]], ["block", "if", [["get", "model.last_rate", ["loc", [null, [1, 4831], [1, 4846]]]]], [], 14, 15, ["loc", [null, [1, 4825], [1, 4929]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.description.length", ["loc", [null, [1, 5000], [1, 5031]]]], "has-error"], [], ["loc", [null, [1, 4995], [1, 5045]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 5162], [1, 5171]]]]], [], 16, 17, ["loc", [null, [1, 5156], [1, 5468]]]], ["block", "each", [["get", "model.errors.description", ["loc", [null, [1, 5476], [1, 5500]]]]], [], 18, null, ["loc", [null, [1, 5468], [1, 5581]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 5598], [1, 5613]]]]], [], 19, null, ["loc", [null, [1, 5592], [1, 5646]]]], ["block", "if", [["get", "isChecker", ["loc", [null, [1, 5657], [1, 5666]]]]], [], 20, 21, ["loc", [null, [1, 5651], [1, 6200]]]]],
                locals: [],
                templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19, child20, child21]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1010
                  },
                  "end": {
                    "line": 1,
                    "column": 6207
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isCarRestoring", ["loc", [null, [1, 1024], [1, 1038]]]]], [], 0, 1, ["loc", [null, [1, 1018], [1, 6207]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 447
                },
                "end": {
                  "line": 1,
                  "column": 6214
                }
              },
              "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isCarArchiving", ["loc", [null, [1, 477], [1, 491]]]]], [], 0, 1, ["loc", [null, [1, 471], [1, 6214]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 6329
                  },
                  "end": {
                    "line": 1,
                    "column": 6410
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("申请单");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: ["isFolded"],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 6604
                  },
                  "end": {
                    "line": 1,
                    "column": 6667
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "partial", ["manage/instance-list"], [], ["loc", [null, [1, 6633], [1, 6667]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 6225
                },
                "end": {
                  "line": 1,
                  "column": 6678
                }
              },
              "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "list-group list-full is-child-node-title");
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "list-group-item");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "class", "pull-right link-default");
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "title", "显示已结束申请单");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0, 0]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element1, [0]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(element0, 0, 0);
              morphs[1] = dom.createElementMorph(element1);
              morphs[2] = dom.createAttrMorph(element2, 'class');
              morphs[3] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "fold-button", [], ["isFolded", ["subexpr", "@mut", [["get", "isInstancesFolded", ["loc", [null, [1, 6353], [1, 6370]]]]], [], []], "class", "link-default"], 0, null, ["loc", [null, [1, 6329], [1, 6426]]]], ["element", "action", ["toggleCloudList"], [], ["loc", [null, [1, 6429], [1, 6457]]]], ["attribute", "class", ["concat", ["glyphicon glyphicon-cloud ", ["subexpr", "if", [["get", "isCloudList", ["loc", [null, [1, 6551], [1, 6562]]]], "text-warning"], [], ["loc", [null, [1, 6546], [1, 6579]]]]]]], ["block", "unless", [["get", "isInstancesFolded", ["loc", [null, [1, 6614], [1, 6631]]]]], [], 1, null, ["loc", [null, [1, 6604], [1, 6678]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 6689
              }
            },
            "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "isEditing", ["loc", [null, [1, 269], [1, 278]]]]], [], 0, null, ["loc", [null, [1, 259], [1, 447]]]], ["block", "unless", [["get", "isBaseFolded", ["loc", [null, [1, 457], [1, 469]]]]], [], 1, null, ["loc", [null, [1, 447], [1, 6225]]]], ["block", "unless", [["get", "isEditing", ["loc", [null, [1, 6235], [1, 6244]]]]], [], 2, null, ["loc", [null, [1, 6225], [1, 6689]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 6715
            }
          },
          "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "standard-detail-panel", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 116], [1, 121]]]]], [], []], "pannelTitle", ["subexpr", "@mut", [["get", "model.number", ["loc", [null, [1, 134], [1, 146]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 157], [1, 166]]]]], [], []], "isLeftButtonNeeded", ["subexpr", "@mut", [["get", "equipment.isXs", ["loc", [null, [1, 186], [1, 200]]]]], [], []], "isRightButtonNeeded", ["subexpr", "@mut", [["get", "sessionController.isCarManagePowered", ["loc", [null, [1, 221], [1, 257]]]]], [], []]], 0, null, ["loc", [null, [1, 85], [1, 6715]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 6793
          }
        },
        "moduleName": "htis/templates/manage/navigable-pane-car.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 6734]]]], ["inline", "partial", ["manage/instance-pop"], [], ["loc", [null, [1, 6734], [1, 6767]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 6767], [1, 6793]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/navigable-pane-cars", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 790
                  },
                  "end": {
                    "line": 1,
                    "column": 880
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "badge pull-right");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "item.instances.length", ["loc", [null, [1, 849], [1, 874]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 887
                  },
                  "end": {
                    "line": 1,
                    "column": 1005
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "title", "已结束/归档");
                dom.setAttribute(el1, "class", "pull-right glyphicon glyphicon-cloud left-icon text-muted");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1005
                    },
                    "end": {
                      "line": 1,
                      "column": 1131
                    }
                  },
                  "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "title", "已过期");
                  dom.setAttribute(el1, "class", "pull-right glyphicon glyphicon-cloud-upload left-icon text-danger");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1131
                      },
                      "end": {
                        "line": 1,
                        "column": 1261
                      }
                    },
                    "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "title", "近期将过期");
                    dom.setAttribute(el1, "class", "pull-right glyphicon glyphicon-cloud-upload left-icon text-warning");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1131
                    },
                    "end": {
                      "line": 1,
                      "column": 1261
                    }
                  },
                  "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "item.isFinishing", ["loc", [null, [1, 1141], [1, 1157]]]]], [], 0, null, ["loc", [null, [1, 1131], [1, 1261]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1005
                  },
                  "end": {
                    "line": 1,
                    "column": 1261
                  }
                },
                "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "item.isFinished", ["loc", [null, [1, 1015], [1, 1030]]]]], [], 0, 1, ["loc", [null, [1, 1005], [1, 1261]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 627
                },
                "end": {
                  "line": 1,
                  "column": 1268
                }
              },
              "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-chevron-right pull-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "item.number", ["loc", [null, [1, 711], [1, 726]]]], ["block", "if", [["get", "item.instances.length", ["loc", [null, [1, 796], [1, 817]]]]], [], 0, null, ["loc", [null, [1, 790], [1, 887]]]], ["block", "if", [["get", "item.is_archived", ["loc", [null, [1, 893], [1, 909]]]]], [], 1, 2, ["loc", [null, [1, 887], [1, 1268]]]]],
            locals: ["isChecked"],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 1288
              }
            },
            "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 654], [1, 658]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [1, 669], [1, 678]]]]], [], []], "action", "goItem"], 0, null, ["loc", [null, [1, 627], [1, 1288]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 1303
            }
          },
          "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "list-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 111], [1, 122]]]]], [], []], "isMoreButtonNeeded", ["subexpr", "@mut", [["get", "isMoreButtonNeeded", ["loc", [null, [1, 142], [1, 160]]]]], [], []], "isTopButtonNeeded", ["subexpr", "@mut", [["get", "isTopButtonNeeded", ["loc", [null, [1, 179], [1, 196]]]]], [], []], "isToShowAll", ["subexpr", "@mut", [["get", "isToShowAll", ["loc", [null, [1, 209], [1, 220]]]]], [], []], "isEnterSearchable", ["subexpr", "@mut", [["get", "isEnterSearchable", ["loc", [null, [1, 239], [1, 256]]]]], [], []], "isEnterLighted", ["subexpr", "@mut", [["get", "isSearchkeyEntered", ["loc", [null, [1, 272], [1, 290]]]]], [], []], "isSearching", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [1, 303], [1, 314]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 322], [1, 328]]]]], [], []], "isLeftButtonNeeded", ["subexpr", "@mut", [["get", "equipment.isXs", ["loc", [null, [1, 348], [1, 362]]]]], [], []], "isRightButtonNeeded", ["subexpr", "@mut", [["get", "sessionController.isCarManagePowered", ["loc", [null, [1, 383], [1, 419]]]]], [], []], "isFilterButtonNeeded", true, "filterButtonIcon", "glyphicon-star", "filterButtonTitle", "与我相关", "isFilterButtonLighted", ["subexpr", "@mut", [["get", "isFiltered", ["loc", [null, [1, 527], [1, 537]]]]], [], []], "searchKey", ["subexpr", "@mut", [["get", "searchKey", ["loc", [null, [1, 548], [1, 557]]]]], [], []], "searchPlaceholder", "输入编号、VIN码或车型搜索", "content", ["subexpr", "@mut", [["get", "arrangedResult", ["loc", [null, [1, 601], [1, 615]]]]], [], []]], 0, null, ["loc", [null, [1, 85], [1, 1303]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1322
          }
        },
        "moduleName": "htis/templates/manage/navigable-pane-cars.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 1322]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/pendings", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "htis/templates/manage/pendings.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 22], [1, 62]]]], ["content", "outlet", ["loc", [null, [1, 62], [1, 72]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 80
              },
              "end": {
                "line": 1,
                "column": 153
              }
            },
            "moduleName": "htis/templates/manage/pendings.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 113], [1, 153]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 72
            },
            "end": {
              "line": 1,
              "column": 182
            }
          },
          "moduleName": "htis/templates/manage/pendings.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isCenter", true], 0, null, ["loc", [null, [1, 80], [1, 172]]]], ["content", "outlet", ["loc", [null, [1, 172], [1, 182]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 189
          }
        },
        "moduleName": "htis/templates/manage/pendings.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 189]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/pendings/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 42
            }
          },
          "moduleName": "htis/templates/manage/pendings/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "default-index", ["loc", [null, [1, 25], [1, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "htis/templates/manage/pendings/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 49]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/pendings/pending", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 71
            }
          },
          "moduleName": "htis/templates/manage/pendings/pending.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 22], [1, 61]]]], ["content", "outlet", ["loc", [null, [1, 61], [1, 71]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 79
              },
              "end": {
                "line": 1,
                "column": 163
              }
            },
            "moduleName": "htis/templates/manage/pendings/pending.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 124], [1, 163]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "htis/templates/manage/pendings/pending.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true, "isMulti", true], 0, null, ["loc", [null, [1, 79], [1, 182]]]], ["content", "outlet", ["loc", [null, [1, 182], [1, 192]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 199
          }
        },
        "moduleName": "htis/templates/manage/pendings/pending.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 199]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/pendings/pending/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/pendings/pending/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/pendings/pending/newinstance", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/pendings/pending/newinstance.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/releases", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "htis/templates/manage/releases.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 22], [1, 62]]]], ["content", "outlet", ["loc", [null, [1, 62], [1, 72]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 80
              },
              "end": {
                "line": 1,
                "column": 153
              }
            },
            "moduleName": "htis/templates/manage/releases.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 113], [1, 153]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 72
            },
            "end": {
              "line": 1,
              "column": 182
            }
          },
          "moduleName": "htis/templates/manage/releases.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isCenter", true], 0, null, ["loc", [null, [1, 80], [1, 172]]]], ["content", "outlet", ["loc", [null, [1, 172], [1, 182]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 189
          }
        },
        "moduleName": "htis/templates/manage/releases.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 189]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/releases/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 42
            }
          },
          "moduleName": "htis/templates/manage/releases/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "default-index", ["loc", [null, [1, 25], [1, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "htis/templates/manage/releases/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 49]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/releases/release", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 71
            }
          },
          "moduleName": "htis/templates/manage/releases/release.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 22], [1, 61]]]], ["content", "outlet", ["loc", [null, [1, 61], [1, 71]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 79
              },
              "end": {
                "line": 1,
                "column": 163
              }
            },
            "moduleName": "htis/templates/manage/releases/release.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 124], [1, 163]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "htis/templates/manage/releases/release.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true, "isMulti", true], 0, null, ["loc", [null, [1, 79], [1, 182]]]], ["content", "outlet", ["loc", [null, [1, 182], [1, 192]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 199
          }
        },
        "moduleName": "htis/templates/manage/releases/release.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 199]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/releases/release/archive", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/releases/release/archive.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/releases/release/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/releases/release/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/releases/release/newinstance", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/releases/release/newinstance.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/searchs", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "htis/templates/manage/searchs.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 22], [1, 62]]]], ["content", "outlet", ["loc", [null, [1, 62], [1, 72]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 80
              },
              "end": {
                "line": 1,
                "column": 153
              }
            },
            "moduleName": "htis/templates/manage/searchs.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 113], [1, 153]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 72
            },
            "end": {
              "line": 1,
              "column": 182
            }
          },
          "moduleName": "htis/templates/manage/searchs.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isCenter", true], 0, null, ["loc", [null, [1, 80], [1, 172]]]], ["content", "outlet", ["loc", [null, [1, 172], [1, 182]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 189
          }
        },
        "moduleName": "htis/templates/manage/searchs.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 189]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/searchs/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 42
            }
          },
          "moduleName": "htis/templates/manage/searchs/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "default-index", ["loc", [null, [1, 25], [1, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "htis/templates/manage/searchs/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 49]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/searchs/search", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 71
            }
          },
          "moduleName": "htis/templates/manage/searchs/search.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 22], [1, 61]]]], ["content", "outlet", ["loc", [null, [1, 61], [1, 71]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 79
              },
              "end": {
                "line": 1,
                "column": 163
              }
            },
            "moduleName": "htis/templates/manage/searchs/search.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 124], [1, 163]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "htis/templates/manage/searchs/search.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true, "isMulti", true], 0, null, ["loc", [null, [1, 79], [1, 182]]]], ["content", "outlet", ["loc", [null, [1, 182], [1, 192]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 199
          }
        },
        "moduleName": "htis/templates/manage/searchs/search.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 199]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/searchs/search/archive", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/searchs/search/archive.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/searchs/search/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/searchs/search/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/searchs/search/newinstance", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/searchs/search/newinstance.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/searchs/search/restore", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/searchs/search/restore.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/unuseds", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "htis/templates/manage/unuseds.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 22], [1, 62]]]], ["content", "outlet", ["loc", [null, [1, 62], [1, 72]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 80
              },
              "end": {
                "line": 1,
                "column": 153
              }
            },
            "moduleName": "htis/templates/manage/unuseds.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-cars"], [], ["loc", [null, [1, 113], [1, 153]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 72
            },
            "end": {
              "line": 1,
              "column": 182
            }
          },
          "moduleName": "htis/templates/manage/unuseds.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isCenter", true], 0, null, ["loc", [null, [1, 80], [1, 172]]]], ["content", "outlet", ["loc", [null, [1, 172], [1, 182]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 189
          }
        },
        "moduleName": "htis/templates/manage/unuseds.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 189]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/unuseds/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 42
            }
          },
          "moduleName": "htis/templates/manage/unuseds/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "default-index", ["loc", [null, [1, 25], [1, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "htis/templates/manage/unuseds/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 49]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/manage/unuseds/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/unuseds/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/unuseds/unused", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 71
            }
          },
          "moduleName": "htis/templates/manage/unuseds/unused.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 22], [1, 61]]]], ["content", "outlet", ["loc", [null, [1, 61], [1, 71]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 79
              },
              "end": {
                "line": 1,
                "column": 163
              }
            },
            "moduleName": "htis/templates/manage/unuseds/unused.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["manage/navigable-pane-car"], [], ["loc", [null, [1, 124], [1, 163]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "htis/templates/manage/unuseds/unused.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true, "isMulti", true], 0, null, ["loc", [null, [1, 79], [1, 182]]]], ["content", "outlet", ["loc", [null, [1, 182], [1, 192]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 199
          }
        },
        "moduleName": "htis/templates/manage/unuseds/unused.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 199]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/manage/unuseds/unused/archive", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/unuseds/unused/archive.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/unuseds/unused/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/unuseds/unused/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/manage/unuseds/unused/newinstance", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/manage/unuseds/unused/newinstance.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/navigable-pane-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 323
                },
                "end": {
                  "line": 1,
                  "column": 484
                }
              },
              "moduleName": "htis/templates/navigable-pane-list.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-chevron-right pull-right");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["content", "item.name", ["loc", [null, [1, 407], [1, 420]]]]],
            locals: ["isChecked"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 504
              }
            },
            "moduleName": "htis/templates/navigable-pane-list.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 350], [1, 354]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [1, 365], [1, 374]]]]], [], []], "action", "goItem"], 0, null, ["loc", [null, [1, 323], [1, 504]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 519
            }
          },
          "moduleName": "htis/templates/navigable-pane-list.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "list-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 111], [1, 122]]]]], [], []], "isMoreButtonNeeded", ["subexpr", "@mut", [["get", "isMoreButtonNeeded", ["loc", [null, [1, 142], [1, 160]]]]], [], []], "isTopButtonNeeded", ["subexpr", "@mut", [["get", "isTopButtonNeeded", ["loc", [null, [1, 179], [1, 196]]]]], [], []], "isToShowAll", ["subexpr", "@mut", [["get", "isToShowAll", ["loc", [null, [1, 209], [1, 220]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 228], [1, 234]]]]], [], []], "isLeftButtonNeeded", ["subexpr", "@mut", [["get", "equipment.isXs", ["loc", [null, [1, 254], [1, 268]]]]], [], []], "searchKey", ["subexpr", "@mut", [["get", "searchKey", ["loc", [null, [1, 279], [1, 288]]]]], [], []], "content", ["subexpr", "@mut", [["get", "arrangedResult", ["loc", [null, [1, 297], [1, 311]]]]], [], []]], 0, null, ["loc", [null, [1, 85], [1, 519]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 538
          }
        },
        "moduleName": "htis/templates/navigable-pane-list.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 538]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/online-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 153
          }
        },
        "moduleName": "htis/templates/online-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["bill-item ", ["subexpr", "if", [["get", "bill.is_printed", ["loc", [null, [1, 27], [1, 42]]]], "text-success"], [], ["loc", [null, [1, 22], [1, 59]]]]]]], ["inline", "print-bill", [["get", "bill", ["loc", [null, [1, 74], [1, 78]]]], ["get", "applicationController.firmName", ["loc", [null, [1, 79], [1, 109]]]], ["get", "applicationController.appShortTitle", ["loc", [null, [1, 110], [1, 145]]]]], [], ["loc", [null, [1, 61], [1, 147]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/online", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 255
                },
                "end": {
                  "line": 1,
                  "column": 462
                }
              },
              "moduleName": "htis/templates/online.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "col-md-6 col-sm-12");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["inline", "partial", ["online-item"], [], ["loc", [null, [1, 431], [1, 456]]]]],
            locals: ["bill"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 176
              },
              "end": {
                "line": 1,
                "column": 477
              }
            },
            "moduleName": "htis/templates/online.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 281], [1, 292]]]]], [], []], "isSearchBoxNeeded", false, "isRightButtonNeeded", false, "content", ["subexpr", "@mut", [["get", "arrangedResult", ["loc", [null, [1, 351], [1, 365]]]]], [], []], "class", "panel-primary"], 0, null, ["loc", [null, [1, 255], [1, 477]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 145
            },
            "end": {
              "line": 1,
              "column": 496
            }
          },
          "moduleName": "htis/templates/online.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 204], [1, 213]]]]], [], []], "isActive", true, "isBack", false, "isHide", false], 0, null, ["loc", [null, [1, 176], [1, 496]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 521
          }
        },
        "moduleName": "htis/templates/online.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "online");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main opacity09 trans-all-05 ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 95], [1, 129]]]], "is-folded"], [], ["loc", [null, [1, 90], [1, 143]]]]]]], ["block", "container-wrap", [], ["isFull", true], 0, null, ["loc", [null, [1, 145], [1, 515]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/scanning", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 368
                      },
                      "end": {
                        "line": 1,
                        "column": 716
                      }
                    },
                    "moduleName": "htis/templates/scanning.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("a");
                    dom.setAttribute(el1, "class", "list-group-item");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "sub-title");
                    var el3 = dom.createTextNode("[");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("]");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("div");
                    dom.setAttribute(el2, "class", "glyphicon glyphicon-chevron-right pull-right");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "pull-right left-icon text-warning");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [0]);
                    var morphs = new Array(4);
                    morphs[0] = dom.createElementMorph(element3);
                    morphs[1] = dom.createMorphAt(element3, 0, 0);
                    morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
                    morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
                    return morphs;
                  },
                  statements: [["element", "action", ["selInstance", ["get", "instance", ["loc", [null, [1, 427], [1, 435]]]]], [], ["loc", [null, [1, 404], [1, 437]]]], ["content", "instance.project.name", ["loc", [null, [1, 462], [1, 487]]]], ["content", "instance.department.name", ["loc", [null, [1, 512], [1, 540]]]], ["inline", "checkbox-list-value", [], ["content", ["subexpr", "@mut", [["get", "instance.oils", ["loc", [null, [1, 690], [1, 703]]]]], [], []]], ["loc", [null, [1, 660], [1, 705]]]]],
                  locals: ["instance"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 261
                    },
                    "end": {
                      "line": 1,
                      "column": 849
                    }
                  },
                  "moduleName": "htis/templates/scanning.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "fix-icon");
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "fix-title");
                  var el3 = dom.createTextNode("检测到多个申请单允许加油");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "list-group");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "list-btns");
                  var el3 = dom.createElement("button");
                  dom.setAttribute(el3, "class", "btn btn-default btn-block");
                  var el4 = dom.createTextNode("取消");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [0]);
                  var element5 = dom.childAt(element4, [2, 0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
                  morphs[1] = dom.createElementMorph(element5);
                  return morphs;
                },
                statements: [["block", "each", [["get", "instances", ["loc", [null, [1, 376], [1, 385]]]]], [], 0, null, ["loc", [null, [1, 368], [1, 725]]]], ["element", "action", ["cancelConfirming"], [], ["loc", [null, [1, 762], [1, 791]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 879
                      },
                      "end": {
                        "line": 1,
                        "column": 958
                      }
                    },
                    "moduleName": "htis/templates/scanning.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "glyphicon glyphicon-transfer text-warning");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 958
                      },
                      "end": {
                        "line": 1,
                        "column": 1026
                      }
                    },
                    "moduleName": "htis/templates/scanning.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "glyphicon glyphicon-barcode text-warning");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 1116
                        },
                        "end": {
                          "line": 1,
                          "column": 1173
                        }
                      },
                      "moduleName": "htis/templates/scanning.hbs"
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["content", "error.message", ["loc", [null, [1, 1156], [1, 1173]]]]],
                    locals: ["error"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1057
                      },
                      "end": {
                        "line": 1,
                        "column": 1188
                      }
                    },
                    "moduleName": "htis/templates/scanning.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "text-danger");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["block", "each", [["get", "errors.check_errors", ["loc", [null, [1, 1124], [1, 1143]]]]], [], 0, null, ["loc", [null, [1, 1116], [1, 1182]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child3 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1188
                      },
                      "end": {
                        "line": 1,
                        "column": 1231
                      }
                    },
                    "moduleName": "htis/templates/scanning.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    var el2 = dom.createTextNode("请将光标置于方框内同时按住扫码键对准车辆条码");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child4 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1434
                      },
                      "end": {
                        "line": 1,
                        "column": 1626
                      }
                    },
                    "moduleName": "htis/templates/scanning.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "spin-button", [], ["action", "clearError", "loadedIcon", "glyphicon-remove", "isIcon", true, "isLoading", false, "disabled", false, "title", "清除", "class", "input-group-addin addin-large pull-right is-blank"], ["loc", [null, [1, 1449], [1, 1626]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 849
                    },
                    "end": {
                      "line": 1,
                      "column": 1657
                    }
                  },
                  "moduleName": "htis/templates/scanning.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "fix-icon");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "icon-title");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "input-border-box");
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "input-group");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [0]);
                  var element1 = dom.childAt(element0, [1]);
                  var element2 = dom.childAt(element1, [1, 0]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createMorphAt(element0, 0, 0);
                  morphs[1] = dom.createMorphAt(element1, 0, 0);
                  morphs[2] = dom.createMorphAt(element2, 0, 0);
                  morphs[3] = dom.createMorphAt(element2, 1, 1);
                  return morphs;
                },
                statements: [["block", "if", [["get", "isChecking", ["loc", [null, [1, 885], [1, 895]]]]], [], 0, 1, ["loc", [null, [1, 879], [1, 1033]]]], ["block", "if", [["get", "errors.check_errors.length", ["loc", [null, [1, 1063], [1, 1089]]]]], [], 2, 3, ["loc", [null, [1, 1057], [1, 1238]]]], ["inline", "input", [], ["type", "text", "enter", "tryGoNext", "autofocus", "autofocus", "value", ["subexpr", "@mut", [["get", "vinCode", ["loc", [null, [1, 1359], [1, 1366]]]]], [], []], "placeholder", "将光标置于此方框内按住扫码键对准车辆条码", "class", "form-control input-vin"], ["loc", [null, [1, 1293], [1, 1434]]]], ["block", "if", [["get", "vinCode", ["loc", [null, [1, 1440], [1, 1447]]]]], [], 4, null, ["loc", [null, [1, 1434], [1, 1633]]]]],
                locals: [],
                templates: [child0, child1, child2, child3, child4]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 198
                  },
                  "end": {
                    "line": 1,
                    "column": 1664
                  }
                },
                "moduleName": "htis/templates/scanning.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isConfirming", ["loc", [null, [1, 267], [1, 279]]]]], [], 0, 1, ["loc", [null, [1, 261], [1, 1664]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 113
                },
                "end": {
                  "line": 1,
                  "column": 1681
                }
              },
              "moduleName": "htis/templates/scanning.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "detail-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 226], [1, 237]]]]], [], []], "class", "panel-primary"], 0, null, ["loc", [null, [1, 198], [1, 1681]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 82
              },
              "end": {
                "line": 1,
                "column": 1710
              }
            },
            "moduleName": "htis/templates/scanning.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 141], [1, 150]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 160], [1, 168]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 176], [1, 182]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 190], [1, 196]]]]], [], []]], 0, null, ["loc", [null, [1, 113], [1, 1700]]]], ["content", "outlet", ["loc", [null, [1, 1700], [1, 1710]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 65
            },
            "end": {
              "line": 1,
              "column": 1729
            }
          },
          "moduleName": "htis/templates/scanning.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isFull", true], 0, null, ["loc", [null, [1, 82], [1, 1729]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1729
            },
            "end": {
              "line": 1,
              "column": 1769
            }
          },
          "moduleName": "htis/templates/scanning.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "none-powered", [], ["action", "goBack"], ["loc", [null, [1, 1737], [1, 1769]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1782
          }
        },
        "moduleName": "htis/templates/scanning.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "scanning");
        dom.setAttribute(el1, "class", "container-main opacity09 trans-all-05");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "isPowered", ["loc", [null, [1, 71], [1, 80]]]]], [], 0, 1, ["loc", [null, [1, 65], [1, 1776]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/scanning/filling", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 565
                  },
                  "end": {
                    "line": 1,
                    "column": 663
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 419
                },
                "end": {
                  "line": 1,
                  "column": 670
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "number-input", [], ["id", "mileage", "value", ["subexpr", "@mut", [["get", "model.mileage", ["loc", [null, [1, 479], [1, 492]]]]], [], []], "dot", 2, "isNullable", true, "placeholder", "输入数值，支持小数点后两位", "class", "form-control"], ["loc", [null, [1, 445], [1, 565]]]], ["block", "if", [["get", "model.errors.mileage", ["loc", [null, [1, 571], [1, 591]]]]], [], 0, null, ["loc", [null, [1, 565], [1, 670]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 670
                },
                "end": {
                  "line": 1,
                  "column": 743
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static text-success");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.mileage", ["loc", [null, [1, 722], [1, 739]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 750
                },
                "end": {
                  "line": 1,
                  "column": 850
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 827], [1, 844]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1235
                      },
                      "end": {
                        "line": 1,
                        "column": 1343
                      }
                    },
                    "moduleName": "htis/templates/scanning/filling.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-success");
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 1323], [1, 1336]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1343
                      },
                      "end": {
                        "line": 1,
                        "column": 1396
                      }
                    },
                    "moduleName": "htis/templates/scanning/filling.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-muted");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 1376], [1, 1389]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1155
                    },
                    "end": {
                      "line": 1,
                      "column": 1403
                    }
                  },
                  "moduleName": "htis/templates/scanning/filling.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 1241], [1, 1250]]]]], [], 0, 1, ["loc", [null, [1, 1235], [1, 1403]]]]],
                locals: ["isChecked"],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1129
                  },
                  "end": {
                    "line": 1,
                    "column": 1423
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "radio-list-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 1182], [1, 1186]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 1197], [1, 1202]]]]], [], []], "action", "setOil"], 0, null, ["loc", [null, [1, 1155], [1, 1423]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1423
                  },
                  "end": {
                    "line": 1,
                    "column": 1483
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "text-success");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "model.oil.name", ["loc", [null, [1, 1458], [1, 1476]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1040
                },
                "end": {
                  "line": 1,
                  "column": 1490
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isFirstStepEditing", ["loc", [null, [1, 1135], [1, 1153]]]]], [], 0, 1, ["loc", [null, [1, 1129], [1, 1490]]]]],
            locals: ["item", "value"],
            templates: [child0, child1]
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1911
                    },
                    "end": {
                      "line": 1,
                      "column": 2008
                    }
                  },
                  "moduleName": "htis/templates/scanning/filling.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1766
                  },
                  "end": {
                    "line": 1,
                    "column": 2015
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "number-input", [], ["id", "volume", "value", ["subexpr", "@mut", [["get", "model.volume", ["loc", [null, [1, 1826], [1, 1838]]]]], [], []], "dot", 2, "isNullable", true, "placeholder", "输入数值，支持小数点后两位", "class", "form-control"], ["loc", [null, [1, 1793], [1, 1911]]]], ["block", "if", [["get", "model.errors.volume", ["loc", [null, [1, 1917], [1, 1936]]]]], [], 0, null, ["loc", [null, [1, 1911], [1, 2015]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2015
                  },
                  "end": {
                    "line": 1,
                    "column": 2087
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("p");
                dom.setAttribute(el1, "class", "form-control-static text-success");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "model.volume", ["loc", [null, [1, 2067], [1, 2083]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2094
                  },
                  "end": {
                    "line": 1,
                    "column": 2193
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "help-block text-danger");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "error.message", ["loc", [null, [1, 2170], [1, 2187]]]]],
              locals: ["error"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1516
                },
                "end": {
                  "line": 1,
                  "column": 2213
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "volume");
              dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-2 col-xs-4");
              var el3 = dom.createTextNode("加油量");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-10 col-sm-10 col-xs-8");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [0]);
              var element8 = dom.childAt(element7, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element7, 'class');
              morphs[1] = dom.createMorphAt(element8, 0, 0);
              morphs[2] = dom.createMorphAt(element8, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.volume.length", ["loc", [null, [1, 1602], [1, 1628]]]], "has-error"], [], ["loc", [null, [1, 1597], [1, 1642]]]]]]], ["block", "if", [["get", "isSecondStepEditing", ["loc", [null, [1, 1772], [1, 1791]]]]], [], 0, 1, ["loc", [null, [1, 1766], [1, 2094]]]], ["block", "each", [["get", "model.errors.volume", ["loc", [null, [1, 2102], [1, 2121]]]]], [], 2, null, ["loc", [null, [1, 2094], [1, 2202]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2263
                },
                "end": {
                  "line": 1,
                  "column": 2367
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-info btn-block btn-lg");
              var el2 = dom.createTextNode("下一步");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element6 = dom.childAt(fragment, [0]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element6);
              return morphs;
            },
            statements: [["element", "action", ["goNext"], [], ["loc", [null, [1, 2297], [1, 2316]]]]],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2552
                      },
                      "end": {
                        "line": 1,
                        "column": 2637
                      }
                    },
                    "moduleName": "htis/templates/scanning/filling.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "alert-error", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 2610], [1, 2615]]]]], [], []], "action", "clearError"], ["loc", [null, [1, 2590], [1, 2637]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2396
                    },
                    "end": {
                      "line": 1,
                      "column": 2900
                    }
                  },
                  "moduleName": "htis/templates/scanning/filling.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "list-group-item list-full");
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "alert alert-warning");
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "help-block text-warning text-center");
                  var el4 = dom.createTextNode("请加油员确认后提交！");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("button");
                  dom.setAttribute(el3, "class", "btn btn-cancel btn-default btn-lg btn-block");
                  var el4 = dom.createElement("span");
                  var el5 = dom.createTextNode("取消");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [0, 0]);
                  var element5 = dom.childAt(element4, [3]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(element4, 1, 1);
                  morphs[1] = dom.createMorphAt(element4, 2, 2);
                  morphs[2] = dom.createElementMorph(element5);
                  return morphs;
                },
                statements: [["block", "if", [["get", "model.errors.server_side_error", ["loc", [null, [1, 2558], [1, 2588]]]]], [], 0, null, ["loc", [null, [1, 2552], [1, 2644]]]], ["inline", "spin-button", [], ["action", "save", "isLoading", ["subexpr", "@mut", [["get", "model.isSaving", ["loc", [null, [1, 2682], [1, 2696]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "model.isUnSavable", ["loc", [null, [1, 2708], [1, 2725]]]]], [], []], "title", "确定", "class", "btn btn-lg btn-danger btn-block"], ["loc", [null, [1, 2644], [1, 2778]]]], ["element", "action", ["cancelSubmit"], [], ["loc", [null, [1, 2786], [1, 2811]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2924
                        },
                        "end": {
                          "line": 1,
                          "column": 3013
                        }
                      },
                      "moduleName": "htis/templates/scanning/filling.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("div");
                      dom.setAttribute(el1, "class", "help-block text-muted text-center");
                      var el2 = dom.createTextNode("正在打开签字板");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 3013
                        },
                        "end": {
                          "line": 1,
                          "column": 3202
                        }
                      },
                      "moduleName": "htis/templates/scanning/filling.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("button");
                      dom.setAttribute(el1, "class", "btn btn-info btn-block btn-lg");
                      var el2 = dom.createTextNode("签字");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("button");
                      dom.setAttribute(el1, "class", "btn btn-cancel btn-default btn-block btn-lg");
                      var el2 = dom.createTextNode("取消");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element2 = dom.childAt(fragment, [0]);
                      var element3 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createElementMorph(element2);
                      morphs[1] = dom.createElementMorph(element3);
                      return morphs;
                    },
                    statements: [["element", "action", ["goSigning"], [], ["loc", [null, [1, 3029], [1, 3051]]]], ["element", "action", ["cancelToPrevious"], [], ["loc", [null, [1, 3109], [1, 3138]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2900
                      },
                      "end": {
                        "line": 1,
                        "column": 3209
                      }
                    },
                    "moduleName": "htis/templates/scanning/filling.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "isWaitingFocusForSign", ["loc", [null, [1, 2930], [1, 2951]]]]], [], 0, 1, ["loc", [null, [1, 2924], [1, 3209]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              var child1 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 3404
                        },
                        "end": {
                          "line": 1,
                          "column": 3559
                        }
                      },
                      "moduleName": "htis/templates/scanning/filling.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("p");
                      dom.setAttribute(el1, "class", "form-control-static text-success text-center");
                      var el2 = dom.createElement("div");
                      dom.setAttribute(el2, "class", "glyphicon glyphicon-pawn text-success split-right");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("已签字");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3209
                      },
                      "end": {
                        "line": 1,
                        "column": 3566
                      }
                    },
                    "moduleName": "htis/templates/scanning/filling.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-info btn-block btn-lg");
                    var el2 = dom.createTextNode("确认");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "class", "btn btn-cancel btn-default btn-block btn-lg");
                    var el2 = dom.createTextNode("取消");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [0]);
                    var element1 = dom.childAt(fragment, [1]);
                    var morphs = new Array(3);
                    morphs[0] = dom.createElementMorph(element0);
                    morphs[1] = dom.createElementMorph(element1);
                    morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["element", "action", ["confirmToSubmit"], [], ["loc", [null, [1, 3225], [1, 3253]]]], ["element", "action", ["cancelToPrevious"], [], ["loc", [null, [1, 3311], [1, 3340]]]], ["block", "if", [["get", "model.signature", ["loc", [null, [1, 3410], [1, 3425]]]]], [], 0, null, ["loc", [null, [1, 3404], [1, 3566]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2900
                    },
                    "end": {
                      "line": 1,
                      "column": 3566
                    }
                  },
                  "moduleName": "htis/templates/scanning/filling.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "isSignNeeded", ["loc", [null, [1, 2910], [1, 2922]]]]], [], 0, 1, ["loc", [null, [1, 2900], [1, 3566]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2375
                  },
                  "end": {
                    "line": 1,
                    "column": 3573
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isSubmiting", ["loc", [null, [1, 2402], [1, 2413]]]]], [], 0, 1, ["loc", [null, [1, 2396], [1, 3573]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2367
                },
                "end": {
                  "line": 1,
                  "column": 3584
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "unless", [["get", "isSigning", ["loc", [null, [1, 2385], [1, 2394]]]]], [], 0, null, ["loc", [null, [1, 2375], [1, 3584]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 3597
              }
            },
            "moduleName": "htis/templates/scanning/filling.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "mileage");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-2 col-xs-4");
            var el4 = dom.createTextNode("里程数");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-10 col-sm-10 col-xs-8");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "oil");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-2 col-xs-4");
            var el4 = dom.createTextNode("油品");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-10 col-sm-10 col-xs-8");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "list-group list-full");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [0]);
            var element10 = dom.childAt(element9, [0]);
            var element11 = dom.childAt(element10, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createAttrMorph(element10, 'class');
            morphs[1] = dom.createMorphAt(element11, 0, 0);
            morphs[2] = dom.createMorphAt(element11, 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element9, [1, 1]), 0, 0);
            morphs[4] = dom.createMorphAt(element9, 2, 2);
            morphs[5] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.mileage.length", ["loc", [null, [1, 253], [1, 280]]]], "has-error"], [], ["loc", [null, [1, 248], [1, 294]]]]]]], ["block", "if", [["get", "isFirstStepEditing", ["loc", [null, [1, 425], [1, 443]]]]], [], 0, 1, ["loc", [null, [1, 419], [1, 750]]]], ["block", "each", [["get", "model.errors.mileage", ["loc", [null, [1, 758], [1, 778]]]]], [], 2, null, ["loc", [null, [1, 750], [1, 859]]]], ["block", "radio-list", [], ["content", ["subexpr", "@mut", [["get", "oils", ["loc", [null, [1, 1062], [1, 1066]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.oil", ["loc", [null, [1, 1073], [1, 1082]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isFirstStepEditing", ["loc", [null, [1, 1093], [1, 1111]]]]], [], []]], 3, null, ["loc", [null, [1, 1040], [1, 1505]]]], ["block", "unless", [["get", "isFirstStepEditing", ["loc", [null, [1, 1526], [1, 1544]]]]], [], 4, null, ["loc", [null, [1, 1516], [1, 2224]]]], ["block", "if", [["get", "isFirstStepEditing", ["loc", [null, [1, 2269], [1, 2287]]]]], [], 5, 6, ["loc", [null, [1, 2263], [1, 3591]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 3614
            }
          },
          "moduleName": "htis/templates/scanning/filling.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "detail-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 113], [1, 124]]]]], [], []], "class", "panel-primary"], 0, null, ["loc", [null, [1, 85], [1, 3614]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3895
                  },
                  "end": {
                    "line": 1,
                    "column": 4058
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "fix-icon");
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "glyphicon glyphicon-pawn text-warning");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "icon-title");
                var el3 = dom.createElement("span");
                var el4 = dom.createTextNode("正在保存签字，请耐心等待...");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 4162
                        },
                        "end": {
                          "line": 1,
                          "column": 4222
                        }
                      },
                      "moduleName": "htis/templates/scanning/filling.hbs"
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["content", "error.message", ["loc", [null, [1, 4205], [1, 4222]]]]],
                    locals: ["error"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4096
                      },
                      "end": {
                        "line": 1,
                        "column": 4231
                      }
                    },
                    "moduleName": "htis/templates/scanning/filling.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "each", [["get", "model.errors.signature", ["loc", [null, [1, 4170], [1, 4192]]]]], [], 0, null, ["loc", [null, [1, 4162], [1, 4231]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 4066
                    },
                    "end": {
                      "line": 1,
                      "column": 4247
                    }
                  },
                  "moduleName": "htis/templates/scanning/filling.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "alert-error", [], ["isCustomized", true, "action", "clearErrorForSignature"], 0, null, ["loc", [null, [1, 4096], [1, 4247]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 4373
                        },
                        "end": {
                          "line": 1,
                          "column": 4445
                        }
                      },
                      "moduleName": "htis/templates/scanning/filling.hbs"
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["content", "error.message", ["loc", [null, [1, 4428], [1, 4445]]]]],
                    locals: ["error"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4303
                      },
                      "end": {
                        "line": 1,
                        "column": 4454
                      }
                    },
                    "moduleName": "htis/templates/scanning/filling.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "each", [["get", "signature.errors.server_side_error", ["loc", [null, [1, 4381], [1, 4415]]]]], [], 0, null, ["loc", [null, [1, 4373], [1, 4454]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 4254
                    },
                    "end": {
                      "line": 1,
                      "column": 4470
                    }
                  },
                  "moduleName": "htis/templates/scanning/filling.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "alert-error", [], ["model", ["subexpr", "@mut", [["get", "signature", ["loc", [null, [1, 4324], [1, 4333]]]]], [], []], "isCustomized", true, "action", "clearError"], 0, null, ["loc", [null, [1, 4303], [1, 4470]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 4058
                  },
                  "end": {
                    "line": 1,
                    "column": 4477
                  }
                },
                "moduleName": "htis/templates/scanning/filling.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "model.errors.signature", ["loc", [null, [1, 4072], [1, 4094]]]]], [], 0, null, ["loc", [null, [1, 4066], [1, 4254]]]], ["block", "if", [["get", "signature.errors.server_side_error.length", ["loc", [null, [1, 4260], [1, 4301]]]]], [], 1, null, ["loc", [null, [1, 4254], [1, 4477]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3780
                },
                "end": {
                  "line": 1,
                  "column": 4484
                }
              },
              "moduleName": "htis/templates/scanning/filling.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isSavingSign", ["loc", [null, [1, 3901], [1, 3913]]]]], [], 0, 1, ["loc", [null, [1, 3895], [1, 4484]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3650
              },
              "end": {
                "line": 1,
                "column": 4500
              }
            },
            "moduleName": "htis/templates/scanning/filling.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "canvas-sign", [], ["submitAction", "submit", "resetAction", "resetCanvas", "cancelAction", "cancelSigning", "isSaving", ["subexpr", "@mut", [["get", "isSavingSign", ["loc", [null, [1, 3881], [1, 3893]]]]], [], []]], 0, null, ["loc", [null, [1, 3780], [1, 4500]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 3633
            },
            "end": {
              "line": 1,
              "column": 4516
            }
          },
          "moduleName": "htis/templates/scanning/filling.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isSigning", ["loc", [null, [1, 3675], [1, 3684]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 3694], [1, 3711]]]]], [], []], "isAlert", true, "isNoneAnimation", true, "class", "scanning-filling-signing"], 0, null, ["loc", [null, [1, 3650], [1, 4516]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 4559
          }
        },
        "moduleName": "htis/templates/scanning/filling.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 3633]]]], ["block", "if", [["get", "isSigning", ["loc", [null, [1, 3639], [1, 3648]]]]], [], 1, null, ["loc", [null, [1, 3633], [1, 4523]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 4523], [1, 4549]]]], ["content", "outlet", ["loc", [null, [1, 4549], [1, 4559]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1027
                  },
                  "end": {
                    "line": 1,
                    "column": 1103
                  }
                },
                "moduleName": "htis/templates/setting.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1273
                  },
                  "end": {
                    "line": 1,
                    "column": 1349
                  }
                },
                "moduleName": "htis/templates/setting.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1525
                  },
                  "end": {
                    "line": 1,
                    "column": 1604
                  }
                },
                "moduleName": "htis/templates/setting.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1786
                  },
                  "end": {
                    "line": 1,
                    "column": 1868
                  }
                },
                "moduleName": "htis/templates/setting.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child4 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2036
                  },
                  "end": {
                    "line": 1,
                    "column": 2111
                  }
                },
                "moduleName": "htis/templates/setting.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child5 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2291
                  },
                  "end": {
                    "line": 1,
                    "column": 2372
                  }
                },
                "moduleName": "htis/templates/setting.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-bookmark pull-right");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 207
                },
                "end": {
                  "line": 1,
                  "column": 2401
                }
              },
              "moduleName": "htis/templates/setting.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "panel");
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "panel-heading text-center");
              var el3 = dom.createElement("h3");
              dom.setAttribute(el3, "class", "panel-title");
              var el4 = dom.createElement("a");
              dom.setAttribute(el4, "title", "返回主页");
              dom.setAttribute(el4, "href", "javascript:void(0)");
              dom.setAttribute(el4, "class", "btn-home pull-left");
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-home");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "sr-only");
              var el6 = dom.createTextNode("返回");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              dom.setAttribute(el4, "title", "通知中心");
              dom.setAttribute(el4, "href", "javascript:void(0)");
              dom.setAttribute(el4, "class", "btn-bell pull-right");
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "bell-count");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-bell");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("label");
              dom.setAttribute(el5, "class", "sr-only");
              var el6 = dom.createTextNode("通知中心");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "panel-scroll");
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "list-group list-full");
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("角色管理");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("用户管理");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("项目管理");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("部门管理");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("油品管理");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "title");
              var el6 = dom.createTextNode("偏好设置");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "glyphicon glyphicon-book pull-left");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var element1 = dom.childAt(element0, [0, 0]);
              var element2 = dom.childAt(element1, [0]);
              var element3 = dom.childAt(element1, [1]);
              var element4 = dom.childAt(element0, [1, 0]);
              var element5 = dom.childAt(element4, [0]);
              var element6 = dom.childAt(element4, [1]);
              var element7 = dom.childAt(element4, [2]);
              var element8 = dom.childAt(element4, [3]);
              var element9 = dom.childAt(element4, [4]);
              var element10 = dom.childAt(element4, [5]);
              var morphs = new Array(22);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createElementMorph(element3);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
              morphs[3] = dom.createMorphAt(element1, 2, 2);
              morphs[4] = dom.createAttrMorph(element5, 'class');
              morphs[5] = dom.createElementMorph(element5);
              morphs[6] = dom.createMorphAt(element5, 2, 2);
              morphs[7] = dom.createAttrMorph(element6, 'class');
              morphs[8] = dom.createElementMorph(element6);
              morphs[9] = dom.createMorphAt(element6, 2, 2);
              morphs[10] = dom.createAttrMorph(element7, 'class');
              morphs[11] = dom.createElementMorph(element7);
              morphs[12] = dom.createMorphAt(element7, 2, 2);
              morphs[13] = dom.createAttrMorph(element8, 'class');
              morphs[14] = dom.createElementMorph(element8);
              morphs[15] = dom.createMorphAt(element8, 2, 2);
              morphs[16] = dom.createAttrMorph(element9, 'class');
              morphs[17] = dom.createElementMorph(element9);
              morphs[18] = dom.createMorphAt(element9, 2, 2);
              morphs[19] = dom.createAttrMorph(element10, 'class');
              morphs[20] = dom.createElementMorph(element10);
              morphs[21] = dom.createMorphAt(element10, 2, 2);
              return morphs;
            },
            statements: [["element", "action", ["goHome"], [], ["loc", [null, [1, 377], [1, 396]]]], ["element", "action", ["goBell"], [], ["loc", [null, [1, 547], [1, 566]]]], ["content", "messagesController.model.length", ["loc", [null, [1, 658], [1, 693]]]], ["content", "pannelTitle", ["loc", [null, [1, 782], [1, 797]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isRoles", ["loc", [null, [1, 920], [1, 927]]]], "active"], [], ["loc", [null, [1, 915], [1, 938]]]]]]], ["element", "action", ["goRoles"], [], ["loc", [null, [1, 871], [1, 891]]]], ["block", "if", [["get", "isRoles", ["loc", [null, [1, 1033], [1, 1040]]]]], [], 0, null, ["loc", [null, [1, 1027], [1, 1110]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isUsers", ["loc", [null, [1, 1166], [1, 1173]]]], "active"], [], ["loc", [null, [1, 1161], [1, 1184]]]]]]], ["element", "action", ["goUsers"], [], ["loc", [null, [1, 1117], [1, 1137]]]], ["block", "if", [["get", "isUsers", ["loc", [null, [1, 1279], [1, 1286]]]]], [], 1, null, ["loc", [null, [1, 1273], [1, 1356]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isProjects", ["loc", [null, [1, 1415], [1, 1425]]]], "active"], [], ["loc", [null, [1, 1410], [1, 1436]]]]]]], ["element", "action", ["goProjects"], [], ["loc", [null, [1, 1363], [1, 1386]]]], ["block", "if", [["get", "isProjects", ["loc", [null, [1, 1531], [1, 1541]]]]], [], 2, null, ["loc", [null, [1, 1525], [1, 1611]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isDepartments", ["loc", [null, [1, 1673], [1, 1686]]]], "active"], [], ["loc", [null, [1, 1668], [1, 1697]]]]]]], ["element", "action", ["goDepartments"], [], ["loc", [null, [1, 1618], [1, 1644]]]], ["block", "if", [["get", "isDepartments", ["loc", [null, [1, 1792], [1, 1805]]]]], [], 3, null, ["loc", [null, [1, 1786], [1, 1875]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isOils", ["loc", [null, [1, 1930], [1, 1936]]]], "active"], [], ["loc", [null, [1, 1925], [1, 1947]]]]]]], ["element", "action", ["goOils"], [], ["loc", [null, [1, 1882], [1, 1901]]]], ["block", "if", [["get", "isOils", ["loc", [null, [1, 2042], [1, 2048]]]]], [], 4, null, ["loc", [null, [1, 2036], [1, 2118]]]], ["attribute", "class", ["concat", ["list-group-item ", ["subexpr", "if", [["get", "isPreference", ["loc", [null, [1, 2179], [1, 2191]]]], "active"], [], ["loc", [null, [1, 2174], [1, 2202]]]]]]], ["element", "action", ["goPreference"], [], ["loc", [null, [1, 2125], [1, 2150]]]], ["block", "if", [["get", "isPreference", ["loc", [null, [1, 2297], [1, 2309]]]]], [], 5, null, ["loc", [null, [1, 2291], [1, 2379]]]]],
            locals: [],
            templates: [child0, child1, child2, child3, child4, child5]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2420
                },
                "end": {
                  "line": 1,
                  "column": 2452
                }
              },
              "moduleName": "htis/templates/setting.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "outlet", ["loc", [null, [1, 2442], [1, 2452]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 163
              },
              "end": {
                "line": 1,
                "column": 2459
              }
            },
            "moduleName": "htis/templates/setting.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 235], [1, 244]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 254], [1, 262]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 270], [1, 276]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 284], [1, 290]]]]], [], []]], 0, null, ["loc", [null, [1, 207], [1, 2420]]]], ["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 2426], [1, 2440]]]]], [], 1, null, ["loc", [null, [1, 2420], [1, 2459]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2478
              },
              "end": {
                "line": 1,
                "column": 2513
              }
            },
            "moduleName": "htis/templates/setting.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "outlet", ["loc", [null, [1, 2503], [1, 2513]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 146
            },
            "end": {
              "line": 1,
              "column": 2520
            }
          },
          "moduleName": "htis/templates/setting.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isLeft", ["subexpr", "@mut", [["get", "equipment.isNotXs", ["loc", [null, [1, 188], [1, 205]]]]], [], []]], 0, null, ["loc", [null, [1, 163], [1, 2478]]]], ["block", "if", [["get", "equipment.isNotXs", ["loc", [null, [1, 2484], [1, 2501]]]]], [], 1, null, ["loc", [null, [1, 2478], [1, 2520]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2520
            },
            "end": {
              "line": 1,
              "column": 2560
            }
          },
          "moduleName": "htis/templates/setting.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "none-powered", [], ["action", "goHome"], ["loc", [null, [1, 2528], [1, 2560]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2573
          }
        },
        "moduleName": "htis/templates/setting.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "setting");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element11, 'class');
        morphs[2] = dom.createMorphAt(element11, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main opacity09 trans-all-05 ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 96], [1, 130]]]], "is-folded"], [], ["loc", [null, [1, 91], [1, 144]]]]]]], ["block", "if", [["get", "isPowered", ["loc", [null, [1, 152], [1, 161]]]]], [], 0, 1, ["loc", [null, [1, 146], [1, 2567]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/departments", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 65
            }
          },
          "moduleName": "htis/templates/setting/departments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["navigable-pane-list"], [], ["loc", [null, [1, 22], [1, 55]]]], ["content", "outlet", ["loc", [null, [1, 55], [1, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 73
              },
              "end": {
                "line": 1,
                "column": 148
              }
            },
            "moduleName": "htis/templates/setting/departments.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["navigable-pane-list"], [], ["loc", [null, [1, 105], [1, 138]]]], ["content", "outlet", ["loc", [null, [1, 138], [1, 148]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 65
            },
            "end": {
              "line": 1,
              "column": 167
            }
          },
          "moduleName": "htis/templates/setting/departments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true], 0, null, ["loc", [null, [1, 73], [1, 167]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 174
          }
        },
        "moduleName": "htis/templates/setting/departments.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 174]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/departments/department", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 523
                  },
                  "end": {
                    "line": 1,
                    "column": 618
                  }
                },
                "moduleName": "htis/templates/setting/departments/department.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 437
                },
                "end": {
                  "line": 1,
                  "column": 625
                }
              },
              "moduleName": "htis/templates/setting/departments/department.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["id", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [1, 490], [1, 500]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 454], [1, 523]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [1, 529], [1, 546]]]]], [], 0, null, ["loc", [null, [1, 523], [1, 625]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 625
                },
                "end": {
                  "line": 1,
                  "column": 682
                }
              },
              "moduleName": "htis/templates/setting/departments/department.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.name", ["loc", [null, [1, 664], [1, 678]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 689
                },
                "end": {
                  "line": 1,
                  "column": 786
                }
              },
              "moduleName": "htis/templates/setting/departments/department.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 763], [1, 780]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1151
                  },
                  "end": {
                    "line": 1,
                    "column": 1253
                  }
                },
                "moduleName": "htis/templates/setting/departments/department.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1017
                },
                "end": {
                  "line": 1,
                  "column": 1260
                }
              },
              "moduleName": "htis/templates/setting/departments/department.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "textarea", [], ["id", "description", "type", "text", "rows", "4", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [1, 1089], [1, 1106]]]]], [], []], "placeholder", "请输入描述信息", "class", "form-control"], ["loc", [null, [1, 1034], [1, 1151]]]], ["block", "if", [["get", "model.errors.description", ["loc", [null, [1, 1157], [1, 1181]]]]], [], 0, null, ["loc", [null, [1, 1151], [1, 1260]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1260
                },
                "end": {
                  "line": 1,
                  "column": 1324
                }
              },
              "moduleName": "htis/templates/setting/departments/department.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.description", ["loc", [null, [1, 1299], [1, 1320]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1331
                },
                "end": {
                  "line": 1,
                  "column": 1435
                }
              },
              "moduleName": "htis/templates/setting/departments/department.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 1412], [1, 1429]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1455
                },
                "end": {
                  "line": 1,
                  "column": 1502
                }
              },
              "moduleName": "htis/templates/setting/departments/department.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 1478], [1, 1502]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 1514
              }
            },
            "moduleName": "htis/templates/setting/departments/department.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "name");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("名称");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "description");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("备注");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element0, [1]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(7);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            morphs[2] = dom.createMorphAt(element2, 1, 1);
            morphs[3] = dom.createAttrMorph(element3, 'class');
            morphs[4] = dom.createMorphAt(element4, 0, 0);
            morphs[5] = dom.createMorphAt(element4, 1, 1);
            morphs[6] = dom.createMorphAt(element0, 2, 2);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.name.length", ["loc", [null, [1, 296], [1, 320]]]], "has-error"], [], ["loc", [null, [1, 291], [1, 334]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 443], [1, 452]]]]], [], 0, 1, ["loc", [null, [1, 437], [1, 689]]]], ["block", "each", [["get", "model.errors.name", ["loc", [null, [1, 697], [1, 714]]]]], [], 2, null, ["loc", [null, [1, 689], [1, 795]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.description.length", ["loc", [null, [1, 862], [1, 893]]]], "has-error"], [], ["loc", [null, [1, 857], [1, 907]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1023], [1, 1032]]]]], [], 3, 4, ["loc", [null, [1, 1017], [1, 1331]]]], ["block", "each", [["get", "model.errors.description", ["loc", [null, [1, 1339], [1, 1363]]]]], [], 5, null, ["loc", [null, [1, 1331], [1, 1444]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 1461], [1, 1476]]]]], [], 6, null, ["loc", [null, [1, 1455], [1, 1509]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 1540
            }
          },
          "moduleName": "htis/templates/setting/departments/department.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "standard-detail-panel", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 116], [1, 121]]]]], [], []], "pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 134], [1, 145]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 156], [1, 165]]]]], [], []], "isLeftButtonNeeded", true], 0, null, ["loc", [null, [1, 85], [1, 1540]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1595
          }
        },
        "moduleName": "htis/templates/setting/departments/department.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 1559]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 1559], [1, 1585]]]], ["content", "outlet", ["loc", [null, [1, 1585], [1, 1595]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/departments/department/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/departments/department/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/departments/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/departments/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/navigable-pane-oils", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 323
                },
                "end": {
                  "line": 1,
                  "column": 619
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-oils.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-chevron-right pull-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "pull-right");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "text-warning");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("/");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "text-danger");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [2]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [0]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [2]), 0, 0);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["content", "item.name", ["loc", [null, [1, 407], [1, 420]]]], ["content", "item.yellow_rate", ["loc", [null, [1, 535], [1, 555]]]], ["content", "item.red_rate", ["loc", [null, [1, 589], [1, 606]]]]],
            locals: ["isChecked"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 639
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-oils.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 350], [1, 354]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [1, 365], [1, 374]]]]], [], []], "action", "goItem"], 0, null, ["loc", [null, [1, 323], [1, 639]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 654
            }
          },
          "moduleName": "htis/templates/setting/navigable-pane-oils.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "list-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 111], [1, 122]]]]], [], []], "isMoreButtonNeeded", ["subexpr", "@mut", [["get", "isMoreButtonNeeded", ["loc", [null, [1, 142], [1, 160]]]]], [], []], "isTopButtonNeeded", ["subexpr", "@mut", [["get", "isTopButtonNeeded", ["loc", [null, [1, 179], [1, 196]]]]], [], []], "isToShowAll", ["subexpr", "@mut", [["get", "isToShowAll", ["loc", [null, [1, 209], [1, 220]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 228], [1, 234]]]]], [], []], "isLeftButtonNeeded", ["subexpr", "@mut", [["get", "equipment.isXs", ["loc", [null, [1, 254], [1, 268]]]]], [], []], "searchKey", ["subexpr", "@mut", [["get", "searchKey", ["loc", [null, [1, 279], [1, 288]]]]], [], []], "content", ["subexpr", "@mut", [["get", "arrangedResult", ["loc", [null, [1, 297], [1, 311]]]]], [], []]], 0, null, ["loc", [null, [1, 85], [1, 654]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 673
          }
        },
        "moduleName": "htis/templates/setting/navigable-pane-oils.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 673]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/navigable-pane-preference", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 167
              },
              "end": {
                "line": 1,
                "column": 363
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "title", "返回");
            dom.setAttribute(el1, "href", "javascript:void(0)");
            dom.setAttribute(el1, "class", "btn-back pull-left");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-arrow-left");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("返回");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element8);
            return morphs;
          },
          statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 192], [1, 211]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 370
              },
              "end": {
                "line": 1,
                "column": 749
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "title", "取消");
            dom.setAttribute(el1, "href", "javascript:void(0)");
            dom.setAttribute(el1, "class", "btn-back pull-right");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-remove");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("取消");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [0]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element7);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["element", "action", ["cancel"], [], ["loc", [null, [1, 390], [1, 409]]]], ["inline", "spin-button", [], ["action", "save", "isIcon", true, "loadedIcon", "glyphicon-floppy-disk", "isLoading", ["subexpr", "@mut", [["get", "model.isSaving", ["loc", [null, [1, 643], [1, 657]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "model.isUnSavable", ["loc", [null, [1, 669], [1, 686]]]]], [], []], "title", "保存", "class", "btn-save pull-right margin-right is-blank"], ["loc", [null, [1, 558], [1, 749]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 749
              },
              "end": {
                "line": 1,
                "column": 926
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "title", "修改");
            dom.setAttribute(el1, "href", "javascript:void(0)");
            dom.setAttribute(el1, "class", "btn-back pull-right");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "glyphicon glyphicon-edit");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("修改");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [0]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["element", "action", ["goEdit"], [], ["loc", [null, [1, 760], [1, 779]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1543
                      },
                      "end": {
                        "line": 1,
                        "column": 1651
                      }
                    },
                    "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-success");
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 1631], [1, 1644]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1651
                      },
                      "end": {
                        "line": 1,
                        "column": 1704
                      }
                    },
                    "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-muted");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 1684], [1, 1697]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1416
                    },
                    "end": {
                      "line": 1,
                      "column": 1775
                    }
                  },
                  "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "hidden-xs pull-right text-muted");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  dom.insertBoundary(fragment, 0);
                  return morphs;
                },
                statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 1549], [1, 1558]]]]], [], 0, 1, ["loc", [null, [1, 1543], [1, 1711]]]], ["content", "hourTag", ["loc", [null, [1, 1757], [1, 1768]]]]],
                locals: ["isChecked"],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1399
                  },
                  "end": {
                    "line": 1,
                    "column": 1795
                  }
                },
                "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "radio-list-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 1443], [1, 1447]]]]], [], []], "contentValueKey", "value", "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 1482], [1, 1487]]]]], [], []], "isSmall", false, "action", "setShortcutHour"], 0, null, ["loc", [null, [1, 1416], [1, 1795]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1795
                  },
                  "end": {
                    "line": 1,
                    "column": 1893
                  }
                },
                "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "hidden-xs pull-right text-muted");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [0]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element0, 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "item.name", ["loc", [null, [1, 1809], [1, 1822]]]], ["content", "hourTag", ["loc", [null, [1, 1868], [1, 1879]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1265
                },
                "end": {
                  "line": 1,
                  "column": 1900
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isEditing", ["loc", [null, [1, 1405], [1, 1414]]]]], [], 0, 1, ["loc", [null, [1, 1399], [1, 1900]]]]],
            locals: ["item", "value"],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1949
                  },
                  "end": {
                    "line": 1,
                    "column": 2055
                  }
                },
                "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "help-block text-danger");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "error.message", ["loc", [null, [1, 2032], [1, 2049]]]]],
              locals: ["error"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1915
                },
                "end": {
                  "line": 1,
                  "column": 2064
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "model.errors.shortcut_hour", ["loc", [null, [1, 1957], [1, 1983]]]]], [], 0, null, ["loc", [null, [1, 1949], [1, 2064]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2064
                },
                "end": {
                  "line": 1,
                  "column": 2133
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static text-muted");
              var el2 = dom.createTextNode("快速打印加油单时以几点为分隔线");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2502
                  },
                  "end": {
                    "line": 1,
                    "column": 2604
                  }
                },
                "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2366
                },
                "end": {
                  "line": 1,
                  "column": 2611
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "number-input", [], ["id", "finish_hour", "value", ["subexpr", "@mut", [["get", "model.finish_hour", ["loc", [null, [1, 2421], [1, 2438]]]]], [], []], "dot", 0, "symbol", "+", "placeholder", "输入大于0的整数值", "class", "form-control"], ["loc", [null, [1, 2383], [1, 2502]]]], ["block", "if", [["get", "model.errors.finish_hour", ["loc", [null, [1, 2508], [1, 2532]]]]], [], 0, null, ["loc", [null, [1, 2502], [1, 2611]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2611
                },
                "end": {
                  "line": 1,
                  "column": 2730
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "hidden-xs pull-right text-muted");
              var el3 = dom.createTextNode("小时");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.finish_hour", ["loc", [null, [1, 2650], [1, 2671]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2769
                  },
                  "end": {
                    "line": 1,
                    "column": 2873
                  }
                },
                "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "help-block text-danger");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "error.message", ["loc", [null, [1, 2850], [1, 2867]]]]],
              locals: ["error"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2737
                },
                "end": {
                  "line": 1,
                  "column": 2882
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "model.errors.finish_hour", ["loc", [null, [1, 2777], [1, 2801]]]]], [], 0, null, ["loc", [null, [1, 2769], [1, 2882]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2882
                },
                "end": {
                  "line": 1,
                  "column": 2957
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static text-muted");
              var el2 = dom.createTextNode("系统提前多少小时给申请单相关用户发结束通知");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child7 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2975
                },
                "end": {
                  "line": 1,
                  "column": 3022
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 2998], [1, 3022]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 985
              },
              "end": {
                "line": 1,
                "column": 3034
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "shortcut_hour");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("整点分隔线");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "finish_hour");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("结束通知时限");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var element2 = dom.childAt(element1, [0]);
            var element3 = dom.childAt(element2, [1]);
            var element4 = dom.childAt(element1, [1]);
            var element5 = dom.childAt(element4, [1]);
            var morphs = new Array(7);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createMorphAt(element3, 0, 0);
            morphs[2] = dom.createMorphAt(element3, 1, 1);
            morphs[3] = dom.createAttrMorph(element4, 'class');
            morphs[4] = dom.createMorphAt(element5, 0, 0);
            morphs[5] = dom.createMorphAt(element5, 1, 1);
            morphs[6] = dom.createMorphAt(element1, 2, 2);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.shortcut_hour.length", ["loc", [null, [1, 1103], [1, 1136]]]], "has-error"], [], ["loc", [null, [1, 1098], [1, 1150]]]]]]], ["block", "radio-list", [], ["content", ["subexpr", "@mut", [["get", "hourList", ["loc", [null, [1, 1287], [1, 1295]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.shortcut_hour", ["loc", [null, [1, 1302], [1, 1321]]]]], [], []], "contentValueKey", "value", "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 1356], [1, 1365]]]]], [], []], "isVertical", true], 0, null, ["loc", [null, [1, 1265], [1, 1915]]]], ["block", "if", [["get", "model.errors.shortcut_hour", ["loc", [null, [1, 1921], [1, 1947]]]]], [], 1, 2, ["loc", [null, [1, 1915], [1, 2140]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.finish_hour.length", ["loc", [null, [1, 2207], [1, 2238]]]], "has-error"], [], ["loc", [null, [1, 2202], [1, 2252]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 2372], [1, 2381]]]]], [], 3, 4, ["loc", [null, [1, 2366], [1, 2737]]]], ["block", "if", [["get", "model.errors.finish_hour", ["loc", [null, [1, 2743], [1, 2767]]]]], [], 5, 6, ["loc", [null, [1, 2737], [1, 2964]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 2981], [1, 2996]]]]], [], 7, null, ["loc", [null, [1, 2975], [1, 3029]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7]
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 3034
              },
              "end": {
                "line": 1,
                "column": 3206
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "empty-box");
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "glyphicon glyphicon-road");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "empty-title");
            var el4 = dom.createTextNode("没有找到数据");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 3225
            }
          },
          "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "panel");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-heading text-center");
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "panel-title");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "panel-scroll");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [0]);
          var element10 = dom.childAt(element9, [0, 0]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element10, 0, 0);
          morphs[1] = dom.createMorphAt(element10, 1, 1);
          morphs[2] = dom.createMorphAt(element10, 2, 2);
          morphs[3] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 173], [1, 187]]]]], [], 0, null, ["loc", [null, [1, 167], [1, 370]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 376], [1, 385]]]]], [], 1, 2, ["loc", [null, [1, 370], [1, 933]]]], ["content", "pannelTitle", ["loc", [null, [1, 933], [1, 948]]]], ["block", "if", [["get", "model", ["loc", [null, [1, 991], [1, 996]]]]], [], 3, 4, ["loc", [null, [1, 985], [1, 3213]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3280
          }
        },
        "moduleName": "htis/templates/setting/navigable-pane-preference.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 3244]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 3244], [1, 3270]]]], ["content", "outlet", ["loc", [null, [1, 3270], [1, 3280]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/navigable-pane-projects", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 508
                  },
                  "end": {
                    "line": 1,
                    "column": 567
                  }
                },
                "moduleName": "htis/templates/setting/navigable-pane-projects.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "text-success");
                var el2 = dom.createTextNode("已启用");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 567
                  },
                  "end": {
                    "line": 1,
                    "column": 611
                  }
                },
                "moduleName": "htis/templates/setting/navigable-pane-projects.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "text-danger");
                var el2 = dom.createTextNode("已暂停");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 323
                },
                "end": {
                  "line": 1,
                  "column": 624
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-projects.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-chevron-right pull-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "pull-right");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["content", "item.name", ["loc", [null, [1, 407], [1, 420]]]], ["block", "if", [["get", "item.is_enable", ["loc", [null, [1, 514], [1, 528]]]]], [], 0, 1, ["loc", [null, [1, 508], [1, 618]]]]],
            locals: ["isChecked"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 644
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-projects.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 350], [1, 354]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [1, 365], [1, 374]]]]], [], []], "action", "goItem"], 0, null, ["loc", [null, [1, 323], [1, 644]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 659
            }
          },
          "moduleName": "htis/templates/setting/navigable-pane-projects.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "list-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 111], [1, 122]]]]], [], []], "isMoreButtonNeeded", ["subexpr", "@mut", [["get", "isMoreButtonNeeded", ["loc", [null, [1, 142], [1, 160]]]]], [], []], "isTopButtonNeeded", ["subexpr", "@mut", [["get", "isTopButtonNeeded", ["loc", [null, [1, 179], [1, 196]]]]], [], []], "isToShowAll", ["subexpr", "@mut", [["get", "isToShowAll", ["loc", [null, [1, 209], [1, 220]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 228], [1, 234]]]]], [], []], "isLeftButtonNeeded", ["subexpr", "@mut", [["get", "equipment.isXs", ["loc", [null, [1, 254], [1, 268]]]]], [], []], "searchKey", ["subexpr", "@mut", [["get", "searchKey", ["loc", [null, [1, 279], [1, 288]]]]], [], []], "content", ["subexpr", "@mut", [["get", "arrangedResult", ["loc", [null, [1, 297], [1, 311]]]]], [], []]], 0, null, ["loc", [null, [1, 85], [1, 659]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 678
          }
        },
        "moduleName": "htis/templates/setting/navigable-pane-projects.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 678]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/navigable-pane-users", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 359
                },
                "end": {
                  "line": 1,
                  "column": 568
                }
              },
              "moduleName": "htis/templates/setting/navigable-pane-users.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-chevron-right pull-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "pull-right");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["content", "item.name", ["loc", [null, [1, 443], [1, 456]]]], ["content", "item.role.name", ["loc", [null, [1, 544], [1, 562]]]]],
            locals: ["isChecked"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 588
              }
            },
            "moduleName": "htis/templates/setting/navigable-pane-users.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 386], [1, 390]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [1, 401], [1, 410]]]]], [], []], "action", "goItem"], 0, null, ["loc", [null, [1, 359], [1, 588]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 603
            }
          },
          "moduleName": "htis/templates/setting/navigable-pane-users.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "list-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 111], [1, 122]]]]], [], []], "isMoreButtonNeeded", ["subexpr", "@mut", [["get", "isMoreButtonNeeded", ["loc", [null, [1, 142], [1, 160]]]]], [], []], "isTopButtonNeeded", ["subexpr", "@mut", [["get", "isTopButtonNeeded", ["loc", [null, [1, 179], [1, 196]]]]], [], []], "isToShowAll", ["subexpr", "@mut", [["get", "isToShowAll", ["loc", [null, [1, 209], [1, 220]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 228], [1, 234]]]]], [], []], "isLeftButtonNeeded", ["subexpr", "@mut", [["get", "equipment.isXs", ["loc", [null, [1, 254], [1, 268]]]]], [], []], "searchKey", ["subexpr", "@mut", [["get", "searchKey", ["loc", [null, [1, 279], [1, 288]]]]], [], []], "searchPlaceholder", ["subexpr", "@mut", [["get", "searchPlaceholder", ["loc", [null, [1, 307], [1, 324]]]]], [], []], "content", ["subexpr", "@mut", [["get", "arrangedResult", ["loc", [null, [1, 333], [1, 347]]]]], [], []]], 0, null, ["loc", [null, [1, 85], [1, 603]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 622
          }
        },
        "moduleName": "htis/templates/setting/navigable-pane-users.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 622]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/oils", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 73
            }
          },
          "moduleName": "htis/templates/setting/oils.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["setting/navigable-pane-oils"], [], ["loc", [null, [1, 22], [1, 63]]]], ["content", "outlet", ["loc", [null, [1, 63], [1, 73]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 81
              },
              "end": {
                "line": 1,
                "column": 164
              }
            },
            "moduleName": "htis/templates/setting/oils.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["setting/navigable-pane-oils"], [], ["loc", [null, [1, 113], [1, 154]]]], ["content", "outlet", ["loc", [null, [1, 154], [1, 164]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 73
            },
            "end": {
              "line": 1,
              "column": 183
            }
          },
          "moduleName": "htis/templates/setting/oils.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true], 0, null, ["loc", [null, [1, 81], [1, 183]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 190
          }
        },
        "moduleName": "htis/templates/setting/oils.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 190]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/oils/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/oils/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/oils/oil", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 523
                  },
                  "end": {
                    "line": 1,
                    "column": 618
                  }
                },
                "moduleName": "htis/templates/setting/oils/oil.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 437
                },
                "end": {
                  "line": 1,
                  "column": 625
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["id", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [1, 490], [1, 500]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 454], [1, 523]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [1, 529], [1, 546]]]]], [], 0, null, ["loc", [null, [1, 523], [1, 625]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 625
                },
                "end": {
                  "line": 1,
                  "column": 682
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.name", ["loc", [null, [1, 664], [1, 678]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 689
                },
                "end": {
                  "line": 1,
                  "column": 786
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 763], [1, 780]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1150
                  },
                  "end": {
                    "line": 1,
                    "column": 1252
                  }
                },
                "moduleName": "htis/templates/setting/oils/oil.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1021
                },
                "end": {
                  "line": 1,
                  "column": 1259
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "number-input", [], ["id", "yellow_rate", "value", ["subexpr", "@mut", [["get", "model.yellow_rate", ["loc", [null, [1, 1076], [1, 1093]]]]], [], []], "dot", 2, "placeholder", "输入数值，支持小数点后两位", "class", "form-control"], ["loc", [null, [1, 1038], [1, 1150]]]], ["block", "if", [["get", "model.errors.yellow_rate", ["loc", [null, [1, 1156], [1, 1180]]]]], [], 0, null, ["loc", [null, [1, 1150], [1, 1259]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1259
                },
                "end": {
                  "line": 1,
                  "column": 1323
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.yellow_rate", ["loc", [null, [1, 1298], [1, 1319]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1330
                },
                "end": {
                  "line": 1,
                  "column": 1434
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 1411], [1, 1428]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child6 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1786
                  },
                  "end": {
                    "line": 1,
                    "column": 1885
                  }
                },
                "moduleName": "htis/templates/setting/oils/oil.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1663
                },
                "end": {
                  "line": 1,
                  "column": 1892
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "number-input", [], ["id", "red_rate", "value", ["subexpr", "@mut", [["get", "model.red_rate", ["loc", [null, [1, 1715], [1, 1729]]]]], [], []], "dot", 2, "placeholder", "输入数值，支持小数点后两位", "class", "form-control"], ["loc", [null, [1, 1680], [1, 1786]]]], ["block", "if", [["get", "model.errors.red_rate", ["loc", [null, [1, 1792], [1, 1813]]]]], [], 0, null, ["loc", [null, [1, 1786], [1, 1892]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child7 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1892
                },
                "end": {
                  "line": 1,
                  "column": 1953
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.red_rate", ["loc", [null, [1, 1931], [1, 1949]]]]],
            locals: [],
            templates: []
          };
        })();
        var child8 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1960
                },
                "end": {
                  "line": 1,
                  "column": 2061
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2038], [1, 2055]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child9 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2426
                  },
                  "end": {
                    "line": 1,
                    "column": 2528
                  }
                },
                "moduleName": "htis/templates/setting/oils/oil.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2292
                },
                "end": {
                  "line": 1,
                  "column": 2535
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "textarea", [], ["id", "description", "type", "text", "rows", "4", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [1, 2364], [1, 2381]]]]], [], []], "placeholder", "请输入描述信息", "class", "form-control"], ["loc", [null, [1, 2309], [1, 2426]]]], ["block", "if", [["get", "model.errors.description", ["loc", [null, [1, 2432], [1, 2456]]]]], [], 0, null, ["loc", [null, [1, 2426], [1, 2535]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child10 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2535
                },
                "end": {
                  "line": 1,
                  "column": 2599
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.description", ["loc", [null, [1, 2574], [1, 2595]]]]],
            locals: [],
            templates: []
          };
        })();
        var child11 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2606
                },
                "end": {
                  "line": 1,
                  "column": 2710
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2687], [1, 2704]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child12 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2730
                },
                "end": {
                  "line": 1,
                  "column": 2777
                }
              },
              "moduleName": "htis/templates/setting/oils/oil.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 2753], [1, 2777]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 2789
              }
            },
            "moduleName": "htis/templates/setting/oils/oil.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "name");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("名称");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "yellow_rate");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("黄色超标油耗");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "red_rate");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("红色超标油耗");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "description");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("备注");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element0, [1]);
            var element4 = dom.childAt(element3, [1]);
            var element5 = dom.childAt(element0, [2]);
            var element6 = dom.childAt(element5, [1]);
            var element7 = dom.childAt(element0, [3]);
            var element8 = dom.childAt(element7, [1]);
            var morphs = new Array(13);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            morphs[2] = dom.createMorphAt(element2, 1, 1);
            morphs[3] = dom.createAttrMorph(element3, 'class');
            morphs[4] = dom.createMorphAt(element4, 0, 0);
            morphs[5] = dom.createMorphAt(element4, 1, 1);
            morphs[6] = dom.createAttrMorph(element5, 'class');
            morphs[7] = dom.createMorphAt(element6, 0, 0);
            morphs[8] = dom.createMorphAt(element6, 1, 1);
            morphs[9] = dom.createAttrMorph(element7, 'class');
            morphs[10] = dom.createMorphAt(element8, 0, 0);
            morphs[11] = dom.createMorphAt(element8, 1, 1);
            morphs[12] = dom.createMorphAt(element0, 4, 4);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.name.length", ["loc", [null, [1, 296], [1, 320]]]], "has-error"], [], ["loc", [null, [1, 291], [1, 334]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 443], [1, 452]]]]], [], 0, 1, ["loc", [null, [1, 437], [1, 689]]]], ["block", "each", [["get", "model.errors.name", ["loc", [null, [1, 697], [1, 714]]]]], [], 2, null, ["loc", [null, [1, 689], [1, 795]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.yellow_rate.length", ["loc", [null, [1, 862], [1, 893]]]], "has-error"], [], ["loc", [null, [1, 857], [1, 907]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1027], [1, 1036]]]]], [], 3, 4, ["loc", [null, [1, 1021], [1, 1330]]]], ["block", "each", [["get", "model.errors.yellow_rate", ["loc", [null, [1, 1338], [1, 1362]]]]], [], 5, null, ["loc", [null, [1, 1330], [1, 1443]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.red_rate.length", ["loc", [null, [1, 1510], [1, 1538]]]], "has-error"], [], ["loc", [null, [1, 1505], [1, 1552]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1669], [1, 1678]]]]], [], 6, 7, ["loc", [null, [1, 1663], [1, 1960]]]], ["block", "each", [["get", "model.errors.red_rate", ["loc", [null, [1, 1968], [1, 1989]]]]], [], 8, null, ["loc", [null, [1, 1960], [1, 2070]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.description.length", ["loc", [null, [1, 2137], [1, 2168]]]], "has-error"], [], ["loc", [null, [1, 2132], [1, 2182]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 2298], [1, 2307]]]]], [], 9, 10, ["loc", [null, [1, 2292], [1, 2606]]]], ["block", "each", [["get", "model.errors.description", ["loc", [null, [1, 2614], [1, 2638]]]]], [], 11, null, ["loc", [null, [1, 2606], [1, 2719]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 2736], [1, 2751]]]]], [], 12, null, ["loc", [null, [1, 2730], [1, 2784]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 2815
            }
          },
          "moduleName": "htis/templates/setting/oils/oil.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "standard-detail-panel", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 116], [1, 121]]]]], [], []], "pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 134], [1, 145]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 156], [1, 165]]]]], [], []], "isLeftButtonNeeded", true], 0, null, ["loc", [null, [1, 85], [1, 2815]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2870
          }
        },
        "moduleName": "htis/templates/setting/oils/oil.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 2834]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 2834], [1, 2860]]]], ["content", "outlet", ["loc", [null, [1, 2860], [1, 2870]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/oils/oil/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/oils/oil/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/preference", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 79
            }
          },
          "moduleName": "htis/templates/setting/preference.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["setting/navigable-pane-preference"], [], ["loc", [null, [1, 22], [1, 69]]]], ["content", "outlet", ["loc", [null, [1, 69], [1, 79]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 87
              },
              "end": {
                "line": 1,
                "column": 176
              }
            },
            "moduleName": "htis/templates/setting/preference.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["setting/navigable-pane-preference"], [], ["loc", [null, [1, 119], [1, 166]]]], ["content", "outlet", ["loc", [null, [1, 166], [1, 176]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 79
            },
            "end": {
              "line": 1,
              "column": 195
            }
          },
          "moduleName": "htis/templates/setting/preference.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true], 0, null, ["loc", [null, [1, 87], [1, 195]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 202
          }
        },
        "moduleName": "htis/templates/setting/preference.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 202]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/preference/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/preference/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/projects", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 77
            }
          },
          "moduleName": "htis/templates/setting/projects.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["setting/navigable-pane-projects"], [], ["loc", [null, [1, 22], [1, 67]]]], ["content", "outlet", ["loc", [null, [1, 67], [1, 77]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 172
              }
            },
            "moduleName": "htis/templates/setting/projects.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["setting/navigable-pane-projects"], [], ["loc", [null, [1, 117], [1, 162]]]], ["content", "outlet", ["loc", [null, [1, 162], [1, 172]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 77
            },
            "end": {
              "line": 1,
              "column": 191
            }
          },
          "moduleName": "htis/templates/setting/projects.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true], 0, null, ["loc", [null, [1, 85], [1, 191]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 198
          }
        },
        "moduleName": "htis/templates/setting/projects.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 198]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/projects/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/projects/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/projects/project", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 523
                  },
                  "end": {
                    "line": 1,
                    "column": 618
                  }
                },
                "moduleName": "htis/templates/setting/projects/project.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 437
                },
                "end": {
                  "line": 1,
                  "column": 625
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["id", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [1, 490], [1, 500]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 454], [1, 523]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [1, 529], [1, 546]]]]], [], 0, null, ["loc", [null, [1, 523], [1, 625]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 625
                },
                "end": {
                  "line": 1,
                  "column": 682
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.name", ["loc", [null, [1, 664], [1, 678]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 689
                },
                "end": {
                  "line": 1,
                  "column": 786
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 763], [1, 780]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1206
                      },
                      "end": {
                        "line": 1,
                        "column": 1314
                      }
                    },
                    "moduleName": "htis/templates/setting/projects/project.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-success");
                    var el2 = dom.createElement("span");
                    dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 1294], [1, 1307]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 1314
                      },
                      "end": {
                        "line": 1,
                        "column": 1367
                      }
                    },
                    "moduleName": "htis/templates/setting/projects/project.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-muted");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 1347], [1, 1360]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1097
                    },
                    "end": {
                      "line": 1,
                      "column": 1374
                    }
                  },
                  "moduleName": "htis/templates/setting/projects/project.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 1212], [1, 1221]]]]], [], 0, 1, ["loc", [null, [1, 1206], [1, 1374]]]]],
                locals: ["isChecked"],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1080
                  },
                  "end": {
                    "line": 1,
                    "column": 1394
                  }
                },
                "moduleName": "htis/templates/setting/projects/project.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "radio-list-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 1124], [1, 1128]]]]], [], []], "contentValueKey", "value", "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 1163], [1, 1168]]]]], [], []], "action", "setIsEnable"], 0, null, ["loc", [null, [1, 1097], [1, 1394]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1402
                    },
                    "end": {
                      "line": 1,
                      "column": 1467
                    }
                  },
                  "moduleName": "htis/templates/setting/projects/project.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "text-success");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                  return morphs;
                },
                statements: [["content", "item.name", ["loc", [null, [1, 1447], [1, 1460]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1467
                    },
                    "end": {
                      "line": 1,
                      "column": 1521
                    }
                  },
                  "moduleName": "htis/templates/setting/projects/project.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "text-danger");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                  return morphs;
                },
                statements: [["content", "item.name", ["loc", [null, [1, 1501], [1, 1514]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1394
                  },
                  "end": {
                    "line": 1,
                    "column": 1528
                  }
                },
                "moduleName": "htis/templates/setting/projects/project.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "item.value", ["loc", [null, [1, 1408], [1, 1418]]]]], [], 0, 1, ["loc", [null, [1, 1402], [1, 1528]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 964
                },
                "end": {
                  "line": 1,
                  "column": 1535
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isEditing", ["loc", [null, [1, 1086], [1, 1095]]]]], [], 0, 1, ["loc", [null, [1, 1080], [1, 1535]]]]],
            locals: ["item", "value"],
            templates: [child0, child1]
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1906
                  },
                  "end": {
                    "line": 1,
                    "column": 2008
                  }
                },
                "moduleName": "htis/templates/setting/projects/project.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1772
                },
                "end": {
                  "line": 1,
                  "column": 2015
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "textarea", [], ["id", "description", "type", "text", "rows", "4", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [1, 1844], [1, 1861]]]]], [], []], "placeholder", "请输入描述信息", "class", "form-control"], ["loc", [null, [1, 1789], [1, 1906]]]], ["block", "if", [["get", "model.errors.description", ["loc", [null, [1, 1912], [1, 1936]]]]], [], 0, null, ["loc", [null, [1, 1906], [1, 2015]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2015
                },
                "end": {
                  "line": 1,
                  "column": 2079
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.description", ["loc", [null, [1, 2054], [1, 2075]]]]],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2086
                },
                "end": {
                  "line": 1,
                  "column": 2190
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2167], [1, 2184]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child7 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2210
                },
                "end": {
                  "line": 1,
                  "column": 2257
                }
              },
              "moduleName": "htis/templates/setting/projects/project.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 2233], [1, 2257]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 2269
              }
            },
            "moduleName": "htis/templates/setting/projects/project.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "name");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("名称");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "is_enable");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("状态");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "description");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("备注");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element0, [2]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            morphs[2] = dom.createMorphAt(element2, 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
            morphs[4] = dom.createAttrMorph(element3, 'class');
            morphs[5] = dom.createMorphAt(element4, 0, 0);
            morphs[6] = dom.createMorphAt(element4, 1, 1);
            morphs[7] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.name.length", ["loc", [null, [1, 296], [1, 320]]]], "has-error"], [], ["loc", [null, [1, 291], [1, 334]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 443], [1, 452]]]]], [], 0, 1, ["loc", [null, [1, 437], [1, 689]]]], ["block", "each", [["get", "model.errors.name", ["loc", [null, [1, 697], [1, 714]]]]], [], 2, null, ["loc", [null, [1, 689], [1, 795]]]], ["block", "radio-list", [], ["content", ["subexpr", "@mut", [["get", "enableList", ["loc", [null, [1, 986], [1, 996]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.is_enable", ["loc", [null, [1, 1003], [1, 1018]]]]], [], []], "contentValueKey", "value", "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 1053], [1, 1062]]]]], [], []]], 3, null, ["loc", [null, [1, 964], [1, 1550]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.description.length", ["loc", [null, [1, 1617], [1, 1648]]]], "has-error"], [], ["loc", [null, [1, 1612], [1, 1662]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1778], [1, 1787]]]]], [], 4, 5, ["loc", [null, [1, 1772], [1, 2086]]]], ["block", "each", [["get", "model.errors.description", ["loc", [null, [1, 2094], [1, 2118]]]]], [], 6, null, ["loc", [null, [1, 2086], [1, 2199]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 2216], [1, 2231]]]]], [], 7, null, ["loc", [null, [1, 2210], [1, 2264]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 2295
            }
          },
          "moduleName": "htis/templates/setting/projects/project.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "standard-detail-panel", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 116], [1, 121]]]]], [], []], "pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 134], [1, 145]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 156], [1, 165]]]]], [], []], "isLeftButtonNeeded", true], 0, null, ["loc", [null, [1, 85], [1, 2295]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2350
          }
        },
        "moduleName": "htis/templates/setting/projects/project.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 2314]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 2314], [1, 2340]]]], ["content", "outlet", ["loc", [null, [1, 2340], [1, 2350]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/projects/project/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/projects/project/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/roles", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 65
            }
          },
          "moduleName": "htis/templates/setting/roles.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["navigable-pane-list"], [], ["loc", [null, [1, 22], [1, 55]]]], ["content", "outlet", ["loc", [null, [1, 55], [1, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 73
              },
              "end": {
                "line": 1,
                "column": 148
              }
            },
            "moduleName": "htis/templates/setting/roles.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["navigable-pane-list"], [], ["loc", [null, [1, 105], [1, 138]]]], ["content", "outlet", ["loc", [null, [1, 138], [1, 148]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 65
            },
            "end": {
              "line": 1,
              "column": 167
            }
          },
          "moduleName": "htis/templates/setting/roles.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true], 0, null, ["loc", [null, [1, 73], [1, 167]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 174
          }
        },
        "moduleName": "htis/templates/setting/roles.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 174]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/roles/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/roles/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/roles/role", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 523
                  },
                  "end": {
                    "line": 1,
                    "column": 618
                  }
                },
                "moduleName": "htis/templates/setting/roles/role.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 437
                },
                "end": {
                  "line": 1,
                  "column": 625
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["id", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [1, 490], [1, 500]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 454], [1, 523]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [1, 529], [1, 546]]]]], [], 0, null, ["loc", [null, [1, 523], [1, 625]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 625
                },
                "end": {
                  "line": 1,
                  "column": 682
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.name", ["loc", [null, [1, 664], [1, 678]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 689
                },
                "end": {
                  "line": 1,
                  "column": 786
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 763], [1, 780]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1149
                    },
                    "end": {
                      "line": 1,
                      "column": 1229
                    }
                  },
                  "moduleName": "htis/templates/setting/roles/role.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-eye-open text-success");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1229
                    },
                    "end": {
                      "line": 1,
                      "column": 1300
                    }
                  },
                  "moduleName": "htis/templates/setting/roles/role.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-eye-close text-danger");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1040
                  },
                  "end": {
                    "line": 1,
                    "column": 1393
                  }
                },
                "moduleName": "htis/templates/setting/roles/role.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "hidden-xs pull-right text-muted");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 1155], [1, 1164]]]]], [], 0, 1, ["loc", [null, [1, 1149], [1, 1307]]]], ["content", "item.name", ["loc", [null, [1, 1307], [1, 1320]]]], ["content", "item.description", ["loc", [null, [1, 1366], [1, 1386]]]]],
              locals: ["isChecked"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 960
                },
                "end": {
                  "line": 1,
                  "column": 1416
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "checkbox-list-item", [], ["value", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 1068], [1, 1072]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [1, 1083], [1, 1092]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 1103], [1, 1112]]]]], [], []], "action", "checkPower"], 0, null, ["loc", [null, [1, 1040], [1, 1416]]]]],
            locals: ["item", "selection"],
            templates: [child0]
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1790
                  },
                  "end": {
                    "line": 1,
                    "column": 1892
                  }
                },
                "moduleName": "htis/templates/setting/roles/role.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1656
                },
                "end": {
                  "line": 1,
                  "column": 1899
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "textarea", [], ["id", "description", "type", "text", "rows", "4", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [1, 1728], [1, 1745]]]]], [], []], "placeholder", "请输入描述信息", "class", "form-control"], ["loc", [null, [1, 1673], [1, 1790]]]], ["block", "if", [["get", "model.errors.description", ["loc", [null, [1, 1796], [1, 1820]]]]], [], 0, null, ["loc", [null, [1, 1790], [1, 1899]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1899
                },
                "end": {
                  "line": 1,
                  "column": 1963
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.description", ["loc", [null, [1, 1938], [1, 1959]]]]],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1970
                },
                "end": {
                  "line": 1,
                  "column": 2074
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2051], [1, 2068]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child7 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2094
                },
                "end": {
                  "line": 1,
                  "column": 2141
                }
              },
              "moduleName": "htis/templates/setting/roles/role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 2117], [1, 2141]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 2153
              }
            },
            "moduleName": "htis/templates/setting/roles/role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "name");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("名称");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group has-feedback");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "power");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("权限");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "description");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("备注");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element0, [2]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            morphs[2] = dom.createMorphAt(element2, 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
            morphs[4] = dom.createAttrMorph(element3, 'class');
            morphs[5] = dom.createMorphAt(element4, 0, 0);
            morphs[6] = dom.createMorphAt(element4, 1, 1);
            morphs[7] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.name.length", ["loc", [null, [1, 296], [1, 320]]]], "has-error"], [], ["loc", [null, [1, 291], [1, 334]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 443], [1, 452]]]]], [], 0, 1, ["loc", [null, [1, 437], [1, 689]]]], ["block", "each", [["get", "model.errors.name", ["loc", [null, [1, 697], [1, 714]]]]], [], 2, null, ["loc", [null, [1, 689], [1, 795]]]], ["block", "checkbox-list", [], ["content", ["subexpr", "@mut", [["get", "all_powers", ["loc", [null, [1, 985], [1, 995]]]]], [], []], "selection", ["subexpr", "@mut", [["get", "model.powers", ["loc", [null, [1, 1006], [1, 1018]]]]], [], []]], 3, null, ["loc", [null, [1, 960], [1, 1434]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.description.length", ["loc", [null, [1, 1501], [1, 1532]]]], "has-error"], [], ["loc", [null, [1, 1496], [1, 1546]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1662], [1, 1671]]]]], [], 4, 5, ["loc", [null, [1, 1656], [1, 1970]]]], ["block", "each", [["get", "model.errors.description", ["loc", [null, [1, 1978], [1, 2002]]]]], [], 6, null, ["loc", [null, [1, 1970], [1, 2083]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 2100], [1, 2115]]]]], [], 7, null, ["loc", [null, [1, 2094], [1, 2148]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 2179
            }
          },
          "moduleName": "htis/templates/setting/roles/role.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "standard-detail-panel", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 116], [1, 121]]]]], [], []], "pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 134], [1, 145]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 156], [1, 165]]]]], [], []], "isLeftButtonNeeded", true], 0, null, ["loc", [null, [1, 85], [1, 2179]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2234
          }
        },
        "moduleName": "htis/templates/setting/roles/role.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 2198]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 2198], [1, 2224]]]], ["content", "outlet", ["loc", [null, [1, 2224], [1, 2234]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/setting/roles/role/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/roles/role/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/users", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 74
            }
          },
          "moduleName": "htis/templates/setting/users.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "partial", ["setting/navigable-pane-users"], [], ["loc", [null, [1, 22], [1, 64]]]], ["content", "outlet", ["loc", [null, [1, 64], [1, 74]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 82
              },
              "end": {
                "line": 1,
                "column": 166
              }
            },
            "moduleName": "htis/templates/setting/users.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "partial", ["setting/navigable-pane-users"], [], ["loc", [null, [1, 114], [1, 156]]]], ["content", "outlet", ["loc", [null, [1, 156], [1, 166]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 74
            },
            "end": {
              "line": 1,
              "column": 185
            }
          },
          "moduleName": "htis/templates/setting/users.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "container-wrap", [], ["isRight", true], 0, null, ["loc", [null, [1, 82], [1, 185]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 192
          }
        },
        "moduleName": "htis/templates/setting/users.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "equipment.isXs", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [1, 192]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/users/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/users/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/users/user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 523
                  },
                  "end": {
                    "line": 1,
                    "column": 618
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 437
                },
                "end": {
                  "line": 1,
                  "column": 625
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["id", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [1, 490], [1, 500]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 454], [1, 523]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [1, 529], [1, 546]]]]], [], 0, null, ["loc", [null, [1, 523], [1, 625]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 625
                },
                "end": {
                  "line": 1,
                  "column": 682
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.name", ["loc", [null, [1, 664], [1, 678]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 689
                },
                "end": {
                  "line": 1,
                  "column": 786
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 763], [1, 780]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1093
                  },
                  "end": {
                    "line": 1,
                    "column": 1189
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1006
                },
                "end": {
                  "line": 1,
                  "column": 1196
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["id", "phone", "type", "tel", "value", ["subexpr", "@mut", [["get", "model.phone", ["loc", [null, [1, 1059], [1, 1070]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 1023], [1, 1093]]]], ["block", "if", [["get", "model.errors.phone", ["loc", [null, [1, 1099], [1, 1117]]]]], [], 0, null, ["loc", [null, [1, 1093], [1, 1196]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1196
                },
                "end": {
                  "line": 1,
                  "column": 1254
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.phone", ["loc", [null, [1, 1235], [1, 1250]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1261
                },
                "end": {
                  "line": 1,
                  "column": 1359
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 1336], [1, 1353]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child6 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1666
                  },
                  "end": {
                    "line": 1,
                    "column": 1762
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1578
                },
                "end": {
                  "line": 1,
                  "column": 1769
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["id", "email", "type", "text", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [1, 1632], [1, 1643]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 1595], [1, 1666]]]], ["block", "if", [["get", "model.errors.email", ["loc", [null, [1, 1672], [1, 1690]]]]], [], 0, null, ["loc", [null, [1, 1666], [1, 1769]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child7 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1769
                },
                "end": {
                  "line": 1,
                  "column": 1827
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.email", ["loc", [null, [1, 1808], [1, 1823]]]]],
            locals: [],
            templates: []
          };
        })();
        var child8 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1834
                },
                "end": {
                  "line": 1,
                  "column": 1932
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 1909], [1, 1926]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child9 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2250
                  },
                  "end": {
                    "line": 1,
                    "column": 2345
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2149
                },
                "end": {
                  "line": 1,
                  "column": 2352
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "pick-up", [], ["id", "role", "value", ["subexpr", "@mut", [["get", "model.role.name", ["loc", [null, [1, 2192], [1, 2207]]]]], [], []], "isPicking", ["subexpr", "@mut", [["get", "isPicking", ["loc", [null, [1, 2218], [1, 2227]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 2166], [1, 2250]]]], ["block", "if", [["get", "model.errors.role", ["loc", [null, [1, 2256], [1, 2273]]]]], [], 0, null, ["loc", [null, [1, 2250], [1, 2352]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child10 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2352
                },
                "end": {
                  "line": 1,
                  "column": 2414
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.role.name", ["loc", [null, [1, 2391], [1, 2410]]]]],
            locals: [],
            templates: []
          };
        })();
        var child11 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2421
                },
                "end": {
                  "line": 1,
                  "column": 2518
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 2495], [1, 2512]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child12 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2994
                        },
                        "end": {
                          "line": 1,
                          "column": 3102
                        }
                      },
                      "moduleName": "htis/templates/setting/users/user.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "text-success");
                      var el2 = dom.createElement("span");
                      dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                      return morphs;
                    },
                    statements: [["content", "item.name", ["loc", [null, [1, 3082], [1, 3095]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 3102
                        },
                        "end": {
                          "line": 1,
                          "column": 3155
                        }
                      },
                      "moduleName": "htis/templates/setting/users/user.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "text-muted");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                      return morphs;
                    },
                    statements: [["content", "item.name", ["loc", [null, [1, 3135], [1, 3148]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2881
                      },
                      "end": {
                        "line": 1,
                        "column": 3162
                      }
                    },
                    "moduleName": "htis/templates/setting/users/user.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 3000], [1, 3009]]]]], [], 0, 1, ["loc", [null, [1, 2994], [1, 3162]]]]],
                  locals: ["isChecked"],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 2864
                    },
                    "end": {
                      "line": 1,
                      "column": 3182
                    }
                  },
                  "moduleName": "htis/templates/setting/users/user.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "radio-list-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 2908], [1, 2912]]]]], [], []], "contentValueKey", "value", "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 2947], [1, 2952]]]]], [], []], "action", "setIsSignNeeded"], 0, null, ["loc", [null, [1, 2881], [1, 3182]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3190
                      },
                      "end": {
                        "line": 1,
                        "column": 3255
                      }
                    },
                    "moduleName": "htis/templates/setting/users/user.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-success");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 3235], [1, 3248]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3255
                      },
                      "end": {
                        "line": 1,
                        "column": 3309
                      }
                    },
                    "moduleName": "htis/templates/setting/users/user.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-danger");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 3289], [1, 3302]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3182
                    },
                    "end": {
                      "line": 1,
                      "column": 3316
                    }
                  },
                  "moduleName": "htis/templates/setting/users/user.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "item.value", ["loc", [null, [1, 3196], [1, 3206]]]]], [], 0, 1, ["loc", [null, [1, 3190], [1, 3316]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2737
                  },
                  "end": {
                    "line": 1,
                    "column": 3323
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isEditing", ["loc", [null, [1, 2870], [1, 2879]]]]], [], 0, 1, ["loc", [null, [1, 2864], [1, 3323]]]]],
              locals: ["item", "value"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2538
                },
                "end": {
                  "line": 1,
                  "column": 3349
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "is_sign_needed");
              dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
              var el3 = dom.createTextNode("加油签字");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
              return morphs;
            },
            statements: [["block", "radio-list", [], ["content", ["subexpr", "@mut", [["get", "isSignNeededList", ["loc", [null, [1, 2759], [1, 2775]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.is_sign_needed", ["loc", [null, [1, 2782], [1, 2802]]]]], [], []], "contentValueKey", "value", "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 2837], [1, 2846]]]]], [], []]], 0, null, ["loc", [null, [1, 2737], [1, 3338]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child13 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 3779
                        },
                        "end": {
                          "line": 1,
                          "column": 3887
                        }
                      },
                      "moduleName": "htis/templates/setting/users/user.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "text-success");
                      var el2 = dom.createElement("span");
                      dom.setAttribute(el2, "class", "glyphicon glyphicon-ok");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                      return morphs;
                    },
                    statements: [["content", "item.name", ["loc", [null, [1, 3867], [1, 3880]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 3887
                        },
                        "end": {
                          "line": 1,
                          "column": 3940
                        }
                      },
                      "moduleName": "htis/templates/setting/users/user.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "text-muted");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                      return morphs;
                    },
                    statements: [["content", "item.name", ["loc", [null, [1, 3920], [1, 3933]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3670
                      },
                      "end": {
                        "line": 1,
                        "column": 3947
                      }
                    },
                    "moduleName": "htis/templates/setting/users/user.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 3785], [1, 3794]]]]], [], 0, 1, ["loc", [null, [1, 3779], [1, 3947]]]]],
                  locals: ["isChecked"],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3653
                    },
                    "end": {
                      "line": 1,
                      "column": 3967
                    }
                  },
                  "moduleName": "htis/templates/setting/users/user.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "radio-list-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 3697], [1, 3701]]]]], [], []], "contentValueKey", "value", "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 3736], [1, 3741]]]]], [], []], "action", "setIsEnable"], 0, null, ["loc", [null, [1, 3670], [1, 3967]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3975
                      },
                      "end": {
                        "line": 1,
                        "column": 4040
                      }
                    },
                    "moduleName": "htis/templates/setting/users/user.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-success");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 4020], [1, 4033]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4040
                      },
                      "end": {
                        "line": 1,
                        "column": 4094
                      }
                    },
                    "moduleName": "htis/templates/setting/users/user.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "text-danger");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.name", ["loc", [null, [1, 4074], [1, 4087]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3967
                    },
                    "end": {
                      "line": 1,
                      "column": 4101
                    }
                  },
                  "moduleName": "htis/templates/setting/users/user.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "item.value", ["loc", [null, [1, 3981], [1, 3991]]]]], [], 0, 1, ["loc", [null, [1, 3975], [1, 4101]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3537
                  },
                  "end": {
                    "line": 1,
                    "column": 4108
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isEditing", ["loc", [null, [1, 3659], [1, 3668]]]]], [], 0, 1, ["loc", [null, [1, 3653], [1, 4108]]]]],
              locals: ["item", "value"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3356
                },
                "end": {
                  "line": 1,
                  "column": 4134
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "list-group-item form-group has-feedback");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "is_enable");
              dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
              var el3 = dom.createTextNode("状态");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
              return morphs;
            },
            statements: [["block", "radio-list", [], ["content", ["subexpr", "@mut", [["get", "enableList", ["loc", [null, [1, 3559], [1, 3569]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.is_enable", ["loc", [null, [1, 3576], [1, 3591]]]]], [], []], "contentValueKey", "value", "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 3626], [1, 3635]]]]], [], []]], 0, null, ["loc", [null, [1, 3537], [1, 4123]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child14 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 4484
                  },
                  "end": {
                    "line": 1,
                    "column": 4584
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4354
                },
                "end": {
                  "line": 1,
                  "column": 4591
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "textarea", [], ["id", "signature", "type", "text", "rows", "4", "value", ["subexpr", "@mut", [["get", "model.signature", ["loc", [null, [1, 4424], [1, 4439]]]]], [], []], "placeholder", "请输入个性签名", "class", "form-control"], ["loc", [null, [1, 4371], [1, 4484]]]], ["block", "if", [["get", "model.errors.signature", ["loc", [null, [1, 4490], [1, 4512]]]]], [], 0, null, ["loc", [null, [1, 4484], [1, 4591]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child15 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4591
                },
                "end": {
                  "line": 1,
                  "column": 4653
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "form-control-static");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.signature", ["loc", [null, [1, 4630], [1, 4649]]]]],
            locals: [],
            templates: []
          };
        })();
        var child16 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4660
                },
                "end": {
                  "line": 1,
                  "column": 4762
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 4739], [1, 4756]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        var child17 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4782
                },
                "end": {
                  "line": 1,
                  "column": 4829
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "partial", ["detail-fix"], [], ["loc", [null, [1, 4805], [1, 4829]]]]],
            locals: [],
            templates: []
          };
        })();
        var child18 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 4841
                },
                "end": {
                  "line": 1,
                  "column": 4976
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "list-group list-full");
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "btn btn-info btn-block");
              var el3 = dom.createTextNode("重置密码");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0, 0]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element0);
              return morphs;
            },
            statements: [["element", "action", ["goResetpwd"], [], ["loc", [null, [1, 4903], [1, 4926]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 4987
              }
            },
            "moduleName": "htis/templates/setting/users/user.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "name");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("名称");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "phone");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("手机号");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "email");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("邮箱");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "role");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("角色");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "signature");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("个性签名");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var element2 = dom.childAt(element1, [0]);
            var element3 = dom.childAt(element2, [1]);
            var element4 = dom.childAt(element1, [1]);
            var element5 = dom.childAt(element4, [1]);
            var element6 = dom.childAt(element1, [2]);
            var element7 = dom.childAt(element6, [1]);
            var element8 = dom.childAt(element1, [3]);
            var element9 = dom.childAt(element8, [1]);
            var element10 = dom.childAt(element1, [6]);
            var element11 = dom.childAt(element10, [1]);
            var morphs = new Array(19);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createMorphAt(element3, 0, 0);
            morphs[2] = dom.createMorphAt(element3, 1, 1);
            morphs[3] = dom.createAttrMorph(element4, 'class');
            morphs[4] = dom.createMorphAt(element5, 0, 0);
            morphs[5] = dom.createMorphAt(element5, 1, 1);
            morphs[6] = dom.createAttrMorph(element6, 'class');
            morphs[7] = dom.createMorphAt(element7, 0, 0);
            morphs[8] = dom.createMorphAt(element7, 1, 1);
            morphs[9] = dom.createAttrMorph(element8, 'class');
            morphs[10] = dom.createMorphAt(element9, 0, 0);
            morphs[11] = dom.createMorphAt(element9, 1, 1);
            morphs[12] = dom.createMorphAt(element1, 4, 4);
            morphs[13] = dom.createMorphAt(element1, 5, 5);
            morphs[14] = dom.createAttrMorph(element10, 'class');
            morphs[15] = dom.createMorphAt(element11, 0, 0);
            morphs[16] = dom.createMorphAt(element11, 1, 1);
            morphs[17] = dom.createMorphAt(element1, 7, 7);
            morphs[18] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.name.length", ["loc", [null, [1, 296], [1, 320]]]], "has-error"], [], ["loc", [null, [1, 291], [1, 334]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 443], [1, 452]]]]], [], 0, 1, ["loc", [null, [1, 437], [1, 689]]]], ["block", "each", [["get", "model.errors.name", ["loc", [null, [1, 697], [1, 714]]]]], [], 2, null, ["loc", [null, [1, 689], [1, 795]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.phone.length", ["loc", [null, [1, 862], [1, 887]]]], "has-error"], [], ["loc", [null, [1, 857], [1, 901]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1012], [1, 1021]]]]], [], 3, 4, ["loc", [null, [1, 1006], [1, 1261]]]], ["block", "each", [["get", "model.errors.phone", ["loc", [null, [1, 1269], [1, 1287]]]]], [], 5, null, ["loc", [null, [1, 1261], [1, 1368]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.email.length", ["loc", [null, [1, 1435], [1, 1460]]]], "has-error"], [], ["loc", [null, [1, 1430], [1, 1474]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 1584], [1, 1593]]]]], [], 6, 7, ["loc", [null, [1, 1578], [1, 1834]]]], ["block", "each", [["get", "model.errors.email", ["loc", [null, [1, 1842], [1, 1860]]]]], [], 8, null, ["loc", [null, [1, 1834], [1, 1941]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.role.length", ["loc", [null, [1, 2008], [1, 2032]]]], "has-error"], [], ["loc", [null, [1, 2003], [1, 2046]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 2155], [1, 2164]]]]], [], 9, 10, ["loc", [null, [1, 2149], [1, 2421]]]], ["block", "each", [["get", "model.errors.role", ["loc", [null, [1, 2429], [1, 2446]]]]], [], 11, null, ["loc", [null, [1, 2421], [1, 2527]]]], ["block", "if", [["get", "model.isBillScannerPowered", ["loc", [null, [1, 2544], [1, 2570]]]]], [], 12, null, ["loc", [null, [1, 2538], [1, 3356]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [1, 3366], [1, 3377]]]]], [], 13, null, ["loc", [null, [1, 3356], [1, 4145]]]], ["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.signature.length", ["loc", [null, [1, 4201], [1, 4230]]]], "has-error"], [], ["loc", [null, [1, 4196], [1, 4244]]]]]]], ["block", "if", [["get", "isEditing", ["loc", [null, [1, 4360], [1, 4369]]]]], [], 14, 15, ["loc", [null, [1, 4354], [1, 4660]]]], ["block", "each", [["get", "model.errors.signature", ["loc", [null, [1, 4668], [1, 4690]]]]], [], 16, null, ["loc", [null, [1, 4660], [1, 4771]]]], ["block", "if", [["get", "isNeedToShowFix", ["loc", [null, [1, 4788], [1, 4803]]]]], [], 17, null, ["loc", [null, [1, 4782], [1, 4836]]]], ["block", "unless", [["get", "isEditing", ["loc", [null, [1, 4851], [1, 4860]]]]], [], 18, null, ["loc", [null, [1, 4841], [1, 4987]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 5013
            }
          },
          "moduleName": "htis/templates/setting/users/user.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "standard-detail-panel", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 116], [1, 121]]]]], [], []], "pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 134], [1, 145]]]]], [], []], "isEditing", ["subexpr", "@mut", [["get", "isEditing", ["loc", [null, [1, 156], [1, 165]]]]], [], []], "isLeftButtonNeeded", true], 0, null, ["loc", [null, [1, 85], [1, 5013]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 5352
                    },
                    "end": {
                      "line": 1,
                      "column": 5437
                    }
                  },
                  "moduleName": "htis/templates/setting/users/user.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-ok text-success pull-right");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 5271
                  },
                  "end": {
                    "line": 1,
                    "column": 5457
                  }
                },
                "moduleName": "htis/templates/setting/users/user.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "isChecked", ["loc", [null, [1, 5358], [1, 5367]]]]], [], 0, null, ["loc", [null, [1, 5352], [1, 5444]]]], ["content", "item.name", ["loc", [null, [1, 5444], [1, 5457]]]]],
              locals: ["isChecked"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 5112
                },
                "end": {
                  "line": 1,
                  "column": 5477
                }
              },
              "moduleName": "htis/templates/setting/users/user.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-panel-item", [], ["content", ["subexpr", "@mut", [["get", "item", ["loc", [null, [1, 5298], [1, 5302]]]]], [], []], "compareto", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 5313], [1, 5318]]]]], [], []], "action", "setRole"], 0, null, ["loc", [null, [1, 5271], [1, 5477]]]]],
            locals: ["item", "value"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 5049
              },
              "end": {
                "line": 1,
                "column": 5492
              }
            },
            "moduleName": "htis/templates/setting/users/user.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "list-panel", [], ["pannelTitle", "选择角色", "leftButtonAction", "clearPop", "isRightButtonNeeded", false, "isSearchBoxNeeded", false, "content", ["subexpr", "@mut", [["get", "roles", ["loc", [null, [1, 5231], [1, 5236]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.role", ["loc", [null, [1, 5243], [1, 5253]]]]], [], []]], 0, null, ["loc", [null, [1, 5112], [1, 5492]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 5032
            },
            "end": {
              "line": 1,
              "column": 5508
            }
          },
          "moduleName": "htis/templates/setting/users/user.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPicking", ["loc", [null, [1, 5074], [1, 5083]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 5093], [1, 5110]]]]], [], []]], 0, null, ["loc", [null, [1, 5049], [1, 5508]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 5551
          }
        },
        "moduleName": "htis/templates/setting/users/user.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 5032]]]], ["block", "if", [["get", "isPicking", ["loc", [null, [1, 5038], [1, 5047]]]]], [], 1, null, ["loc", [null, [1, 5032], [1, 5515]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 5515], [1, 5541]]]], ["content", "outlet", ["loc", [null, [1, 5541], [1, 5551]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/setting/users/user/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "htis/templates/setting/users/user/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("htis/templates/setting/users/user/resetpwd", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 495
                },
                "end": {
                  "line": 1,
                  "column": 598
                }
              },
              "moduleName": "htis/templates/setting/users/user/resetpwd.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-remove form-control-feedback");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 605
                },
                "end": {
                  "line": 1,
                  "column": 710
                }
              },
              "moduleName": "htis/templates/setting/users/user/resetpwd.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "help-block text-danger");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "error.message", ["loc", [null, [1, 687], [1, 704]]]]],
            locals: ["error"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 79
              },
              "end": {
                "line": 1,
                "column": 1062
              }
            },
            "moduleName": "htis/templates/setting/users/user/resetpwd.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "new_password");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("将密码重置为");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "help-block text-center");
            var el3 = dom.createTextNode("保存后用户[");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("]的密码将被重置为:");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "class", "btn btn-default btn-block");
            var el3 = dom.createTextNode("取消");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0, 0]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [0]);
            var element4 = dom.childAt(element2, [2]);
            var morphs = new Array(8);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            morphs[3] = dom.createMorphAt(element1, 2, 2);
            morphs[4] = dom.createMorphAt(element3, 1, 1);
            morphs[5] = dom.createMorphAt(element3, 3, 3);
            morphs[6] = dom.createMorphAt(element2, 1, 1);
            morphs[7] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["list-group-item form-group has-feedback ", ["subexpr", "if", [["get", "model.errors.new_password.length", ["loc", [null, [1, 249], [1, 281]]]], "has-error"], [], ["loc", [null, [1, 244], [1, 295]]]]]]], ["inline", "input", [], ["id", "new_password", "type", "text", "value", ["subexpr", "@mut", [["get", "model.new_password", ["loc", [null, [1, 454], [1, 472]]]]], [], []], "class", "form-control"], ["loc", [null, [1, 410], [1, 495]]]], ["block", "if", [["get", "model.errors.new_password", ["loc", [null, [1, 501], [1, 526]]]]], [], 0, null, ["loc", [null, [1, 495], [1, 605]]]], ["block", "each", [["get", "model.errors.new_password", ["loc", [null, [1, 613], [1, 638]]]]], [], 1, null, ["loc", [null, [1, 605], [1, 719]]]], ["content", "model.userObject.name", ["loc", [null, [1, 810], [1, 835]]]], ["content", "model.new_password", ["loc", [null, [1, 845], [1, 867]]]], ["inline", "spin-button", [], ["action", "save", "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [1, 911], [1, 919]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isUnSavable", ["loc", [null, [1, 929], [1, 940]]]]], [], []], "title", "保存", "class", "btn btn-info btn-block"], ["loc", [null, [1, 873], [1, 984]]]], ["element", "action", ["cancel"], [], ["loc", [null, [1, 992], [1, 1011]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 1079
            }
          },
          "moduleName": "htis/templates/setting/users/user/resetpwd.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "detail-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 107], [1, 118]]]]], [], []], "isLeftButtonNeeded", true], 0, null, ["loc", [null, [1, 79], [1, 1079]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1134
          }
        },
        "moduleName": "htis/templates/setting/users/user/resetpwd.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", true, "isBack", false, "isHide", false], 0, null, ["loc", [null, [1, 0], [1, 1098]]]], ["inline", "partial", ["common-alert"], [], ["loc", [null, [1, 1098], [1, 1124]]]], ["content", "outlet", ["loc", [null, [1, 1124], [1, 1134]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/shortcut", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1605
                  },
                  "end": {
                    "line": 1,
                    "column": 1731
                  }
                },
                "moduleName": "htis/templates/shortcut.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "help-block text-danger text-center");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "error.message", ["loc", [null, [1, 1708], [1, 1725]]]]],
              locals: ["error"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1545
                },
                "end": {
                  "line": 1,
                  "column": 1836
                }
              },
              "moduleName": "htis/templates/shortcut.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "list-group-item");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "title", "再试一次");
              dom.setAttribute(el1, "class", "btn btn-info btn-block");
              var el2 = dom.createTextNode("再试一次");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element20 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              morphs[1] = dom.createElementMorph(element20);
              return morphs;
            },
            statements: [["block", "each", [["get", "errorsForReports.server_side_error", ["loc", [null, [1, 1613], [1, 1647]]]]], [], 0, null, ["loc", [null, [1, 1605], [1, 1740]]]], ["element", "action", ["loadReports"], [], ["loc", [null, [1, 1754], [1, 1778]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1844
                  },
                  "end": {
                    "line": 1,
                    "column": 1989
                  }
                },
                "moduleName": "htis/templates/shortcut.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "empty-box");
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "glyphicon glyphicon-hourglass");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "empty-title");
                var el3 = dom.createTextNode("Loading...");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2145
                      },
                      "end": {
                        "line": 1,
                        "column": 2222
                      }
                    },
                    "moduleName": "htis/templates/shortcut.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("th");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element13 = dom.childAt(fragment, [0]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element13, 'colspan');
                    morphs[1] = dom.createMorphAt(element13, 0, 0);
                    return morphs;
                  },
                  statements: [["attribute", "colspan", ["concat", [["get", "departments.length", ["loc", [null, [1, 2183], [1, 2201]]]]]]], ["content", "oil.name", ["loc", [null, [1, 2205], [1, 2217]]]]],
                  locals: ["oil"],
                  templates: []
                };
              })();
              var child1 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2302
                        },
                        "end": {
                          "line": 1,
                          "column": 2367
                        }
                      },
                      "moduleName": "htis/templates/shortcut.hbs"
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("th");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                      return morphs;
                    },
                    statements: [["content", "department.name", ["loc", [null, [1, 2343], [1, 2362]]]]],
                    locals: ["department"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2279
                      },
                      "end": {
                        "line": 1,
                        "column": 2376
                      }
                    },
                    "moduleName": "htis/templates/shortcut.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "each", [["get", "departments", ["loc", [null, [1, 2310], [1, 2321]]]]], [], 0, null, ["loc", [null, [1, 2302], [1, 2376]]]]],
                  locals: ["oil"],
                  templates: [child0]
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2385
                      },
                      "end": {
                        "line": 1,
                        "column": 2429
                      }
                    },
                    "moduleName": "htis/templates/shortcut.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("th");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "oil.name", ["loc", [null, [1, 2412], [1, 2424]]]]],
                  locals: ["oil"],
                  templates: []
                };
              })();
              var child3 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "revision": "Ember@1.13.11",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 1,
                            "column": 2541
                          },
                          "end": {
                            "line": 1,
                            "column": 2729
                          }
                        },
                        "moduleName": "htis/templates/shortcut.hbs"
                      },
                      arity: 1,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createElement("td");
                        var el2 = dom.createComment("");
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var element11 = dom.childAt(fragment, [0]);
                        var morphs = new Array(2);
                        morphs[0] = dom.createAttrMorph(element11, 'title');
                        morphs[1] = dom.createMorphAt(element11, 0, 0);
                        return morphs;
                      },
                      statements: [["attribute", "title", ["concat", ["项目[", ["get", "project.name", ["loc", [null, [1, 2594], [1, 2606]]]], "]，油品[", ["get", "oil.name", ["loc", [null, [1, 2615], [1, 2623]]]], "]，部门[", ["get", "department.name", ["loc", [null, [1, 2632], [1, 2647]]]], "]"]]], ["inline", "report-compute", [["get", "reports", ["loc", [null, [1, 2669], [1, 2676]]]]], ["project", ["subexpr", "@mut", [["get", "project", ["loc", [null, [1, 2685], [1, 2692]]]]], [], []], "oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 2697], [1, 2700]]]]], [], []], "department", ["subexpr", "@mut", [["get", "department", ["loc", [null, [1, 2712], [1, 2722]]]]], [], []]], ["loc", [null, [1, 2652], [1, 2724]]]]],
                      locals: ["department"],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2518
                        },
                        "end": {
                          "line": 1,
                          "column": 2738
                        }
                      },
                      "moduleName": "htis/templates/shortcut.hbs"
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "each", [["get", "departments", ["loc", [null, [1, 2549], [1, 2560]]]]], [], 0, null, ["loc", [null, [1, 2541], [1, 2738]]]]],
                    locals: ["oil"],
                    templates: [child0]
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2747
                        },
                        "end": {
                          "line": 1,
                          "column": 2875
                        }
                      },
                      "moduleName": "htis/templates/shortcut.hbs"
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("td");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element10 = dom.childAt(fragment, [0]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element10, 'title');
                      morphs[1] = dom.createMorphAt(element10, 0, 0);
                      return morphs;
                    },
                    statements: [["attribute", "title", ["concat", ["项目[", ["get", "project.name", ["loc", [null, [1, 2786], [1, 2798]]]], "]，油品[", ["get", "oil.name", ["loc", [null, [1, 2807], [1, 2815]]]], "]"]]], ["inline", "report-compute", [["get", "reports", ["loc", [null, [1, 2837], [1, 2844]]]]], ["project", ["subexpr", "@mut", [["get", "project", ["loc", [null, [1, 2853], [1, 2860]]]]], [], []], "oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 2865], [1, 2868]]]]], [], []]], ["loc", [null, [1, 2820], [1, 2870]]]]],
                    locals: ["oil"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2458
                      },
                      "end": {
                        "line": 1,
                        "column": 2889
                      }
                    },
                    "moduleName": "htis/templates/shortcut.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("tr");
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element12 = dom.childAt(fragment, [0]);
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(dom.childAt(element12, [0]), 0, 0);
                    morphs[1] = dom.createMorphAt(element12, 1, 1);
                    morphs[2] = dom.createMorphAt(element12, 2, 2);
                    return morphs;
                  },
                  statements: [["content", "project.name", ["loc", [null, [1, 2497], [1, 2513]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2526], [1, 2530]]]]], [], 0, null, ["loc", [null, [1, 2518], [1, 2747]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2755], [1, 2759]]]]], [], 1, null, ["loc", [null, [1, 2747], [1, 2884]]]]],
                  locals: ["project"],
                  templates: [child0, child1]
                };
              })();
              var child4 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.11",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 1,
                          "column": 2953
                        },
                        "end": {
                          "line": 1,
                          "column": 3104
                        }
                      },
                      "moduleName": "htis/templates/shortcut.hbs"
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createElement("th");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element9 = dom.childAt(fragment, [0]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element9, 'title');
                      morphs[1] = dom.createMorphAt(element9, 0, 0);
                      return morphs;
                    },
                    statements: [["attribute", "title", ["concat", ["油品[", ["get", "oil.name", ["loc", [null, [1, 3006], [1, 3014]]]], "]，部门[", ["get", "department.name", ["loc", [null, [1, 3023], [1, 3038]]]], "]"]]], ["inline", "report-compute", [["get", "reports", ["loc", [null, [1, 3060], [1, 3067]]]]], ["oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 3072], [1, 3075]]]]], [], []], "department", ["subexpr", "@mut", [["get", "department", ["loc", [null, [1, 3087], [1, 3097]]]]], [], []]], ["loc", [null, [1, 3043], [1, 3099]]]]],
                    locals: ["department"],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 2930
                      },
                      "end": {
                        "line": 1,
                        "column": 3113
                      }
                    },
                    "moduleName": "htis/templates/shortcut.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "each", [["get", "departments", ["loc", [null, [1, 2961], [1, 2972]]]]], [], 0, null, ["loc", [null, [1, 2953], [1, 3113]]]]],
                  locals: ["oil"],
                  templates: [child0]
                };
              })();
              var child5 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 3122
                      },
                      "end": {
                        "line": 1,
                        "column": 3213
                      }
                    },
                    "moduleName": "htis/templates/shortcut.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("th");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element8 = dom.childAt(fragment, [0]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element8, 'title');
                    morphs[1] = dom.createMorphAt(element8, 0, 0);
                    return morphs;
                  },
                  statements: [["attribute", "title", ["concat", ["油品[", ["get", "oil.name", ["loc", [null, [1, 3161], [1, 3169]]]], "]"]]], ["inline", "report-compute", [["get", "reports", ["loc", [null, [1, 3191], [1, 3198]]]]], ["oil", ["subexpr", "@mut", [["get", "oil", ["loc", [null, [1, 3203], [1, 3206]]]]], [], []]], ["loc", [null, [1, 3174], [1, 3208]]]]],
                  locals: ["oil"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 1997
                    },
                    "end": {
                      "line": 1,
                      "column": 3249
                    }
                  },
                  "moduleName": "htis/templates/shortcut.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "table-responsive reports-box");
                  var el2 = dom.createElement("table");
                  dom.setAttribute(el2, "class", "table table-bordered table2excel");
                  var el3 = dom.createElement("thead");
                  var el4 = dom.createElement("tr");
                  var el5 = dom.createElement("th");
                  dom.setAttribute(el5, "rowspan", "2");
                  var el6 = dom.createTextNode("项目名称");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("开票数量");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("tr");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("tbody");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("tfoot");
                  var el4 = dom.createElement("tr");
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("合计数量");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element14 = dom.childAt(fragment, [0, 0]);
                  var element15 = dom.childAt(element14, [0]);
                  var element16 = dom.childAt(element15, [0]);
                  var element17 = dom.childAt(element16, [2]);
                  var element18 = dom.childAt(element15, [1]);
                  var element19 = dom.childAt(element14, [2, 0]);
                  var morphs = new Array(7);
                  morphs[0] = dom.createMorphAt(element16, 1, 1);
                  morphs[1] = dom.createAttrMorph(element17, 'colspan');
                  morphs[2] = dom.createMorphAt(element18, 0, 0);
                  morphs[3] = dom.createMorphAt(element18, 1, 1);
                  morphs[4] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
                  morphs[5] = dom.createMorphAt(element19, 1, 1);
                  morphs[6] = dom.createMorphAt(element19, 2, 2);
                  return morphs;
                },
                statements: [["block", "each", [["get", "oils", ["loc", [null, [1, 2153], [1, 2157]]]]], [], 0, null, ["loc", [null, [1, 2145], [1, 2231]]]], ["attribute", "colspan", ["concat", [["get", "oils.length", ["loc", [null, [1, 2246], [1, 2257]]]]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2287], [1, 2291]]]]], [], 1, null, ["loc", [null, [1, 2279], [1, 2385]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2393], [1, 2397]]]]], [], 2, null, ["loc", [null, [1, 2385], [1, 2438]]]], ["block", "each", [["get", "projects", ["loc", [null, [1, 2466], [1, 2474]]]]], [], 3, null, ["loc", [null, [1, 2458], [1, 2898]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 2938], [1, 2942]]]]], [], 4, null, ["loc", [null, [1, 2930], [1, 3122]]]], ["block", "each", [["get", "oils", ["loc", [null, [1, 3130], [1, 3134]]]]], [], 5, null, ["loc", [null, [1, 3122], [1, 3222]]]]],
                locals: [],
                templates: [child0, child1, child2, child3, child4, child5]
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3249
                    },
                    "end": {
                      "line": 1,
                      "column": 3367
                    }
                  },
                  "moduleName": "htis/templates/shortcut.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "empty-box");
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "glyphicon glyphicon-road");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "empty-title");
                  var el3 = dom.createTextNode("没有找到数据");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1989
                  },
                  "end": {
                    "line": 1,
                    "column": 3374
                  }
                },
                "moduleName": "htis/templates/shortcut.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "reports.length", ["loc", [null, [1, 2003], [1, 2017]]]]], [], 0, 1, ["loc", [null, [1, 1997], [1, 3374]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1836
                },
                "end": {
                  "line": 1,
                  "column": 3381
                }
              },
              "moduleName": "htis/templates/shortcut.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isSearchingReports", ["loc", [null, [1, 1850], [1, 1868]]]]], [], 0, 1, ["loc", [null, [1, 1844], [1, 3381]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3555
                },
                "end": {
                  "line": 1,
                  "column": 3612
                }
              },
              "moduleName": "htis/templates/shortcut.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "badge");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "totalCount", ["loc", [null, [1, 3592], [1, 3606]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3736
                  },
                  "end": {
                    "line": 1,
                    "column": 3860
                  }
                },
                "moduleName": "htis/templates/shortcut.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "help-block text-danger text-center");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                return morphs;
              },
              statements: [["content", "error.message", ["loc", [null, [1, 3837], [1, 3854]]]]],
              locals: ["error"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3678
                },
                "end": {
                  "line": 1,
                  "column": 3963
                }
              },
              "moduleName": "htis/templates/shortcut.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "list-group-item");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "title", "再试一次");
              dom.setAttribute(el1, "class", "btn btn-info btn-block");
              var el2 = dom.createTextNode("再试一次");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              morphs[1] = dom.createElementMorph(element7);
              return morphs;
            },
            statements: [["block", "each", [["get", "errorsForBills.server_side_error", ["loc", [null, [1, 3744], [1, 3776]]]]], [], 0, null, ["loc", [null, [1, 3736], [1, 3869]]]], ["element", "action", ["loadBills"], [], ["loc", [null, [1, 3883], [1, 3905]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 3971
                  },
                  "end": {
                    "line": 1,
                    "column": 4114
                  }
                },
                "moduleName": "htis/templates/shortcut.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "empty-box");
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "glyphicon glyphicon-hourglass");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "empty-title");
                var el3 = dom.createTextNode("Loading...");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.11",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 1,
                        "column": 4375
                      },
                      "end": {
                        "line": 1,
                        "column": 4784
                      }
                    },
                    "moduleName": "htis/templates/shortcut.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("tr");
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("[");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("]");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("td");
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element4 = dom.childAt(fragment, [0]);
                    var element5 = dom.childAt(element4, [1]);
                    var element6 = dom.childAt(element4, [6]);
                    var morphs = new Array(13);
                    morphs[0] = dom.createMorphAt(dom.childAt(element4, [0]), 0, 0);
                    morphs[1] = dom.createMorphAt(element5, 0, 0);
                    morphs[2] = dom.createMorphAt(element5, 2, 2);
                    morphs[3] = dom.createMorphAt(dom.childAt(element4, [2]), 0, 0);
                    morphs[4] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
                    morphs[5] = dom.createMorphAt(dom.childAt(element4, [4]), 0, 0);
                    morphs[6] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
                    morphs[7] = dom.createAttrMorph(element6, 'class');
                    morphs[8] = dom.createMorphAt(element6, 0, 0);
                    morphs[9] = dom.createMorphAt(dom.childAt(element4, [7]), 0, 0);
                    morphs[10] = dom.createMorphAt(dom.childAt(element4, [8]), 0, 0);
                    morphs[11] = dom.createMorphAt(dom.childAt(element4, [9]), 0, 0);
                    morphs[12] = dom.createMorphAt(dom.childAt(element4, [10]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.id", ["loc", [null, [1, 4408], [1, 4419]]]], ["content", "item.car.number", ["loc", [null, [1, 4428], [1, 4447]]]], ["inline", "substr", [["get", "item.car.vin", ["loc", [null, [1, 4457], [1, 4469]]]]], ["start", -6], ["loc", [null, [1, 4448], [1, 4480]]]], ["content", "item.project.name", ["loc", [null, [1, 4490], [1, 4511]]]], ["content", "item.department.name", ["loc", [null, [1, 4520], [1, 4544]]]], ["content", "item.oil.name", ["loc", [null, [1, 4553], [1, 4570]]]], ["content", "item.volume", ["loc", [null, [1, 4579], [1, 4594]]]], ["attribute", "class", ["concat", ["text-", ["get", "item.rateColor", ["loc", [null, [1, 4617], [1, 4631]]]]]]], ["content", "item.rate", ["loc", [null, [1, 4635], [1, 4648]]]], ["content", "item.mileage", ["loc", [null, [1, 4657], [1, 4673]]]], ["content", "item.oiler.name", ["loc", [null, [1, 4682], [1, 4701]]]], ["inline", "timefmt", [["get", "item.time", ["loc", [null, [1, 4720], [1, 4729]]]]], [], ["loc", [null, [1, 4710], [1, 4731]]]], ["inline", "base64-img", [["get", "item.signature.sign", ["loc", [null, [1, 4753], [1, 4772]]]]], [], ["loc", [null, [1, 4740], [1, 4774]]]]],
                  locals: ["item"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 4122
                    },
                    "end": {
                      "line": 1,
                      "column": 4815
                    }
                  },
                  "moduleName": "htis/templates/shortcut.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "table-responsive bills-box");
                  var el2 = dom.createElement("table");
                  dom.setAttribute(el2, "class", "table table-bordered");
                  var el3 = dom.createElement("thead");
                  var el4 = dom.createElement("tr");
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("单号");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("车辆");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("项目");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("部门");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("油品");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("加油量");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("油耗");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("里程数");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("加油工");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("加油时间");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("th");
                  var el6 = dom.createTextNode("签字");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("tbody");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0, 1]), 0, 0);
                  return morphs;
                },
                statements: [["block", "each", [["get", "bills", ["loc", [null, [1, 4383], [1, 4388]]]]], [], 0, null, ["loc", [null, [1, 4375], [1, 4793]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 4815
                    },
                    "end": {
                      "line": 1,
                      "column": 4933
                    }
                  },
                  "moduleName": "htis/templates/shortcut.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "empty-box");
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "glyphicon glyphicon-road");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "empty-title");
                  var el3 = dom.createTextNode("没有找到数据");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 4114
                  },
                  "end": {
                    "line": 1,
                    "column": 4940
                  }
                },
                "moduleName": "htis/templates/shortcut.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "bills.length", ["loc", [null, [1, 4128], [1, 4140]]]]], [], 0, 1, ["loc", [null, [1, 4122], [1, 4940]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3963
                },
                "end": {
                  "line": 1,
                  "column": 4947
                }
              },
              "moduleName": "htis/templates/shortcut.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isSearchingBills", ["loc", [null, [1, 3977], [1, 3993]]]]], [], 0, 1, ["loc", [null, [1, 3971], [1, 4947]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 192
              },
              "end": {
                "line": 1,
                "column": 4972
              }
            },
            "moduleName": "htis/templates/shortcut.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading text-center");
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "title", "返回");
            dom.setAttribute(el4, "href", "javascript:void(0)");
            dom.setAttribute(el4, "class", "btn-back pull-left hidden-print");
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-arrow-left");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "sr-only");
            var el6 = dom.createTextNode("返回");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "target", "_blank");
            dom.setAttribute(el4, "title", "打印");
            dom.setAttribute(el4, "href", "print.html");
            dom.setAttribute(el4, "class", "btn-print pull-right hidden-print hidden-xs");
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-print");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "sr-only");
            var el6 = dom.createTextNode("打印");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "title", "时间范围设置");
            dom.setAttribute(el4, "href", "javascript:void(0)");
            dom.setAttribute(el4, "class", "btn-back pull-right hidden-print margin-right");
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-cog");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "sr-only");
            var el6 = dom.createTextNode("设置");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-scroll");
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "well well-full well-sm text-center");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "glyphicon glyphicon-info-sign split-right text-warning");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "text-warning");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "list-group list-full is-child-node-title");
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "list-group-item");
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-subtitles pull-left");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("汇总报表");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "list-group list-full");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "list-group list-full is-child-node-title hidden-print");
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "list-group-item");
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-subtitles pull-left");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("明细列表");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "list-group list-full hidden-print");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element21 = dom.childAt(fragment, [0]);
            var element22 = dom.childAt(element21, [0, 0]);
            var element23 = dom.childAt(element22, [0]);
            var element24 = dom.childAt(element22, [2]);
            var element25 = dom.childAt(element21, [1]);
            var morphs = new Array(8);
            morphs[0] = dom.createElementMorph(element23);
            morphs[1] = dom.createElementMorph(element24);
            morphs[2] = dom.createMorphAt(element22, 3, 3);
            morphs[3] = dom.createMorphAt(element22, 4, 4);
            morphs[4] = dom.createMorphAt(dom.childAt(element25, [0, 1]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element25, [2]), 0, 0);
            morphs[6] = dom.createMorphAt(dom.childAt(element25, [3, 0]), 2, 2);
            morphs[7] = dom.createMorphAt(dom.childAt(element25, [4]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["goBack"], [], ["loc", [null, [1, 356], [1, 375]]]], ["element", "action", ["openSetting"], [], ["loc", [null, [1, 727], [1, 751]]]], ["inline", "spin-button", [], ["action", "export", "isIcon", true, "loadedIcon", "glyphicon-export", "isLoading", ["subexpr", "@mut", [["get", "isExporting", ["loc", [null, [1, 1009], [1, 1020]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isExporting", ["loc", [null, [1, 1032], [1, 1043]]]]], [], []], "title", "导出", "class", "btn-export pull-right margin-right is-blank hidden-print"], ["loc", [null, [1, 927], [1, 1121]]]], ["content", "pannelTitle", ["loc", [null, [1, 1121], [1, 1136]]]], ["content", "filterText", ["loc", [null, [1, 1324], [1, 1338]]]], ["block", "if", [["get", "errorsForReports.length", ["loc", [null, [1, 1551], [1, 1574]]]]], [], 0, 1, ["loc", [null, [1, 1545], [1, 3388]]]], ["block", "if", [["get", "totalCount", ["loc", [null, [1, 3561], [1, 3571]]]]], [], 2, null, ["loc", [null, [1, 3555], [1, 3619]]]], ["block", "if", [["get", "errorsForBills.length", ["loc", [null, [1, 3684], [1, 3705]]]]], [], 3, 4, ["loc", [null, [1, 3678], [1, 4954]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 5473
                    },
                    "end": {
                      "line": 1,
                      "column": 5553
                    }
                  },
                  "moduleName": "htis/templates/shortcut.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "text-warning");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                  return morphs;
                },
                statements: [["content", "settingWarningText", ["loc", [null, [1, 5525], [1, 5547]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 5071
                  },
                  "end": {
                    "line": 1,
                    "column": 5726
                  }
                },
                "moduleName": "htis/templates/shortcut.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "list-group list-full");
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "list-group-item text-center");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("button");
                dom.setAttribute(el2, "class", "btn btn-info btn-block");
                var el3 = dom.createTextNode("确定");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("button");
                dom.setAttribute(el2, "class", "btn btn-default btn-block");
                var el3 = dom.createTextNode("重置");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [0]);
                var element1 = dom.childAt(element0, [0]);
                var element2 = dom.childAt(element0, [1]);
                var element3 = dom.childAt(element0, [2]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(element1, 0, 0);
                morphs[1] = dom.createMorphAt(element1, 1, 1);
                morphs[2] = dom.createMorphAt(element1, 2, 2);
                morphs[3] = dom.createElementMorph(element2);
                morphs[4] = dom.createElementMorph(element3);
                return morphs;
              },
              statements: [["inline", "date-picker-value", [], ["id", "startEndDate", "startDate", ["subexpr", "@mut", [["get", "settingOptions.startDate", ["loc", [null, [1, 5260], [1, 5284]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "settingOptions.endDate", ["loc", [null, [1, 5293], [1, 5315]]]]], [], []], "format", ["subexpr", "@mut", [["get", "settingDateFormat", ["loc", [null, [1, 5323], [1, 5340]]]]], [], []]], ["loc", [null, [1, 5212], [1, 5342]]]], ["inline", "date-picker", [], ["startDate", ["subexpr", "@mut", [["get", "settingOptions.startDate", ["loc", [null, [1, 5366], [1, 5390]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "settingOptions.endDate", ["loc", [null, [1, 5399], [1, 5421]]]]], [], []], "isResetNeeded", ["subexpr", "@mut", [["get", "isTimeResetNeeded", ["loc", [null, [1, 5436], [1, 5453]]]]], [], []], "isAutoCenter", true], ["loc", [null, [1, 5342], [1, 5473]]]], ["block", "if", [["get", "settingWarningText", ["loc", [null, [1, 5479], [1, 5497]]]]], [], 0, null, ["loc", [null, [1, 5473], [1, 5560]]]], ["element", "action", ["setDateFromSetting"], [], ["loc", [null, [1, 5574], [1, 5605]]]], ["element", "action", ["reset"], [], ["loc", [null, [1, 5656], [1, 5674]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 5008
                },
                "end": {
                  "line": 1,
                  "column": 5743
                }
              },
              "moduleName": "htis/templates/shortcut.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "detail-panel", [], ["pannelTitle", "时间范围设置", "leftButtonAction", "clearPop"], 0, null, ["loc", [null, [1, 5071], [1, 5743]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 4991
              },
              "end": {
                "line": 1,
                "column": 5759
              }
            },
            "moduleName": "htis/templates/shortcut.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "pick-up-pop", [], ["isPicking", ["subexpr", "@mut", [["get", "isPicking", ["loc", [null, [1, 5033], [1, 5042]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isPickUpPopActive", ["loc", [null, [1, 5052], [1, 5069]]]]], [], []]], 0, null, ["loc", [null, [1, 5008], [1, 5759]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 161
            },
            "end": {
              "line": 1,
              "column": 5766
            }
          },
          "moduleName": "htis/templates/shortcut.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 220], [1, 229]]]]], [], []], "isActive", true, "isBack", false, "isHide", false], 0, null, ["loc", [null, [1, 192], [1, 4991]]]], ["block", "if", [["get", "isPicking", ["loc", [null, [1, 4997], [1, 5006]]]]], [], 1, null, ["loc", [null, [1, 4991], [1, 5766]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 5791
          }
        },
        "moduleName": "htis/templates/shortcut.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "shortcut");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element26 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element26, 'class');
        morphs[2] = dom.createMorphAt(element26, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main opacity09 trans-all-05 print-content ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 111], [1, 145]]]], "is-folded"], [], ["loc", [null, [1, 106], [1, 159]]]]]]], ["block", "container-wrap", [], ["isFull", true], 0, null, ["loc", [null, [1, 161], [1, 5785]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/start", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 520
              },
              "end": {
                "line": 1,
                "column": 554
              }
            },
            "moduleName": "htis/templates/start.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "spin-space", ["loc", [null, [1, 540], [1, 554]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 554
              },
              "end": {
                "line": 1,
                "column": 682
              }
            },
            "moduleName": "htis/templates/start.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "glyphicon glyphicon-plane");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "class", "sr-only");
            var el2 = dom.createTextNode("一键优化");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "badge");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
            return morphs;
          },
          statements: [["content", "carsCount", ["loc", [null, [1, 663], [1, 676]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 825
              },
              "end": {
                "line": 1,
                "column": 899
              }
            },
            "moduleName": "htis/templates/start.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "text-center text-warning");
            var el2 = dom.createTextNode("Loading...");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 899
              },
              "end": {
                "line": 1,
                "column": 959
              }
            },
            "moduleName": "htis/templates/start.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "text-success");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "optimizedMessage", ["loc", [null, [1, 933], [1, 953]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 966
              },
              "end": {
                "line": 1,
                "column": 1082
              }
            },
            "moduleName": "htis/templates/start.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "help-block text-danger text-center");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [1, 1059], [1, 1076]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 364
            },
            "end": {
              "line": 1,
              "column": 1108
            }
          },
          "moduleName": "htis/templates/start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "pull-left optimizer-box");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "title", "一键优化");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "role", "tooltip");
          dom.setAttribute(el2, "class", "tooltip bottom fade in");
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "tooltip-arrow");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "tooltip-inner");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [0]);
          var element9 = dom.childAt(element8, [0]);
          var element10 = dom.childAt(element8, [1, 1]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element9, 'class');
          morphs[1] = dom.createElementMorph(element9);
          morphs[2] = dom.createMorphAt(element9, 0, 0);
          morphs[3] = dom.createMorphAt(element10, 0, 0);
          morphs[4] = dom.createMorphAt(element10, 1, 1);
          morphs[5] = dom.createMorphAt(element10, 2, 2);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["btn-top-icon ", ["subexpr", "if", [["get", "isOptimized", ["loc", [null, [1, 492], [1, 503]]]], "text-muted"], [], ["loc", [null, [1, 487], [1, 518]]]]]]], ["element", "action", ["oneTouchOptimize"], [], ["loc", [null, [1, 424], [1, 453]]]], ["block", "if", [["get", "isOptimizing", ["loc", [null, [1, 526], [1, 538]]]]], [], 0, 1, ["loc", [null, [1, 520], [1, 689]]]], ["content", "optimizerHelpInfo", ["loc", [null, [1, 804], [1, 825]]]], ["block", "if", [["get", "isOptimizing", ["loc", [null, [1, 831], [1, 843]]]]], [], 2, 3, ["loc", [null, [1, 825], [1, 966]]]], ["block", "each", [["get", "errors.server_side_error", ["loc", [null, [1, 974], [1, 998]]]]], [], 4, null, ["loc", [null, [1, 966], [1, 1091]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3082
                    },
                    "end": {
                      "line": 1,
                      "column": 3117
                    }
                  },
                  "moduleName": "htis/templates/start.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "bill.car.number", ["loc", [null, [1, 3098], [1, 3117]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.11",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 1,
                      "column": 3117
                    },
                    "end": {
                      "line": 1,
                      "column": 3191
                    }
                  },
                  "moduleName": "htis/templates/start.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "glyphicon glyphicon-question-sign text-muted");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.11",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 2996
                  },
                  "end": {
                    "line": 1,
                    "column": 3369
                  }
                },
                "moduleName": "htis/templates/start.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "class", "list-group-item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "glyphicon glyphicon-chevron-right pull-right");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("|");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("/");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [0]);
                var element2 = dom.childAt(element1, [2]);
                var morphs = new Array(6);
                morphs[0] = dom.createElementMorph(element1);
                morphs[1] = dom.createMorphAt(element1, 0, 0);
                morphs[2] = dom.createAttrMorph(element2, 'class');
                morphs[3] = dom.createMorphAt(element2, 0, 0);
                morphs[4] = dom.createMorphAt(element2, 2, 2);
                morphs[5] = dom.createMorphAt(element2, 4, 4);
                return morphs;
              },
              statements: [["element", "action", ["goBill", ["get", "bill", ["loc", [null, [1, 3051], [1, 3055]]]]], [], ["loc", [null, [1, 3033], [1, 3057]]]], ["block", "if", [["get", "bill.car", ["loc", [null, [1, 3088], [1, 3096]]]]], [], 0, 1, ["loc", [null, [1, 3082], [1, 3198]]]], ["attribute", "class", ["concat", ["pull-right text-", ["get", "bill.rateColor", ["loc", [null, [1, 3293], [1, 3307]]]]]]], ["content", "bill.rate", ["loc", [null, [1, 3311], [1, 3324]]]], ["content", "bill.volume", ["loc", [null, [1, 3325], [1, 3340]]]], ["content", "bill.oil.name", ["loc", [null, [1, 3341], [1, 3358]]]]],
              locals: ["bill"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2974
                },
                "end": {
                  "line": 1,
                  "column": 3378
                }
              },
              "moduleName": "htis/templates/start.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "arrangedResult", ["loc", [null, [1, 3004], [1, 3018]]]]], [], 0, null, ["loc", [null, [1, 2996], [1, 3378]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3378
                },
                "end": {
                  "line": 1,
                  "column": 3497
                }
              },
              "moduleName": "htis/templates/start.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "empty-box");
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "glyphicon glyphicon-road");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "empty-title");
              var el3 = dom.createTextNode("没有找到加油单");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3516
                },
                "end": {
                  "line": 1,
                  "column": 3842
                }
              },
              "moduleName": "htis/templates/start.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "panel-footer");
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "role", "tooltip");
              dom.setAttribute(el2, "class", "tooltip left fade in");
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "tooltip-arrow");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "tooltip-inner");
              var el4 = dom.createTextNode("点击开始扫码加油");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "title", "扫码加油");
              dom.setAttribute(el2, "class", "btn-scan");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "glyphicon glyphicon-screenshot");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("label");
              dom.setAttribute(el3, "class", "sr-only");
              var el4 = dom.createTextNode("扫码加油");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element0);
              return morphs;
            },
            statements: [["element", "action", ["goScanning"], [], ["loc", [null, [1, 3691], [1, 3714]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2344
              },
              "end": {
                "line": 1,
                "column": 3855
              }
            },
            "moduleName": "htis/templates/start.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "panel panel-primary");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "panel-heading text-center");
            var el3 = dom.createElement("h3");
            dom.setAttribute(el3, "class", "panel-title");
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "title", "折叠选项");
            dom.setAttribute(el4, "href", "javascript:void(0)");
            dom.setAttribute(el4, "class", "btn-fold pull-left");
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-menu-hamburger");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "sr-only");
            var el6 = dom.createTextNode("折叠选项");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            dom.setAttribute(el4, "title", "更多加油单");
            dom.setAttribute(el4, "class", "btn-more pull-right");
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "glyphicon glyphicon-cloud");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("label");
            dom.setAttribute(el5, "class", "sr-only");
            var el6 = dom.createTextNode("更多加油单");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "list-group list-full");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [0]);
            var element4 = dom.childAt(element3, [0, 0]);
            var element5 = dom.childAt(element4, [0]);
            var element6 = dom.childAt(element4, [2]);
            var element7 = dom.childAt(element3, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createElementMorph(element5);
            morphs[1] = dom.createMorphAt(element4, 1, 1);
            morphs[2] = dom.createElementMorph(element6);
            morphs[3] = dom.createAttrMorph(element7, 'class');
            morphs[4] = dom.createMorphAt(dom.childAt(element7, [0]), 0, 0);
            morphs[5] = dom.createMorphAt(element3, 2, 2);
            return morphs;
          },
          statements: [["element", "action", ["fold"], [], ["loc", [null, [1, 2528], [1, 2545]]]], ["content", "pannelTitle", ["loc", [null, [1, 2705], [1, 2720]]]], ["element", "action", ["goHistory"], [], ["loc", [null, [1, 2723], [1, 2745]]]], ["attribute", "class", ["concat", ["panel-scroll ", ["subexpr", "if", [["get", "isScanner", ["loc", [null, [1, 2914], [1, 2923]]]], "is-scanner"], [], ["loc", [null, [1, 2909], [1, 2938]]]]]]], ["block", "if", [["get", "arrangedResult", ["loc", [null, [1, 2980], [1, 2994]]]]], [], 0, 1, ["loc", [null, [1, 2974], [1, 3504]]]], ["block", "if", [["get", "isScanner", ["loc", [null, [1, 3522], [1, 3531]]]]], [], 2, null, ["loc", [null, [1, 3516], [1, 3849]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2290
            },
            "end": {
              "line": 1,
              "column": 3884
            }
          },
          "moduleName": "htis/templates/start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 2372], [1, 2381]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 2391], [1, 2399]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 2407], [1, 2413]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 2421], [1, 2427]]]]], [], []]], 0, null, ["loc", [null, [1, 2344], [1, 3874]]]], ["content", "outlet", ["loc", [null, [1, 3874], [1, 3884]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3909
          }
        },
        "moduleName": "htis/templates/start.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "home");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "navbar navbar-static-top");
        var el3 = dom.createElement("div");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "pull-left");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "navbar-brand");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-user");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "nav pull-right");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        dom.setAttribute(el4, "class", "pull-left");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "title", "通知中心");
        dom.setAttribute(el5, "class", "btn-top-icon");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-bell");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "sr-only");
        var el7 = dom.createTextNode("通知中心");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "badge");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        dom.setAttribute(el4, "class", "pull-left");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "title", "快捷打印");
        dom.setAttribute(el5, "class", "btn-top-icon");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-camera");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "sr-only");
        var el7 = dom.createTextNode("快捷打印");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        dom.setAttribute(el4, "class", "pull-left");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "title", "打印同步");
        dom.setAttribute(el5, "class", "btn-top-icon");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "glyphicon glyphicon-facetime-video");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "sr-only");
        var el7 = dom.createTextNode("打印同步");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "container-fluid option-box");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-6 option-item");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "title", "加油管理");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "t-shadow glyphicon glyphicon-scale");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "option-title");
        var el7 = dom.createTextNode("加油管理");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-6 option-item");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "title", "系统设置");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "t-shadow glyphicon glyphicon-wrench");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "option-title");
        var el7 = dom.createTextNode("系统设置");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [1]);
        var element12 = dom.childAt(element11, [0]);
        var element13 = dom.childAt(element12, [0, 0, 0]);
        var element14 = dom.childAt(element12, [1]);
        var element15 = dom.childAt(element14, [1, 0]);
        var element16 = dom.childAt(element14, [2, 0]);
        var element17 = dom.childAt(element14, [3, 0]);
        var element18 = dom.childAt(element11, [1, 0]);
        var element19 = dom.childAt(element18, [0, 0]);
        var element20 = dom.childAt(element18, [1, 0]);
        var morphs = new Array(14);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element11, 'class');
        morphs[2] = dom.createElementMorph(element13);
        morphs[3] = dom.createMorphAt(element13, 1, 1);
        morphs[4] = dom.createMorphAt(element14, 0, 0);
        morphs[5] = dom.createElementMorph(element15);
        morphs[6] = dom.createMorphAt(dom.childAt(element15, [2]), 0, 0);
        morphs[7] = dom.createElementMorph(element16);
        morphs[8] = dom.createElementMorph(element17);
        morphs[9] = dom.createAttrMorph(element19, 'class');
        morphs[10] = dom.createElementMorph(element19);
        morphs[11] = dom.createAttrMorph(element20, 'class');
        morphs[12] = dom.createElementMorph(element20);
        morphs[13] = dom.createMorphAt(element11, 2, 2);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["container-side"], [], ["loc", [null, [1, 0], [1, 28]]]], ["attribute", "class", ["concat", ["container-main trans-all-05 ", ["subexpr", "if", [["get", "applicationController.isSideActive", ["loc", [null, [1, 83], [1, 117]]]], "is-folded"], [], ["loc", [null, [1, 78], [1, 131]]]]]]], ["element", "action", ["goAccount"], [], ["loc", [null, [1, 202], [1, 224]]]], ["content", "sessionController.user.name", ["loc", [null, [1, 290], [1, 321]]]], ["block", "if", [["get", "isOptimizable", ["loc", [null, [1, 370], [1, 383]]]]], [], 0, null, ["loc", [null, [1, 364], [1, 1115]]]], ["element", "action", ["goBell"], [], ["loc", [null, [1, 1140], [1, 1159]]]], ["content", "messagesController.model.length", ["loc", [null, [1, 1294], [1, 1329]]]], ["element", "action", ["goShortcut"], [], ["loc", [null, [1, 1369], [1, 1392]]]], ["element", "action", ["goOnline"], [], ["loc", [null, [1, 1544], [1, 1565]]]], ["attribute", "class", ["concat", ["option-wrap ", ["subexpr", "unless", [["get", "sessionController.isManagePowered", ["loc", [null, [1, 1870], [1, 1903]]]], "disabled"], [], ["loc", [null, [1, 1861], [1, 1916]]]]]]], ["element", "action", ["goManage"], [], ["loc", [null, [1, 1807], [1, 1828]]]], ["attribute", "class", ["concat", ["option-wrap ", ["subexpr", "unless", [["get", "sessionController.isSystemPowered", ["loc", [null, [1, 2125], [1, 2158]]]], "disabled"], [], ["loc", [null, [1, 2116], [1, 2171]]]]]]], ["element", "action", ["goSetting"], [], ["loc", [null, [1, 2061], [1, 2083]]]], ["block", "container-wrap", [], ["isFolded", ["subexpr", "@mut", [["get", "isFolded", ["loc", [null, [1, 2317], [1, 2325]]]]], [], []], "isBoxShadow", true], 1, null, ["loc", [null, [1, 2290], [1, 3903]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/start/bill", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 413
                },
                "end": {
                  "line": 1,
                  "column": 511
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-warning-sign text-danger pull-right");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 518
                },
                "end": {
                  "line": 1,
                  "column": 628
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "glyphicon glyphicon-pawn text-success pull-right");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 833
                },
                "end": {
                  "line": 1,
                  "column": 870
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "model.car.number", ["loc", [null, [1, 850], [1, 870]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 870
                },
                "end": {
                  "line": 1,
                  "column": 918
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "text-warning");
              var el2 = dom.createTextNode("该车辆已闲置");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1115
                },
                "end": {
                  "line": 1,
                  "column": 1149
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "model.car.vin", ["loc", [null, [1, 1132], [1, 1149]]]]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1149
                },
                "end": {
                  "line": 1,
                  "column": 1197
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "text-warning");
              var el2 = dom.createTextNode("该车辆已闲置");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1219
                },
                "end": {
                  "line": 1,
                  "column": 1531
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "list-group-item form-group");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "car_vin");
              dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
              var el3 = dom.createTextNode("有效期");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 0]), 0, 0);
              return morphs;
            },
            statements: [["inline", "date-picker-value", [], ["startDate", ["subexpr", "@mut", [["get", "model.instance.start_date", ["loc", [null, [1, 1457], [1, 1482]]]]], [], []], "endDate", ["subexpr", "@mut", [["get", "model.instance.end_date", ["loc", [null, [1, 1491], [1, 1514]]]]], [], []]], ["loc", [null, [1, 1427], [1, 1516]]]]],
            locals: [],
            templates: []
          };
        })();
        var child7 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2778
                },
                "end": {
                  "line": 1,
                  "column": 2810
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "model.rate", ["loc", [null, [1, 2796], [1, 2810]]]]],
            locals: [],
            templates: []
          };
        })();
        var child8 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2810
                },
                "end": {
                  "line": 1,
                  "column": 2913
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "margin-right");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "text-warning");
              var el2 = dom.createTextNode("[第一次加油油耗无法计算]");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.rate", ["loc", [null, [1, 2845], [1, 2859]]]]],
            locals: [],
            templates: []
          };
        })();
        var child9 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.11",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 3353
                },
                "end": {
                  "line": 1,
                  "column": 3602
                }
              },
              "moduleName": "htis/templates/start/bill.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "list-group-item form-group");
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "signature");
              dom.setAttribute(el2, "class", "control-label col-md-2 col-sm-12");
              var el3 = dom.createTextNode("签字");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-8 col-sm-12");
              var el3 = dom.createElement("p");
              dom.setAttribute(el3, "class", "form-control-static");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 0]), 0, 0);
              return morphs;
            },
            statements: [["inline", "base64-img", [["get", "model.signature.sign", ["loc", [null, [1, 3565], [1, 3585]]]]], [], ["loc", [null, [1, 3552], [1, 3587]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 85
              },
              "end": {
                "line": 1,
                "column": 3614
              }
            },
            "moduleName": "htis/templates/start/bill.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-group list-full form-horizontal");
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "id");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("单号");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "car_number");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("车辆编号");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "car_vin");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("VIN");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "car_vin");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("所属项目");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "car_vin");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("使用部门");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "oil");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("油品");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "volume");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("加油量");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "mileage");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("里程数");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "rate");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("油耗");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "oiler");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("加油工");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "list-group-item form-group");
            var el3 = dom.createElement("label");
            dom.setAttribute(el3, "for", "time");
            dom.setAttribute(el3, "class", "control-label col-md-2 col-sm-12");
            var el4 = dom.createTextNode("加油时间");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "col-md-8 col-sm-12");
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "form-control-static");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(element0, [0, 1, 0]);
            var element2 = dom.childAt(element0, [9, 1, 0]);
            var morphs = new Array(17);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            morphs[3] = dom.createMorphAt(element1, 2, 2);
            morphs[4] = dom.createMorphAt(dom.childAt(element0, [1, 1, 0]), 0, 0);
            morphs[5] = dom.createMorphAt(dom.childAt(element0, [2, 1, 0]), 0, 0);
            morphs[6] = dom.createMorphAt(element0, 3, 3);
            morphs[7] = dom.createMorphAt(dom.childAt(element0, [4, 1, 0]), 0, 0);
            morphs[8] = dom.createMorphAt(dom.childAt(element0, [5, 1, 0]), 0, 0);
            morphs[9] = dom.createMorphAt(dom.childAt(element0, [6, 1, 0]), 0, 0);
            morphs[10] = dom.createMorphAt(dom.childAt(element0, [7, 1, 0]), 0, 0);
            morphs[11] = dom.createMorphAt(dom.childAt(element0, [8, 1, 0]), 0, 0);
            morphs[12] = dom.createAttrMorph(element2, 'class');
            morphs[13] = dom.createMorphAt(element2, 0, 0);
            morphs[14] = dom.createMorphAt(dom.childAt(element0, [10, 1, 0]), 0, 0);
            morphs[15] = dom.createMorphAt(dom.childAt(element0, [11, 1, 0]), 0, 0);
            morphs[16] = dom.createMorphAt(element0, 12, 12);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["form-control-static ", ["subexpr", "if", [["get", "model.is_lost", ["loc", [null, [1, 370], [1, 383]]]], "text-danger"], [], ["loc", [null, [1, 365], [1, 399]]]]]]], ["content", "model.id", ["loc", [null, [1, 401], [1, 413]]]], ["block", "if", [["get", "model.is_lost", ["loc", [null, [1, 419], [1, 432]]]]], [], 0, null, ["loc", [null, [1, 413], [1, 518]]]], ["block", "unless", [["get", "model.creater.is_sign_needed", ["loc", [null, [1, 528], [1, 556]]]]], [], 1, null, ["loc", [null, [1, 518], [1, 639]]]], ["block", "if", [["get", "model.car", ["loc", [null, [1, 839], [1, 848]]]]], [], 2, 3, ["loc", [null, [1, 833], [1, 925]]]], ["block", "if", [["get", "model.car", ["loc", [null, [1, 1121], [1, 1130]]]]], [], 4, 5, ["loc", [null, [1, 1115], [1, 1204]]]], ["block", "if", [["get", "model.instance.start_date", ["loc", [null, [1, 1225], [1, 1250]]]]], [], 6, null, ["loc", [null, [1, 1219], [1, 1538]]]], ["content", "model.project.name", ["loc", [null, [1, 1714], [1, 1736]]]], ["content", "model.department.name", ["loc", [null, [1, 1927], [1, 1952]]]], ["content", "model.oil.name", ["loc", [null, [1, 2137], [1, 2155]]]], ["content", "model.volume", ["loc", [null, [1, 2344], [1, 2360]]]], ["content", "model.mileage", ["loc", [null, [1, 2550], [1, 2567]]]], ["attribute", "class", ["concat", ["form-control-static text-", ["get", "model.rateColor", ["loc", [null, [1, 2759], [1, 2774]]]]]]], ["block", "if", [["get", "model.rate", ["loc", [null, [1, 2784], [1, 2794]]]]], [], 7, 8, ["loc", [null, [1, 2778], [1, 2920]]]], ["content", "model.oiler.name", ["loc", [null, [1, 3108], [1, 3128]]]], ["inline", "timefmt", [["get", "model.time", ["loc", [null, [1, 3326], [1, 3336]]]]], [], ["loc", [null, [1, 3316], [1, 3338]]]], ["block", "if", [["get", "model.signature", ["loc", [null, [1, 3359], [1, 3374]]]]], [], 9, null, ["loc", [null, [1, 3353], [1, 3609]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 3631
            }
          },
          "moduleName": "htis/templates/start/bill.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "detail-panel", [], ["pannelTitle", ["subexpr", "@mut", [["get", "pannelTitle", ["loc", [null, [1, 113], [1, 124]]]]], [], []], "class", "panel-primary"], 0, null, ["loc", [null, [1, 85], [1, 3631]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3660
          }
        },
        "moduleName": "htis/templates/start/bill.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "navigable-pane", [], ["routeName", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "isActive", ["subexpr", "@mut", [["get", "isActive", ["loc", [null, [1, 47], [1, 55]]]]], [], []], "isBack", ["subexpr", "@mut", [["get", "isBack", ["loc", [null, [1, 63], [1, 69]]]]], [], []], "isHide", ["subexpr", "@mut", [["get", "isHide", ["loc", [null, [1, 77], [1, 83]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [1, 3650]]]], ["content", "outlet", ["loc", [null, [1, 3650], [1, 3660]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("htis/templates/startup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 35
            },
            "end": {
              "line": 1,
              "column": 139
            }
          },
          "moduleName": "htis/templates/startup.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "help-block text-danger");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.message", ["loc", [null, [1, 116], [1, 133]]]]],
        locals: ["error"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 148
            },
            "end": {
              "line": 1,
              "column": 244
            }
          },
          "moduleName": "htis/templates/startup.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "btn btn-primary");
          var el3 = dom.createTextNode("再试一次");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["retry"], [], ["loc", [null, [1, 182], [1, 200]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 267
          }
        },
        "moduleName": "htis/templates/startup.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "startup loading");
        var el2 = dom.createTextNode("启动中...");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 2, 2);
        morphs[2] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "errors.server_side_error", ["loc", [null, [1, 43], [1, 67]]]]], [], 0, null, ["loc", [null, [1, 35], [1, 148]]]], ["block", "if", [["get", "errors.length", ["loc", [null, [1, 154], [1, 167]]]]], [], 1, null, ["loc", [null, [1, 148], [1, 251]]]], ["content", "outlet", ["loc", [null, [1, 257], [1, 267]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("htis/templates/valids", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.11",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 80
              },
              "end": {
                "line": 1,
                "column": 279
              }
            },
            "moduleName": "htis/templates/valids.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "valid-item");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "valid-item-title");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "pull-right badge");
            var el4 = dom.createTextNode("0");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "valid-item-content");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]), 0, 0);
            return morphs;
          },
          statements: [["content", "department.name", ["loc", [null, [1, 171], [1, 190]]]]],
          locals: ["department"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.11",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 49
            },
            "end": {
              "line": 1,
              "column": 288
            }
          },
          "moduleName": "htis/templates/valids.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "departments", ["loc", [null, [1, 88], [1, 99]]]]], [], 0, null, ["loc", [null, [1, 80], [1, 288]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.11",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 313
          }
        },
        "moduleName": "htis/templates/valids.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "valids");
        dom.setAttribute(el1, "class", "opacity09 print-content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        return morphs;
      },
      statements: [["block", "container-wrap", [], ["isFull", true], 0, null, ["loc", [null, [1, 49], [1, 307]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('htis/transforms/date', ['exports', 'ember-data'], function (exports, _emberData) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberData['default'].Transform.extend({
        deserialize: function deserialize(serialized) {
            if (!serialized) {
                return null;
            }
            if (typeof serialized === "string") {
                if (/Date/.test(serialized)) {
                    //"/Date(1419573609360+0800)/";
                    //注意这里要把+0800去掉
                    var time = serialized.match(/\d+/)[0];
                    var date = new Date(parseInt(time));
                    return date;
                    // let timezone = date.getTimezoneOffset();
                    // return date.addMinutes(timezone);
                } else {
                        //'2015-10-04T15:58:29.31','2015-10-10T17:46:15.9586905Z'
                        //由于ie下不支持毫秒解析（带毫秒会解析失败），所以只能正则匹配出所有数值
                        // '2015-10-04T15:58:29.31'.match(/\d+/g)
                        // ["2015", "10", "04", "15", "58", "29", "31"]

                        var _serialized$match = serialized.match(/\d+/g);

                        var _serialized$match2 = _slicedToArray(_serialized$match, 7);

                        var y = _serialized$match2[0];
                        var M = _serialized$match2[1];
                        var d = _serialized$match2[2];
                        var h = _serialized$match2[3];
                        var m = _serialized$match2[4];
                        var s = _serialized$match2[5];
                        var f = _serialized$match2[6];

                        f = f ? f.substr(0, 2) : 0; //只取毫秒的前两位
                        var date = new Date(y, M - 1, d, h, m, s, f);
                        return date;
                        // let timezone = date.getTimezoneOffset();
                        // return date.addMinutes(timezone);
                    }
            } else {
                    return serialized;
                }
        },

        serialize: function serialize(deserialized) {
            // return "/Date(1419573609360+0800)/";
            // deserialized.addMinutes(-deserialized.getTimezoneOffset());
            //这里需要拼出+0800这样的字符串，而不能用上述addMinutes函数
            //其原因是这里序列化的目标是为了给服务器使用（时区标记8小时），
            //它只是服务器的一个时区标记，而不是时间值真的添加了480分钟
            //如果这里在客户端添加8小时，当遇到服务器端执行失败的情况时就要去手动减去8小时还原。
            //所以应该在返回的服务器的字符串的处理时区问题，而不是在客户端直接处理时间值。
            if (!deserialized) {
                return null;
            }
            return deserialized.format('yyyy-MM-dd hh:mm:ss');
            // var timezone = -deserialized.getTimezoneOffset()/60;
            // return "/Date(%@+%@)/".fmt(deserialized.getTime(),timezone.toString() + "00");
        }
    });
});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('htis/config/environment', ['ember'], function(Ember) {
  var prefix = 'htis';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (!runningTests) {
  require("htis/app")["default"].create({"LOG_RESOLVER":false,"LOG_ACTIVE_GENERATION":false,"LOG_TRANSITIONS":false,"LOG_TRANSITIONS_INTERNAL":false,"LOG_VIEW_LOOKUPS":false,"name":"htis","version":"0.0.0+cdd77241"});
}

/* jshint ignore:end */
//# sourceMappingURL=htis.map